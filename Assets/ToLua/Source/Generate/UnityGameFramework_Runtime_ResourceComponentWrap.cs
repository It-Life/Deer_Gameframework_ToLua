//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityGameFramework_Runtime_ResourceComponentWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityGameFramework.Runtime.ResourceComponent), typeof(UnityGameFramework.Runtime.GameFrameworkComponent));
		L.RegFunction("SetResourceMode", new LuaCSFunction(SetResourceMode));
		L.RegFunction("SetCurrentVariant", new LuaCSFunction(SetCurrentVariant));
		L.RegFunction("SetDecryptResourceCallback", new LuaCSFunction(SetDecryptResourceCallback));
		L.RegFunction("UnloadUnusedAssets", new LuaCSFunction(UnloadUnusedAssets));
		L.RegFunction("ForceUnloadUnusedAssets", new LuaCSFunction(ForceUnloadUnusedAssets));
		L.RegFunction("InitResources", new LuaCSFunction(InitResources));
		L.RegFunction("CheckVersionList", new LuaCSFunction(CheckVersionList));
		L.RegFunction("UpdateVersionList", new LuaCSFunction(UpdateVersionList));
		L.RegFunction("CheckResources", new LuaCSFunction(CheckResources));
		L.RegFunction("ApplyResources", new LuaCSFunction(ApplyResources));
		L.RegFunction("UpdateResources", new LuaCSFunction(UpdateResources));
		L.RegFunction("VerifyResourcePack", new LuaCSFunction(VerifyResourcePack));
		L.RegFunction("HasAsset", new LuaCSFunction(HasAsset));
		L.RegFunction("LoadAsset", new LuaCSFunction(LoadAsset));
		L.RegFunction("UnloadAsset", new LuaCSFunction(UnloadAsset));
		L.RegFunction("GetBinaryPath", new LuaCSFunction(GetBinaryPath));
		L.RegFunction("GetBinaryLength", new LuaCSFunction(GetBinaryLength));
		L.RegFunction("LoadBinary", new LuaCSFunction(LoadBinary));
		L.RegFunction("LoadBinaryFromFileSystem", new LuaCSFunction(LoadBinaryFromFileSystem));
		L.RegFunction("LoadBinarySegmentFromFileSystem", new LuaCSFunction(LoadBinarySegmentFromFileSystem));
		L.RegFunction("HasResourceGroup", new LuaCSFunction(HasResourceGroup));
		L.RegFunction("GetResourceGroup", new LuaCSFunction(GetResourceGroup));
		L.RegFunction("GetAllLoadAssetInfos", new LuaCSFunction(GetAllLoadAssetInfos));
		L.RegFunction("__eq", new LuaCSFunction(op_Equality));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("ReadOnlyPath", new LuaCSFunction(get_ReadOnlyPath), null);
		L.RegVar("ReadWritePath", new LuaCSFunction(get_ReadWritePath), null);
		L.RegVar("ResourceMode", new LuaCSFunction(get_ResourceMode), null);
		L.RegVar("ReadWritePathType", new LuaCSFunction(get_ReadWritePathType), null);
		L.RegVar("CurrentVariant", new LuaCSFunction(get_CurrentVariant), null);
		L.RegVar("PackageVersionListSerializer", new LuaCSFunction(get_PackageVersionListSerializer), null);
		L.RegVar("UpdatableVersionListSerializer", new LuaCSFunction(get_UpdatableVersionListSerializer), null);
		L.RegVar("ReadOnlyVersionListSerializer", new LuaCSFunction(get_ReadOnlyVersionListSerializer), null);
		L.RegVar("ReadWriteVersionListSerializer", new LuaCSFunction(get_ReadWriteVersionListSerializer), null);
		L.RegVar("ResourcePackVersionListSerializer", new LuaCSFunction(get_ResourcePackVersionListSerializer), null);
		L.RegVar("UnloadUnusedAssetsInterval", new LuaCSFunction(get_UnloadUnusedAssetsInterval), new LuaCSFunction(set_UnloadUnusedAssetsInterval));
		L.RegVar("ApplicableGameVersion", new LuaCSFunction(get_ApplicableGameVersion), null);
		L.RegVar("InternalResourceVersion", new LuaCSFunction(get_InternalResourceVersion), null);
		L.RegVar("AssetCount", new LuaCSFunction(get_AssetCount), null);
		L.RegVar("ResourceCount", new LuaCSFunction(get_ResourceCount), null);
		L.RegVar("ResourceGroupCount", new LuaCSFunction(get_ResourceGroupCount), null);
		L.RegVar("UpdatePrefixUri", new LuaCSFunction(get_UpdatePrefixUri), new LuaCSFunction(set_UpdatePrefixUri));
		L.RegVar("GenerateReadWriteVersionListLength", new LuaCSFunction(get_GenerateReadWriteVersionListLength), new LuaCSFunction(set_GenerateReadWriteVersionListLength));
		L.RegVar("ApplyingResourcePackPath", new LuaCSFunction(get_ApplyingResourcePackPath), null);
		L.RegVar("ApplyWaitingCount", new LuaCSFunction(get_ApplyWaitingCount), null);
		L.RegVar("UpdateRetryCount", new LuaCSFunction(get_UpdateRetryCount), new LuaCSFunction(set_UpdateRetryCount));
		L.RegVar("UpdatingResourceGroup", new LuaCSFunction(get_UpdatingResourceGroup), null);
		L.RegVar("UpdateWaitingCount", new LuaCSFunction(get_UpdateWaitingCount), null);
		L.RegVar("UpdateCandidateCount", new LuaCSFunction(get_UpdateCandidateCount), null);
		L.RegVar("UpdatingCount", new LuaCSFunction(get_UpdatingCount), null);
		L.RegVar("LoadTotalAgentCount", new LuaCSFunction(get_LoadTotalAgentCount), null);
		L.RegVar("LoadFreeAgentCount", new LuaCSFunction(get_LoadFreeAgentCount), null);
		L.RegVar("LoadWorkingAgentCount", new LuaCSFunction(get_LoadWorkingAgentCount), null);
		L.RegVar("LoadWaitingTaskCount", new LuaCSFunction(get_LoadWaitingTaskCount), null);
		L.RegVar("AssetAutoReleaseInterval", new LuaCSFunction(get_AssetAutoReleaseInterval), new LuaCSFunction(set_AssetAutoReleaseInterval));
		L.RegVar("AssetCapacity", new LuaCSFunction(get_AssetCapacity), new LuaCSFunction(set_AssetCapacity));
		L.RegVar("AssetExpireTime", new LuaCSFunction(get_AssetExpireTime), new LuaCSFunction(set_AssetExpireTime));
		L.RegVar("AssetPriority", new LuaCSFunction(get_AssetPriority), new LuaCSFunction(set_AssetPriority));
		L.RegVar("ResourceAutoReleaseInterval", new LuaCSFunction(get_ResourceAutoReleaseInterval), new LuaCSFunction(set_ResourceAutoReleaseInterval));
		L.RegVar("ResourceCapacity", new LuaCSFunction(get_ResourceCapacity), new LuaCSFunction(set_ResourceCapacity));
		L.RegVar("ResourceExpireTime", new LuaCSFunction(get_ResourceExpireTime), new LuaCSFunction(set_ResourceExpireTime));
		L.RegVar("ResourcePriority", new LuaCSFunction(get_ResourcePriority), new LuaCSFunction(set_ResourcePriority));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetResourceMode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
			GameFramework.Resource.ResourceMode arg0 = (GameFramework.Resource.ResourceMode)ToLua.CheckObject(L, 2, TypeTraits<GameFramework.Resource.ResourceMode>.type);
			obj.SetResourceMode(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetCurrentVariant(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.SetCurrentVariant(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetDecryptResourceCallback(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
			GameFramework.Resource.DecryptResourceCallback arg0 = (GameFramework.Resource.DecryptResourceCallback)ToLua.CheckDelegate<GameFramework.Resource.DecryptResourceCallback>(L, 2);
			obj.SetDecryptResourceCallback(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnloadUnusedAssets(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.UnloadUnusedAssets(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForceUnloadUnusedAssets(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.ForceUnloadUnusedAssets(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InitResources(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
			GameFramework.Resource.InitResourcesCompleteCallback arg0 = (GameFramework.Resource.InitResourcesCompleteCallback)ToLua.CheckDelegate<GameFramework.Resource.InitResourcesCompleteCallback>(L, 2);
			obj.InitResources(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckVersionList(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			GameFramework.Resource.CheckVersionListResult o = obj.CheckVersionList(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateVersionList(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
			int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
			int arg3 = (int)LuaDLL.luaL_checkinteger(L, 5);
			GameFramework.Resource.UpdateVersionListCallbacks arg4 = (GameFramework.Resource.UpdateVersionListCallbacks)ToLua.CheckObject<GameFramework.Resource.UpdateVersionListCallbacks>(L, 6);
			obj.UpdateVersionList(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckResources(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
				GameFramework.Resource.CheckResourcesCompleteCallback arg0 = (GameFramework.Resource.CheckResourcesCompleteCallback)ToLua.CheckDelegate<GameFramework.Resource.CheckResourcesCompleteCallback>(L, 2);
				obj.CheckResources(arg0);
				return 0;
			}
			else if (count == 3)
			{
				UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				GameFramework.Resource.CheckResourcesCompleteCallback arg1 = (GameFramework.Resource.CheckResourcesCompleteCallback)ToLua.CheckDelegate<GameFramework.Resource.CheckResourcesCompleteCallback>(L, 3);
				obj.CheckResources(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.ResourceComponent.CheckResources");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ApplyResources(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			GameFramework.Resource.ApplyResourcesCompleteCallback arg1 = (GameFramework.Resource.ApplyResourcesCompleteCallback)ToLua.CheckDelegate<GameFramework.Resource.ApplyResourcesCompleteCallback>(L, 3);
			obj.ApplyResources(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateResources(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
				GameFramework.Resource.UpdateResourcesCompleteCallback arg0 = (GameFramework.Resource.UpdateResourcesCompleteCallback)ToLua.CheckDelegate<GameFramework.Resource.UpdateResourcesCompleteCallback>(L, 2);
				obj.UpdateResources(arg0);
				return 0;
			}
			else if (count == 3)
			{
				UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				GameFramework.Resource.UpdateResourcesCompleteCallback arg1 = (GameFramework.Resource.UpdateResourcesCompleteCallback)ToLua.CheckDelegate<GameFramework.Resource.UpdateResourcesCompleteCallback>(L, 3);
				obj.UpdateResources(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.ResourceComponent.UpdateResources");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int VerifyResourcePack(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.VerifyResourcePack(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasAsset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			GameFramework.Resource.HasAssetResult o = obj.HasAsset(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAsset(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				GameFramework.Resource.LoadAssetCallbacks arg1 = (GameFramework.Resource.LoadAssetCallbacks)ToLua.CheckObject<GameFramework.Resource.LoadAssetCallbacks>(L, 3);
				obj.LoadAsset(arg0, arg1);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<int, GameFramework.Resource.LoadAssetCallbacks>(L, 3))
			{
				UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				int arg1 = (int)LuaDLL.lua_tointeger(L, 3);
				GameFramework.Resource.LoadAssetCallbacks arg2 = (GameFramework.Resource.LoadAssetCallbacks)ToLua.ToObject(L, 4);
				obj.LoadAsset(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<System.Type, GameFramework.Resource.LoadAssetCallbacks>(L, 3))
			{
				UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 3);
				GameFramework.Resource.LoadAssetCallbacks arg2 = (GameFramework.Resource.LoadAssetCallbacks)ToLua.ToObject(L, 4);
				obj.LoadAsset(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<GameFramework.Resource.LoadAssetCallbacks, object>(L, 3))
			{
				UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				GameFramework.Resource.LoadAssetCallbacks arg1 = (GameFramework.Resource.LoadAssetCallbacks)ToLua.ToObject(L, 3);
				object arg2 = ToLua.ToVarObject(L, 4);
				obj.LoadAsset(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes<int, GameFramework.Resource.LoadAssetCallbacks, object>(L, 3))
			{
				UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				int arg1 = (int)LuaDLL.lua_tointeger(L, 3);
				GameFramework.Resource.LoadAssetCallbacks arg2 = (GameFramework.Resource.LoadAssetCallbacks)ToLua.ToObject(L, 4);
				object arg3 = ToLua.ToVarObject(L, 5);
				obj.LoadAsset(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes<System.Type, int, GameFramework.Resource.LoadAssetCallbacks>(L, 3))
			{
				UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 3);
				int arg2 = (int)LuaDLL.lua_tointeger(L, 4);
				GameFramework.Resource.LoadAssetCallbacks arg3 = (GameFramework.Resource.LoadAssetCallbacks)ToLua.ToObject(L, 5);
				obj.LoadAsset(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes<System.Type, GameFramework.Resource.LoadAssetCallbacks, object>(L, 3))
			{
				UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 3);
				GameFramework.Resource.LoadAssetCallbacks arg2 = (GameFramework.Resource.LoadAssetCallbacks)ToLua.ToObject(L, 4);
				object arg3 = ToLua.ToVarObject(L, 5);
				obj.LoadAsset(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 6)
			{
				UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Type arg1 = ToLua.CheckMonoType(L, 3);
				int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
				GameFramework.Resource.LoadAssetCallbacks arg3 = (GameFramework.Resource.LoadAssetCallbacks)ToLua.CheckObject<GameFramework.Resource.LoadAssetCallbacks>(L, 5);
				object arg4 = ToLua.ToVarObject(L, 6);
				obj.LoadAsset(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.ResourceComponent.LoadAsset");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnloadAsset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.UnloadAsset(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBinaryPath(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string o = obj.GetBinaryPath(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 6)
			{
				UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				bool arg1;
				bool arg2;
				string arg3 = null;
				string arg4 = null;
				bool o = obj.GetBinaryPath(arg0, out arg1, out arg2, out arg3, out arg4);
				LuaDLL.lua_pushboolean(L, o);
				LuaDLL.lua_pushboolean(L, arg1);
				LuaDLL.lua_pushboolean(L, arg2);
				LuaDLL.lua_pushstring(L, arg3);
				LuaDLL.lua_pushstring(L, arg4);
				return 5;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.ResourceComponent.GetBinaryPath");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBinaryLength(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			int o = obj.GetBinaryLength(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadBinary(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				GameFramework.Resource.LoadBinaryCallbacks arg1 = (GameFramework.Resource.LoadBinaryCallbacks)ToLua.CheckObject<GameFramework.Resource.LoadBinaryCallbacks>(L, 3);
				obj.LoadBinary(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				GameFramework.Resource.LoadBinaryCallbacks arg1 = (GameFramework.Resource.LoadBinaryCallbacks)ToLua.CheckObject<GameFramework.Resource.LoadBinaryCallbacks>(L, 3);
				object arg2 = ToLua.ToVarObject(L, 4);
				obj.LoadBinary(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.ResourceComponent.LoadBinary");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadBinaryFromFileSystem(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				byte[] o = obj.LoadBinaryFromFileSystem(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 3);
				int o = obj.LoadBinaryFromFileSystem(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 3);
				int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
				int o = obj.LoadBinaryFromFileSystem(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 5)
			{
				UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 3);
				int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
				int arg3 = (int)LuaDLL.luaL_checkinteger(L, 5);
				int o = obj.LoadBinaryFromFileSystem(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.ResourceComponent.LoadBinaryFromFileSystem");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadBinarySegmentFromFileSystem(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
				byte[] o = obj.LoadBinarySegmentFromFileSystem(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<int, int>(L, 3))
			{
				UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				int arg1 = (int)LuaDLL.lua_tointeger(L, 3);
				int arg2 = (int)LuaDLL.lua_tointeger(L, 4);
				byte[] o = obj.LoadBinarySegmentFromFileSystem(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<byte[], int>(L, 3))
			{
				UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 3);
				int arg2 = (int)LuaDLL.lua_tointeger(L, 4);
				int o = obj.LoadBinarySegmentFromFileSystem(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<int, byte[], int>(L, 3))
			{
				UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				int arg1 = (int)LuaDLL.lua_tointeger(L, 3);
				byte[] arg2 = ToLua.CheckByteBuffer(L, 4);
				int arg3 = (int)LuaDLL.lua_tointeger(L, 5);
				int o = obj.LoadBinarySegmentFromFileSystem(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<byte[], int, int>(L, 3))
			{
				UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 3);
				int arg2 = (int)LuaDLL.lua_tointeger(L, 4);
				int arg3 = (int)LuaDLL.lua_tointeger(L, 5);
				int o = obj.LoadBinarySegmentFromFileSystem(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 6)
			{
				UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
				byte[] arg2 = ToLua.CheckByteBuffer(L, 4);
				int arg3 = (int)LuaDLL.luaL_checkinteger(L, 5);
				int arg4 = (int)LuaDLL.luaL_checkinteger(L, 6);
				int o = obj.LoadBinarySegmentFromFileSystem(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.ResourceComponent.LoadBinarySegmentFromFileSystem");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasResourceGroup(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.HasResourceGroup(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetResourceGroup(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
				GameFramework.Resource.IResourceGroup o = obj.GetResourceGroup();
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2)
			{
				UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				GameFramework.Resource.IResourceGroup o = obj.GetResourceGroup(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.ResourceComponent.GetResourceGroup");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAllLoadAssetInfos(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ResourceComponent>(L, 1);
			GameFramework.TaskInfo[] o = obj.GetAllLoadAssetInfos();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ReadOnlyPath(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			string ret = obj.ReadOnlyPath;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ReadOnlyPath on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ReadWritePath(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			string ret = obj.ReadWritePath;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ReadWritePath on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ResourceMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			GameFramework.Resource.ResourceMode ret = obj.ResourceMode;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ResourceMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ReadWritePathType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			UnityGameFramework.Runtime.ReadWritePathType ret = obj.ReadWritePathType;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ReadWritePathType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CurrentVariant(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			string ret = obj.CurrentVariant;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CurrentVariant on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PackageVersionListSerializer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			GameFramework.Resource.PackageVersionListSerializer ret = obj.PackageVersionListSerializer;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index PackageVersionListSerializer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UpdatableVersionListSerializer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			GameFramework.Resource.UpdatableVersionListSerializer ret = obj.UpdatableVersionListSerializer;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UpdatableVersionListSerializer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ReadOnlyVersionListSerializer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			GameFramework.Resource.ReadOnlyVersionListSerializer ret = obj.ReadOnlyVersionListSerializer;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ReadOnlyVersionListSerializer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ReadWriteVersionListSerializer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			GameFramework.Resource.ReadWriteVersionListSerializer ret = obj.ReadWriteVersionListSerializer;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ReadWriteVersionListSerializer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ResourcePackVersionListSerializer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			GameFramework.Resource.ResourcePackVersionListSerializer ret = obj.ResourcePackVersionListSerializer;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ResourcePackVersionListSerializer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UnloadUnusedAssetsInterval(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			float ret = obj.UnloadUnusedAssetsInterval;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UnloadUnusedAssetsInterval on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ApplicableGameVersion(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			string ret = obj.ApplicableGameVersion;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ApplicableGameVersion on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_InternalResourceVersion(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			int ret = obj.InternalResourceVersion;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index InternalResourceVersion on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AssetCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			int ret = obj.AssetCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AssetCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ResourceCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			int ret = obj.ResourceCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ResourceCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ResourceGroupCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			int ret = obj.ResourceGroupCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ResourceGroupCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UpdatePrefixUri(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			string ret = obj.UpdatePrefixUri;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UpdatePrefixUri on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GenerateReadWriteVersionListLength(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			int ret = obj.GenerateReadWriteVersionListLength;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index GenerateReadWriteVersionListLength on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ApplyingResourcePackPath(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			string ret = obj.ApplyingResourcePackPath;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ApplyingResourcePackPath on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ApplyWaitingCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			int ret = obj.ApplyWaitingCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ApplyWaitingCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UpdateRetryCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			int ret = obj.UpdateRetryCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UpdateRetryCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UpdatingResourceGroup(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			GameFramework.Resource.IResourceGroup ret = obj.UpdatingResourceGroup;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UpdatingResourceGroup on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UpdateWaitingCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			int ret = obj.UpdateWaitingCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UpdateWaitingCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UpdateCandidateCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			int ret = obj.UpdateCandidateCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UpdateCandidateCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UpdatingCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			int ret = obj.UpdatingCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UpdatingCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LoadTotalAgentCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			int ret = obj.LoadTotalAgentCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LoadTotalAgentCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LoadFreeAgentCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			int ret = obj.LoadFreeAgentCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LoadFreeAgentCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LoadWorkingAgentCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			int ret = obj.LoadWorkingAgentCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LoadWorkingAgentCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LoadWaitingTaskCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			int ret = obj.LoadWaitingTaskCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LoadWaitingTaskCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AssetAutoReleaseInterval(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			float ret = obj.AssetAutoReleaseInterval;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AssetAutoReleaseInterval on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AssetCapacity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			int ret = obj.AssetCapacity;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AssetCapacity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AssetExpireTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			float ret = obj.AssetExpireTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AssetExpireTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AssetPriority(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			int ret = obj.AssetPriority;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AssetPriority on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ResourceAutoReleaseInterval(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			float ret = obj.ResourceAutoReleaseInterval;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ResourceAutoReleaseInterval on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ResourceCapacity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			int ret = obj.ResourceCapacity;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ResourceCapacity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ResourceExpireTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			float ret = obj.ResourceExpireTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ResourceExpireTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ResourcePriority(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			int ret = obj.ResourcePriority;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ResourcePriority on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UnloadUnusedAssetsInterval(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.UnloadUnusedAssetsInterval = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UnloadUnusedAssetsInterval on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UpdatePrefixUri(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.UpdatePrefixUri = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UpdatePrefixUri on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GenerateReadWriteVersionListLength(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.GenerateReadWriteVersionListLength = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index GenerateReadWriteVersionListLength on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UpdateRetryCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.UpdateRetryCount = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UpdateRetryCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AssetAutoReleaseInterval(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.AssetAutoReleaseInterval = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AssetAutoReleaseInterval on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AssetCapacity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.AssetCapacity = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AssetCapacity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AssetExpireTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.AssetExpireTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AssetExpireTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AssetPriority(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.AssetPriority = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AssetPriority on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ResourceAutoReleaseInterval(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.ResourceAutoReleaseInterval = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ResourceAutoReleaseInterval on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ResourceCapacity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.ResourceCapacity = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ResourceCapacity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ResourceExpireTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.ResourceExpireTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ResourceExpireTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ResourcePriority(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ResourceComponent obj = (UnityGameFramework.Runtime.ResourceComponent)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.ResourcePriority = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ResourcePriority on a nil value");
		}
	}
}

