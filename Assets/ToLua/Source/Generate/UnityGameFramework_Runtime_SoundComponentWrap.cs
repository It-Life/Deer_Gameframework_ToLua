//this source code was auto-generated by tolua#, do not modify it
using System;
using Deer;
using LuaInterface;

public class UnityGameFramework_Runtime_SoundComponentWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityGameFramework.Runtime.SoundComponent), typeof(UnityGameFramework.Runtime.GameFrameworkComponent));
		L.RegFunction("HasSoundGroup", new LuaCSFunction(HasSoundGroup));
		L.RegFunction("GetSoundGroup", new LuaCSFunction(GetSoundGroup));
		L.RegFunction("GetAllSoundGroups", new LuaCSFunction(GetAllSoundGroups));
		L.RegFunction("AddSoundGroup", new LuaCSFunction(AddSoundGroup));
		L.RegFunction("GetAllLoadingSoundSerialIds", new LuaCSFunction(GetAllLoadingSoundSerialIds));
		L.RegFunction("IsLoadingSound", new LuaCSFunction(IsLoadingSound));
		L.RegFunction("PlaySound", new LuaCSFunction(PlaySound));
		L.RegFunction("StopSound", new LuaCSFunction(StopSound));
		L.RegFunction("StopAllLoadedSounds", new LuaCSFunction(StopAllLoadedSounds));
		L.RegFunction("StopAllLoadingSounds", new LuaCSFunction(StopAllLoadingSounds));
		L.RegFunction("PauseSound", new LuaCSFunction(PauseSound));
		L.RegFunction("ResumeSound", new LuaCSFunction(ResumeSound));
		L.RegFunction("SetVolume", new LuaCSFunction(SetVolume));
		L.RegFunction("GetVolume", new LuaCSFunction(GetVolume));
		L.RegFunction("Mute", new LuaCSFunction(Mute));
		L.RegFunction("IsMuted", new LuaCSFunction(IsMuted));
		L.RegFunction("PlayUISound", new LuaCSFunction(PlayUISound));
		L.RegFunction("StopMusic", new LuaCSFunction(StopMusic));
		L.RegFunction("PlayMusic", new LuaCSFunction(PlayMusic));
		L.RegFunction("__eq", new LuaCSFunction(op_Equality));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("SoundGroupCount", new LuaCSFunction(get_SoundGroupCount), null);
		L.RegVar("AudioMixer", new LuaCSFunction(get_AudioMixer), null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasSoundGroup(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject<UnityGameFramework.Runtime.SoundComponent>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.HasSoundGroup(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSoundGroup(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject<UnityGameFramework.Runtime.SoundComponent>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			GameFramework.Sound.ISoundGroup o = obj.GetSoundGroup(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAllSoundGroups(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject<UnityGameFramework.Runtime.SoundComponent>(L, 1);
				GameFramework.Sound.ISoundGroup[] o = obj.GetAllSoundGroups();
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2)
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject<UnityGameFramework.Runtime.SoundComponent>(L, 1);
				System.Collections.Generic.List<GameFramework.Sound.ISoundGroup> arg0 = (System.Collections.Generic.List<GameFramework.Sound.ISoundGroup>)ToLua.CheckObject(L, 2, TypeTraits<System.Collections.Generic.List<GameFramework.Sound.ISoundGroup>>.type);
				obj.GetAllSoundGroups(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.SoundComponent.GetAllSoundGroups");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddSoundGroup(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject<UnityGameFramework.Runtime.SoundComponent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
				bool o = obj.AddSoundGroup(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 6)
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject<UnityGameFramework.Runtime.SoundComponent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
				int arg4 = (int)LuaDLL.luaL_checkinteger(L, 6);
				bool o = obj.AddSoundGroup(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.SoundComponent.AddSoundGroup");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAllLoadingSoundSerialIds(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject<UnityGameFramework.Runtime.SoundComponent>(L, 1);
				int[] o = obj.GetAllLoadingSoundSerialIds();
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2)
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject<UnityGameFramework.Runtime.SoundComponent>(L, 1);
				System.Collections.Generic.List<int> arg0 = (System.Collections.Generic.List<int>)ToLua.CheckObject(L, 2, TypeTraits<System.Collections.Generic.List<int>>.type);
				obj.GetAllLoadingSoundSerialIds(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.SoundComponent.GetAllLoadingSoundSerialIds");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsLoadingSound(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject<UnityGameFramework.Runtime.SoundComponent>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			bool o = obj.IsLoadingSound(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlaySound(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject<UnityGameFramework.Runtime.SoundComponent>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
				System.Nullable<int> o = obj.PlaySound(arg0);
				ToLua.PusNullable(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, UnityGameFramework.Runtime.EntityLogic>(L, 2))
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject<UnityGameFramework.Runtime.SoundComponent>(L, 1);
				int arg0 = (int)LuaDLL.lua_tointeger(L, 2);
				UnityGameFramework.Runtime.EntityLogic arg1 = (UnityGameFramework.Runtime.EntityLogic)ToLua.ToObject(L, 3);
				System.Nullable<int> o = obj.PlaySound(arg0, arg1);
				ToLua.PusNullable(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, string>(L, 2))
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject<UnityGameFramework.Runtime.SoundComponent>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				int o = obj.PlaySound(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<int, UnityGameFramework.Runtime.EntityLogic, object>(L, 2))
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject<UnityGameFramework.Runtime.SoundComponent>(L, 1);
				int arg0 = (int)LuaDLL.lua_tointeger(L, 2);
				UnityGameFramework.Runtime.EntityLogic arg1 = (UnityGameFramework.Runtime.EntityLogic)ToLua.ToObject(L, 3);
				object arg2 = ToLua.ToVarObject(L, 4);
				System.Nullable<int> o = obj.PlaySound(arg0, arg1, arg2);
				ToLua.PusNullable(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<string, string, int>(L, 2))
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject<UnityGameFramework.Runtime.SoundComponent>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				int arg2 = (int)LuaDLL.lua_tointeger(L, 4);
				int o = obj.PlaySound(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<string, string, GameFramework.Sound.PlaySoundParams>(L, 2))
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject<UnityGameFramework.Runtime.SoundComponent>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				GameFramework.Sound.PlaySoundParams arg2 = (GameFramework.Sound.PlaySoundParams)ToLua.ToObject(L, 4);
				int o = obj.PlaySound(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<string, string, UnityGameFramework.Runtime.Entity>(L, 2))
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject<UnityGameFramework.Runtime.SoundComponent>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				UnityGameFramework.Runtime.Entity arg2 = (UnityGameFramework.Runtime.Entity)ToLua.ToObject(L, 4);
				int o = obj.PlaySound(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<string, string, UnityEngine.Vector3>(L, 2))
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject<UnityGameFramework.Runtime.SoundComponent>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 4);
				int o = obj.PlaySound(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<string, string, object>(L, 2))
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject<UnityGameFramework.Runtime.SoundComponent>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				object arg2 = ToLua.ToVarObject(L, 4);
				int o = obj.PlaySound(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 5)
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject<UnityGameFramework.Runtime.SoundComponent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
				GameFramework.Sound.PlaySoundParams arg3 = (GameFramework.Sound.PlaySoundParams)ToLua.CheckObject<GameFramework.Sound.PlaySoundParams>(L, 5);
				int o = obj.PlaySound(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 6 && TypeChecker.CheckTypes<UnityGameFramework.Runtime.Entity>(L, 6))
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject<UnityGameFramework.Runtime.SoundComponent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
				GameFramework.Sound.PlaySoundParams arg3 = (GameFramework.Sound.PlaySoundParams)ToLua.CheckObject<GameFramework.Sound.PlaySoundParams>(L, 5);
				UnityGameFramework.Runtime.Entity arg4 = (UnityGameFramework.Runtime.Entity)ToLua.ToObject(L, 6);
				int o = obj.PlaySound(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 6 && TypeChecker.CheckTypes<UnityEngine.Vector3>(L, 6))
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject<UnityGameFramework.Runtime.SoundComponent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
				GameFramework.Sound.PlaySoundParams arg3 = (GameFramework.Sound.PlaySoundParams)ToLua.CheckObject<GameFramework.Sound.PlaySoundParams>(L, 5);
				UnityEngine.Vector3 arg4 = ToLua.ToVector3(L, 6);
				int o = obj.PlaySound(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 6 && TypeChecker.CheckTypes<object>(L, 6))
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject<UnityGameFramework.Runtime.SoundComponent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
				GameFramework.Sound.PlaySoundParams arg3 = (GameFramework.Sound.PlaySoundParams)ToLua.CheckObject<GameFramework.Sound.PlaySoundParams>(L, 5);
				object arg4 = ToLua.ToVarObject(L, 6);
				int o = obj.PlaySound(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 7 && TypeChecker.CheckTypes<UnityGameFramework.Runtime.Entity, object>(L, 6))
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject<UnityGameFramework.Runtime.SoundComponent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
				GameFramework.Sound.PlaySoundParams arg3 = (GameFramework.Sound.PlaySoundParams)ToLua.CheckObject<GameFramework.Sound.PlaySoundParams>(L, 5);
				UnityGameFramework.Runtime.Entity arg4 = (UnityGameFramework.Runtime.Entity)ToLua.ToObject(L, 6);
				object arg5 = ToLua.ToVarObject(L, 7);
				int o = obj.PlaySound(arg0, arg1, arg2, arg3, arg4, arg5);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 7 && TypeChecker.CheckTypes<UnityEngine.Vector3, object>(L, 6))
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject<UnityGameFramework.Runtime.SoundComponent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
				GameFramework.Sound.PlaySoundParams arg3 = (GameFramework.Sound.PlaySoundParams)ToLua.CheckObject<GameFramework.Sound.PlaySoundParams>(L, 5);
				UnityEngine.Vector3 arg4 = ToLua.ToVector3(L, 6);
				object arg5 = ToLua.ToVarObject(L, 7);
				int o = obj.PlaySound(arg0, arg1, arg2, arg3, arg4, arg5);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.SoundComponent.PlaySound");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopSound(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject<UnityGameFramework.Runtime.SoundComponent>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
				bool o = obj.StopSound(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject<UnityGameFramework.Runtime.SoundComponent>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				bool o = obj.StopSound(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.SoundComponent.StopSound");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopAllLoadedSounds(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject<UnityGameFramework.Runtime.SoundComponent>(L, 1);
				obj.StopAllLoadedSounds();
				return 0;
			}
			else if (count == 2)
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject<UnityGameFramework.Runtime.SoundComponent>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				obj.StopAllLoadedSounds(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.SoundComponent.StopAllLoadedSounds");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopAllLoadingSounds(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject<UnityGameFramework.Runtime.SoundComponent>(L, 1);
			obj.StopAllLoadingSounds();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PauseSound(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject<UnityGameFramework.Runtime.SoundComponent>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
				obj.PauseSound(arg0);
				return 0;
			}
			else if (count == 3)
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject<UnityGameFramework.Runtime.SoundComponent>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				obj.PauseSound(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.SoundComponent.PauseSound");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResumeSound(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject<UnityGameFramework.Runtime.SoundComponent>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
				obj.ResumeSound(arg0);
				return 0;
			}
			else if (count == 3)
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject<UnityGameFramework.Runtime.SoundComponent>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				obj.ResumeSound(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.SoundComponent.ResumeSound");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetVolume(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject<UnityGameFramework.Runtime.SoundComponent>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			obj.SetVolume(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetVolume(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject<UnityGameFramework.Runtime.SoundComponent>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			float o = obj.GetVolume(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Mute(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject<UnityGameFramework.Runtime.SoundComponent>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.Mute(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsMuted(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject<UnityGameFramework.Runtime.SoundComponent>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.IsMuted(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayUISound(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject<UnityGameFramework.Runtime.SoundComponent>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
				System.Nullable<int> o = obj.PlayUISound(arg0);
				ToLua.PusNullable(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject<UnityGameFramework.Runtime.SoundComponent>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				System.Nullable<int> o = obj.PlayUISound(arg0, arg1);
				ToLua.PusNullable(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.SoundComponent.PlayUISound");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopMusic(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject<UnityGameFramework.Runtime.SoundComponent>(L, 1);
			obj.StopMusic();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayMusic(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject<UnityGameFramework.Runtime.SoundComponent>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
				System.Nullable<int> o = obj.PlayMusic(arg0);
				ToLua.PusNullable(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject<UnityGameFramework.Runtime.SoundComponent>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				System.Nullable<int> o = obj.PlayMusic(arg0, arg1);
				ToLua.PusNullable(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.SoundComponent.PlayMusic");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SoundGroupCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)o;
			int ret = obj.SoundGroupCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SoundGroupCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AudioMixer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)o;
			UnityEngine.Audio.AudioMixer ret = obj.AudioMixer;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AudioMixer on a nil value");
		}
	}
}

