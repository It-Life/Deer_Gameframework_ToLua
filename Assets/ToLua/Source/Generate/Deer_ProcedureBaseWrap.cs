//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Deer_ProcedureBaseWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Deer.ProcedureBase), typeof(GameFramework.Procedure.ProcedureBase));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("IsLuaProcedure", new LuaCSFunction(get_IsLuaProcedure), new LuaCSFunction(set_IsLuaProcedure));
		L.RegVar("UseNativeDialog", new LuaCSFunction(get_UseNativeDialog), null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsLuaProcedure(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Deer.ProcedureBase obj = (Deer.ProcedureBase)o;
			bool ret = obj.IsLuaProcedure;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsLuaProcedure on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UseNativeDialog(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Deer.ProcedureBase obj = (Deer.ProcedureBase)o;
			bool ret = obj.UseNativeDialog;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UseNativeDialog on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsLuaProcedure(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Deer.ProcedureBase obj = (Deer.ProcedureBase)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsLuaProcedure = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsLuaProcedure on a nil value");
		}
	}
}

