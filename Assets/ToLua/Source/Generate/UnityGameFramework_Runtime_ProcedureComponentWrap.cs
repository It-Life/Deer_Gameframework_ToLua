//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityGameFramework_Runtime_ProcedureComponentWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityGameFramework.Runtime.ProcedureComponent), typeof(UnityGameFramework.Runtime.GameFrameworkComponent));
		L.RegFunction("HasProcedure", new LuaCSFunction(HasProcedure));
		L.RegFunction("GetProcedure", new LuaCSFunction(GetProcedure));
		L.RegFunction("__eq", new LuaCSFunction(op_Equality));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("CurrentProcedure", new LuaCSFunction(get_CurrentProcedure), null);
		L.RegVar("CurrentProcedureTime", new LuaCSFunction(get_CurrentProcedureTime), null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasProcedure(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.ProcedureComponent obj = (UnityGameFramework.Runtime.ProcedureComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ProcedureComponent>(L, 1);
			System.Type arg0 = ToLua.CheckMonoType(L, 2);
			bool o = obj.HasProcedure(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetProcedure(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.ProcedureComponent obj = (UnityGameFramework.Runtime.ProcedureComponent)ToLua.CheckObject<UnityGameFramework.Runtime.ProcedureComponent>(L, 1);
			System.Type arg0 = ToLua.CheckMonoType(L, 2);
			GameFramework.Procedure.ProcedureBase o = obj.GetProcedure(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CurrentProcedure(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ProcedureComponent obj = (UnityGameFramework.Runtime.ProcedureComponent)o;
			GameFramework.Procedure.ProcedureBase ret = obj.CurrentProcedure;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CurrentProcedure on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CurrentProcedureTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ProcedureComponent obj = (UnityGameFramework.Runtime.ProcedureComponent)o;
			float ret = obj.CurrentProcedureTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CurrentProcedureTime on a nil value");
		}
	}
}

