//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Cinemachine_CinemachineVirtualCameraWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Cinemachine.CinemachineVirtualCamera), typeof(Cinemachine.CinemachineVirtualCameraBase));
		L.RegFunction("GetMaxDampTime", new LuaCSFunction(GetMaxDampTime));
		L.RegFunction("InternalUpdateCameraState", new LuaCSFunction(InternalUpdateCameraState));
		L.RegFunction("InvalidateComponentPipeline", new LuaCSFunction(InvalidateComponentPipeline));
		L.RegFunction("GetComponentOwner", new LuaCSFunction(GetComponentOwner));
		L.RegFunction("GetComponentPipeline", new LuaCSFunction(GetComponentPipeline));
		L.RegFunction("GetCinemachineComponent", new LuaCSFunction(GetCinemachineComponent));
		L.RegFunction("OnTargetObjectWarped", new LuaCSFunction(OnTargetObjectWarped));
		L.RegFunction("ForceCameraPosition", new LuaCSFunction(ForceCameraPosition));
		L.RegFunction("OnTransitionFromCamera", new LuaCSFunction(OnTransitionFromCamera));
		L.RegFunction("__eq", new LuaCSFunction(op_Equality));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("m_LookAt", new LuaCSFunction(get_m_LookAt), new LuaCSFunction(set_m_LookAt));
		L.RegVar("m_Follow", new LuaCSFunction(get_m_Follow), new LuaCSFunction(set_m_Follow));
		L.RegVar("m_Lens", new LuaCSFunction(get_m_Lens), new LuaCSFunction(set_m_Lens));
		L.RegVar("m_Transitions", new LuaCSFunction(get_m_Transitions), new LuaCSFunction(set_m_Transitions));
		L.RegVar("PipelineName", new LuaCSFunction(get_PipelineName), null);
		L.RegVar("CreatePipelineOverride", new LuaCSFunction(get_CreatePipelineOverride), new LuaCSFunction(set_CreatePipelineOverride));
		L.RegVar("DestroyPipelineOverride", new LuaCSFunction(get_DestroyPipelineOverride), new LuaCSFunction(set_DestroyPipelineOverride));
		L.RegVar("State", new LuaCSFunction(get_State), null);
		L.RegVar("LookAt", new LuaCSFunction(get_LookAt), new LuaCSFunction(set_LookAt));
		L.RegVar("Follow", new LuaCSFunction(get_Follow), new LuaCSFunction(set_Follow));
		L.RegFunction("DestroyPipelineDelegate", new LuaCSFunction(Cinemachine_CinemachineVirtualCamera_DestroyPipelineDelegate));
		L.RegFunction("CreatePipelineDelegate", new LuaCSFunction(Cinemachine_CinemachineVirtualCamera_CreatePipelineDelegate));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMaxDampTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Cinemachine.CinemachineVirtualCamera obj = (Cinemachine.CinemachineVirtualCamera)ToLua.CheckObject<Cinemachine.CinemachineVirtualCamera>(L, 1);
			float o = obj.GetMaxDampTime();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InternalUpdateCameraState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Cinemachine.CinemachineVirtualCamera obj = (Cinemachine.CinemachineVirtualCamera)ToLua.CheckObject<Cinemachine.CinemachineVirtualCamera>(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			obj.InternalUpdateCameraState(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InvalidateComponentPipeline(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Cinemachine.CinemachineVirtualCamera obj = (Cinemachine.CinemachineVirtualCamera)ToLua.CheckObject<Cinemachine.CinemachineVirtualCamera>(L, 1);
			obj.InvalidateComponentPipeline();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetComponentOwner(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Cinemachine.CinemachineVirtualCamera obj = (Cinemachine.CinemachineVirtualCamera)ToLua.CheckObject<Cinemachine.CinemachineVirtualCamera>(L, 1);
			UnityEngine.Transform o = obj.GetComponentOwner();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetComponentPipeline(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Cinemachine.CinemachineVirtualCamera obj = (Cinemachine.CinemachineVirtualCamera)ToLua.CheckObject<Cinemachine.CinemachineVirtualCamera>(L, 1);
			Cinemachine.CinemachineComponentBase[] o = obj.GetComponentPipeline();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCinemachineComponent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Cinemachine.CinemachineVirtualCamera obj = (Cinemachine.CinemachineVirtualCamera)ToLua.CheckObject<Cinemachine.CinemachineVirtualCamera>(L, 1);
			Cinemachine.CinemachineCore.Stage arg0 = (Cinemachine.CinemachineCore.Stage)ToLua.CheckObject(L, 2, TypeTraits<Cinemachine.CinemachineCore.Stage>.type);
			Cinemachine.CinemachineComponentBase o = obj.GetCinemachineComponent(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnTargetObjectWarped(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Cinemachine.CinemachineVirtualCamera obj = (Cinemachine.CinemachineVirtualCamera)ToLua.CheckObject<Cinemachine.CinemachineVirtualCamera>(L, 1);
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 2);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
			obj.OnTargetObjectWarped(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForceCameraPosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Cinemachine.CinemachineVirtualCamera obj = (Cinemachine.CinemachineVirtualCamera)ToLua.CheckObject<Cinemachine.CinemachineVirtualCamera>(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			UnityEngine.Quaternion arg1 = ToLua.ToQuaternion(L, 3);
			obj.ForceCameraPosition(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnTransitionFromCamera(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Cinemachine.CinemachineVirtualCamera obj = (Cinemachine.CinemachineVirtualCamera)ToLua.CheckObject<Cinemachine.CinemachineVirtualCamera>(L, 1);
			Cinemachine.ICinemachineCamera arg0 = (Cinemachine.ICinemachineCamera)ToLua.CheckObject<Cinemachine.ICinemachineCamera>(L, 2);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			obj.OnTransitionFromCamera(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_LookAt(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Cinemachine.CinemachineVirtualCamera obj = (Cinemachine.CinemachineVirtualCamera)o;
			UnityEngine.Transform ret = obj.m_LookAt;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_LookAt on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_Follow(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Cinemachine.CinemachineVirtualCamera obj = (Cinemachine.CinemachineVirtualCamera)o;
			UnityEngine.Transform ret = obj.m_Follow;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_Follow on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_Lens(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Cinemachine.CinemachineVirtualCamera obj = (Cinemachine.CinemachineVirtualCamera)o;
			Cinemachine.LensSettings ret = obj.m_Lens;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_Lens on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_Transitions(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Cinemachine.CinemachineVirtualCamera obj = (Cinemachine.CinemachineVirtualCamera)o;
			Cinemachine.CinemachineVirtualCameraBase.TransitionParams ret = obj.m_Transitions;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_Transitions on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PipelineName(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Cinemachine.CinemachineVirtualCamera.PipelineName);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CreatePipelineOverride(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Cinemachine.CinemachineVirtualCamera.CreatePipelineOverride);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DestroyPipelineOverride(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Cinemachine.CinemachineVirtualCamera.DestroyPipelineOverride);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_State(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Cinemachine.CinemachineVirtualCamera obj = (Cinemachine.CinemachineVirtualCamera)o;
			Cinemachine.CameraState ret = obj.State;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index State on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LookAt(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Cinemachine.CinemachineVirtualCamera obj = (Cinemachine.CinemachineVirtualCamera)o;
			UnityEngine.Transform ret = obj.LookAt;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LookAt on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Follow(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Cinemachine.CinemachineVirtualCamera obj = (Cinemachine.CinemachineVirtualCamera)o;
			UnityEngine.Transform ret = obj.Follow;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Follow on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_LookAt(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Cinemachine.CinemachineVirtualCamera obj = (Cinemachine.CinemachineVirtualCamera)o;
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 2);
			obj.m_LookAt = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_LookAt on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_Follow(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Cinemachine.CinemachineVirtualCamera obj = (Cinemachine.CinemachineVirtualCamera)o;
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 2);
			obj.m_Follow = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_Follow on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_Lens(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Cinemachine.CinemachineVirtualCamera obj = (Cinemachine.CinemachineVirtualCamera)o;
			Cinemachine.LensSettings arg0 = StackTraits<Cinemachine.LensSettings>.Check(L, 2);
			obj.m_Lens = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_Lens on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_Transitions(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Cinemachine.CinemachineVirtualCamera obj = (Cinemachine.CinemachineVirtualCamera)o;
			Cinemachine.CinemachineVirtualCameraBase.TransitionParams arg0 = StackTraits<Cinemachine.CinemachineVirtualCameraBase.TransitionParams>.Check(L, 2);
			obj.m_Transitions = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_Transitions on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CreatePipelineOverride(IntPtr L)
	{
		try
		{
			Cinemachine.CinemachineVirtualCamera.CreatePipelineDelegate arg0 = (Cinemachine.CinemachineVirtualCamera.CreatePipelineDelegate)ToLua.CheckDelegate<Cinemachine.CinemachineVirtualCamera.CreatePipelineDelegate>(L, 2);
			Cinemachine.CinemachineVirtualCamera.CreatePipelineOverride = arg0;

			if (!object.ReferenceEquals(Cinemachine.CinemachineVirtualCamera.CreatePipelineOverride, arg0))
			{
				if (Cinemachine.CinemachineVirtualCamera.CreatePipelineOverride != null) Cinemachine.CinemachineVirtualCamera.CreatePipelineOverride.SubRef();
				Cinemachine.CinemachineVirtualCamera.CreatePipelineOverride = arg0;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DestroyPipelineOverride(IntPtr L)
	{
		try
		{
			Cinemachine.CinemachineVirtualCamera.DestroyPipelineDelegate arg0 = (Cinemachine.CinemachineVirtualCamera.DestroyPipelineDelegate)ToLua.CheckDelegate<Cinemachine.CinemachineVirtualCamera.DestroyPipelineDelegate>(L, 2);
			Cinemachine.CinemachineVirtualCamera.DestroyPipelineOverride = arg0;

			if (!object.ReferenceEquals(Cinemachine.CinemachineVirtualCamera.DestroyPipelineOverride, arg0))
			{
				if (Cinemachine.CinemachineVirtualCamera.DestroyPipelineOverride != null) Cinemachine.CinemachineVirtualCamera.DestroyPipelineOverride.SubRef();
				Cinemachine.CinemachineVirtualCamera.DestroyPipelineOverride = arg0;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LookAt(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Cinemachine.CinemachineVirtualCamera obj = (Cinemachine.CinemachineVirtualCamera)o;
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 2);
			obj.LookAt = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LookAt on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Follow(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Cinemachine.CinemachineVirtualCamera obj = (Cinemachine.CinemachineVirtualCamera)o;
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 2);
			obj.Follow = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Follow on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Cinemachine_CinemachineVirtualCamera_DestroyPipelineDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<Cinemachine.CinemachineVirtualCamera.DestroyPipelineDelegate>.Create(func);
				ToLua.Push(L, arg1);
				func.Dispose();
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<Cinemachine.CinemachineVirtualCamera.DestroyPipelineDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
				func.Dispose();
				self.Dispose();
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Cinemachine_CinemachineVirtualCamera_CreatePipelineDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<Cinemachine.CinemachineVirtualCamera.CreatePipelineDelegate>.Create(func);
				ToLua.Push(L, arg1);
				func.Dispose();
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<Cinemachine.CinemachineVirtualCamera.CreatePipelineDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
				func.Dispose();
				self.Dispose();
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

