//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameFramework_Resource_LoadAssetCallbacksWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GameFramework.Resource.LoadAssetCallbacks), typeof(System.Object));
		L.RegFunction("New", new LuaCSFunction(_CreateGameFramework_Resource_LoadAssetCallbacks));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("LoadAssetSuccessCallback", new LuaCSFunction(get_LoadAssetSuccessCallback), null);
		L.RegVar("LoadAssetFailureCallback", new LuaCSFunction(get_LoadAssetFailureCallback), null);
		L.RegVar("LoadAssetUpdateCallback", new LuaCSFunction(get_LoadAssetUpdateCallback), null);
		L.RegVar("LoadAssetDependencyAssetCallback", new LuaCSFunction(get_LoadAssetDependencyAssetCallback), null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateGameFramework_Resource_LoadAssetCallbacks(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				GameFramework.Resource.LoadAssetSuccessCallback arg0 = (GameFramework.Resource.LoadAssetSuccessCallback)ToLua.CheckDelegate<GameFramework.Resource.LoadAssetSuccessCallback>(L, 1);
				GameFramework.Resource.LoadAssetCallbacks obj = new GameFramework.Resource.LoadAssetCallbacks(arg0);
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<GameFramework.Resource.LoadAssetFailureCallback>(L, 2))
			{
				GameFramework.Resource.LoadAssetSuccessCallback arg0 = (GameFramework.Resource.LoadAssetSuccessCallback)ToLua.CheckDelegate<GameFramework.Resource.LoadAssetSuccessCallback>(L, 1);
				GameFramework.Resource.LoadAssetFailureCallback arg1 = (GameFramework.Resource.LoadAssetFailureCallback)ToLua.ToObject(L, 2);
				GameFramework.Resource.LoadAssetCallbacks obj = new GameFramework.Resource.LoadAssetCallbacks(arg0, arg1);
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<GameFramework.Resource.LoadAssetUpdateCallback>(L, 2))
			{
				GameFramework.Resource.LoadAssetSuccessCallback arg0 = (GameFramework.Resource.LoadAssetSuccessCallback)ToLua.CheckDelegate<GameFramework.Resource.LoadAssetSuccessCallback>(L, 1);
				GameFramework.Resource.LoadAssetUpdateCallback arg1 = (GameFramework.Resource.LoadAssetUpdateCallback)ToLua.ToObject(L, 2);
				GameFramework.Resource.LoadAssetCallbacks obj = new GameFramework.Resource.LoadAssetCallbacks(arg0, arg1);
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<GameFramework.Resource.LoadAssetDependencyAssetCallback>(L, 2))
			{
				GameFramework.Resource.LoadAssetSuccessCallback arg0 = (GameFramework.Resource.LoadAssetSuccessCallback)ToLua.CheckDelegate<GameFramework.Resource.LoadAssetSuccessCallback>(L, 1);
				GameFramework.Resource.LoadAssetDependencyAssetCallback arg1 = (GameFramework.Resource.LoadAssetDependencyAssetCallback)ToLua.ToObject(L, 2);
				GameFramework.Resource.LoadAssetCallbacks obj = new GameFramework.Resource.LoadAssetCallbacks(arg0, arg1);
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<GameFramework.Resource.LoadAssetUpdateCallback>(L, 3))
			{
				GameFramework.Resource.LoadAssetSuccessCallback arg0 = (GameFramework.Resource.LoadAssetSuccessCallback)ToLua.CheckDelegate<GameFramework.Resource.LoadAssetSuccessCallback>(L, 1);
				GameFramework.Resource.LoadAssetFailureCallback arg1 = (GameFramework.Resource.LoadAssetFailureCallback)ToLua.CheckDelegate<GameFramework.Resource.LoadAssetFailureCallback>(L, 2);
				GameFramework.Resource.LoadAssetUpdateCallback arg2 = (GameFramework.Resource.LoadAssetUpdateCallback)ToLua.ToObject(L, 3);
				GameFramework.Resource.LoadAssetCallbacks obj = new GameFramework.Resource.LoadAssetCallbacks(arg0, arg1, arg2);
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<GameFramework.Resource.LoadAssetDependencyAssetCallback>(L, 3))
			{
				GameFramework.Resource.LoadAssetSuccessCallback arg0 = (GameFramework.Resource.LoadAssetSuccessCallback)ToLua.CheckDelegate<GameFramework.Resource.LoadAssetSuccessCallback>(L, 1);
				GameFramework.Resource.LoadAssetFailureCallback arg1 = (GameFramework.Resource.LoadAssetFailureCallback)ToLua.CheckDelegate<GameFramework.Resource.LoadAssetFailureCallback>(L, 2);
				GameFramework.Resource.LoadAssetDependencyAssetCallback arg2 = (GameFramework.Resource.LoadAssetDependencyAssetCallback)ToLua.ToObject(L, 3);
				GameFramework.Resource.LoadAssetCallbacks obj = new GameFramework.Resource.LoadAssetCallbacks(arg0, arg1, arg2);
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else if (count == 4)
			{
				GameFramework.Resource.LoadAssetSuccessCallback arg0 = (GameFramework.Resource.LoadAssetSuccessCallback)ToLua.CheckDelegate<GameFramework.Resource.LoadAssetSuccessCallback>(L, 1);
				GameFramework.Resource.LoadAssetFailureCallback arg1 = (GameFramework.Resource.LoadAssetFailureCallback)ToLua.CheckDelegate<GameFramework.Resource.LoadAssetFailureCallback>(L, 2);
				GameFramework.Resource.LoadAssetUpdateCallback arg2 = (GameFramework.Resource.LoadAssetUpdateCallback)ToLua.CheckDelegate<GameFramework.Resource.LoadAssetUpdateCallback>(L, 3);
				GameFramework.Resource.LoadAssetDependencyAssetCallback arg3 = (GameFramework.Resource.LoadAssetDependencyAssetCallback)ToLua.CheckDelegate<GameFramework.Resource.LoadAssetDependencyAssetCallback>(L, 4);
				GameFramework.Resource.LoadAssetCallbacks obj = new GameFramework.Resource.LoadAssetCallbacks(arg0, arg1, arg2, arg3);
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: GameFramework.Resource.LoadAssetCallbacks.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LoadAssetSuccessCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.Resource.LoadAssetCallbacks obj = (GameFramework.Resource.LoadAssetCallbacks)o;
			GameFramework.Resource.LoadAssetSuccessCallback ret = obj.LoadAssetSuccessCallback;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LoadAssetSuccessCallback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LoadAssetFailureCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.Resource.LoadAssetCallbacks obj = (GameFramework.Resource.LoadAssetCallbacks)o;
			GameFramework.Resource.LoadAssetFailureCallback ret = obj.LoadAssetFailureCallback;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LoadAssetFailureCallback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LoadAssetUpdateCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.Resource.LoadAssetCallbacks obj = (GameFramework.Resource.LoadAssetCallbacks)o;
			GameFramework.Resource.LoadAssetUpdateCallback ret = obj.LoadAssetUpdateCallback;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LoadAssetUpdateCallback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LoadAssetDependencyAssetCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.Resource.LoadAssetCallbacks obj = (GameFramework.Resource.LoadAssetCallbacks)o;
			GameFramework.Resource.LoadAssetDependencyAssetCallback ret = obj.LoadAssetDependencyAssetCallback;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LoadAssetDependencyAssetCallback on a nil value");
		}
	}
}

