//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class NetConnectorComponentWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(NetConnectorComponent), typeof(UnityGameFramework.Runtime.GameFrameworkComponent));
		L.RegFunction("CreateTcpNetworkChannel", new LuaCSFunction(CreateTcpNetworkChannel));
		L.RegFunction("CreateTcpWithSyncNetworkChannel", new LuaCSFunction(CreateTcpWithSyncNetworkChannel));
		L.RegFunction("Connect", new LuaCSFunction(Connect));
		L.RegFunction("Close", new LuaCSFunction(Close));
		L.RegFunction("SetHeartBeatInterval", new LuaCSFunction(SetHeartBeatInterval));
		L.RegFunction("Send", new LuaCSFunction(Send));
		L.RegFunction("__eq", new LuaCSFunction(op_Equality));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("channelHelper", new LuaCSFunction(get_channelHelper), new LuaCSFunction(set_channelHelper));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateTcpNetworkChannel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NetConnectorComponent obj = (NetConnectorComponent)ToLua.CheckObject<NetConnectorComponent>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			GameFramework.Network.INetworkChannel o = obj.CreateTcpNetworkChannel(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateTcpWithSyncNetworkChannel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NetConnectorComponent obj = (NetConnectorComponent)ToLua.CheckObject<NetConnectorComponent>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			GameFramework.Network.INetworkChannel o = obj.CreateTcpWithSyncNetworkChannel(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Connect(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				NetConnectorComponent obj = (NetConnectorComponent)ToLua.CheckObject<NetConnectorComponent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
				obj.Connect(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				NetConnectorComponent obj = (NetConnectorComponent)ToLua.CheckObject<NetConnectorComponent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
				object arg3 = ToLua.ToVarObject(L, 5);
				obj.Connect(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: NetConnectorComponent.Connect");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Close(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NetConnectorComponent obj = (NetConnectorComponent)ToLua.CheckObject<NetConnectorComponent>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.Close(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetHeartBeatInterval(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			NetConnectorComponent obj = (NetConnectorComponent)ToLua.CheckObject<NetConnectorComponent>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			obj.SetHeartBeatInterval(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Send(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			NetConnectorComponent obj = (NetConnectorComponent)ToLua.CheckObject<NetConnectorComponent>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			ushort arg1 = (ushort)LuaDLL.luaL_checkinteger(L, 3);
			byte[] arg2 = ToLua.CheckByteBuffer(L, 4);
			obj.Send(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_channelHelper(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NetConnectorComponent obj = (NetConnectorComponent)o;
			Deer.Scripts.Framework.Network.NetworkChannelHelper ret = obj.channelHelper;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index channelHelper on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_channelHelper(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NetConnectorComponent obj = (NetConnectorComponent)o;
			Deer.Scripts.Framework.Network.NetworkChannelHelper arg0 = (Deer.Scripts.Framework.Network.NetworkChannelHelper)ToLua.CheckObject<Deer.Scripts.Framework.Network.NetworkChannelHelper>(L, 2);
			obj.channelHelper = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index channelHelper on a nil value");
		}
	}
}

