//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_CanvasRendererWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEngine.CanvasRenderer), typeof(UnityEngine.Component));
		L.RegFunction("SetColor", new LuaCSFunction(SetColor));
		L.RegFunction("GetColor", new LuaCSFunction(GetColor));
		L.RegFunction("EnableRectClipping", new LuaCSFunction(EnableRectClipping));
		L.RegFunction("DisableRectClipping", new LuaCSFunction(DisableRectClipping));
		L.RegFunction("SetMaterial", new LuaCSFunction(SetMaterial));
		L.RegFunction("GetMaterial", new LuaCSFunction(GetMaterial));
		L.RegFunction("SetPopMaterial", new LuaCSFunction(SetPopMaterial));
		L.RegFunction("GetPopMaterial", new LuaCSFunction(GetPopMaterial));
		L.RegFunction("SetTexture", new LuaCSFunction(SetTexture));
		L.RegFunction("SetAlphaTexture", new LuaCSFunction(SetAlphaTexture));
		L.RegFunction("SetMesh", new LuaCSFunction(SetMesh));
		L.RegFunction("Clear", new LuaCSFunction(Clear));
		L.RegFunction("GetAlpha", new LuaCSFunction(GetAlpha));
		L.RegFunction("SetAlpha", new LuaCSFunction(SetAlpha));
		L.RegFunction("GetInheritedAlpha", new LuaCSFunction(GetInheritedAlpha));
		L.RegFunction("SplitUIVertexStreams", new LuaCSFunction(SplitUIVertexStreams));
		L.RegFunction("CreateUIVertexStream", new LuaCSFunction(CreateUIVertexStream));
		L.RegFunction("AddUIVertexStream", new LuaCSFunction(AddUIVertexStream));
		L.RegFunction("New", new LuaCSFunction(_CreateUnityEngine_CanvasRenderer));
		L.RegFunction("__eq", new LuaCSFunction(op_Equality));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("hasPopInstruction", new LuaCSFunction(get_hasPopInstruction), new LuaCSFunction(set_hasPopInstruction));
		L.RegVar("materialCount", new LuaCSFunction(get_materialCount), new LuaCSFunction(set_materialCount));
		L.RegVar("popMaterialCount", new LuaCSFunction(get_popMaterialCount), new LuaCSFunction(set_popMaterialCount));
		L.RegVar("absoluteDepth", new LuaCSFunction(get_absoluteDepth), null);
		L.RegVar("hasMoved", new LuaCSFunction(get_hasMoved), null);
		L.RegVar("cullTransparentMesh", new LuaCSFunction(get_cullTransparentMesh), new LuaCSFunction(set_cullTransparentMesh));
		L.RegVar("hasRectClipping", new LuaCSFunction(get_hasRectClipping), null);
		L.RegVar("relativeDepth", new LuaCSFunction(get_relativeDepth), null);
		L.RegVar("cull", new LuaCSFunction(get_cull), new LuaCSFunction(set_cull));
		L.RegVar("clippingSoftness", new LuaCSFunction(get_clippingSoftness), new LuaCSFunction(set_clippingSoftness));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUnityEngine_CanvasRenderer(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				UnityEngine.CanvasRenderer obj = new UnityEngine.CanvasRenderer();
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: UnityEngine.CanvasRenderer.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetColor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.CanvasRenderer obj = (UnityEngine.CanvasRenderer)ToLua.CheckObject<UnityEngine.CanvasRenderer>(L, 1);
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			obj.SetColor(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetColor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.CanvasRenderer obj = (UnityEngine.CanvasRenderer)ToLua.CheckObject<UnityEngine.CanvasRenderer>(L, 1);
			UnityEngine.Color o = obj.GetColor();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EnableRectClipping(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.CanvasRenderer obj = (UnityEngine.CanvasRenderer)ToLua.CheckObject<UnityEngine.CanvasRenderer>(L, 1);
			UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 2);
			obj.EnableRectClipping(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DisableRectClipping(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.CanvasRenderer obj = (UnityEngine.CanvasRenderer)ToLua.CheckObject<UnityEngine.CanvasRenderer>(L, 1);
			obj.DisableRectClipping();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetMaterial(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<int>(L, 3))
			{
				UnityEngine.CanvasRenderer obj = (UnityEngine.CanvasRenderer)ToLua.CheckObject<UnityEngine.CanvasRenderer>(L, 1);
				UnityEngine.Material arg0 = (UnityEngine.Material)ToLua.CheckObject<UnityEngine.Material>(L, 2);
				int arg1 = (int)LuaDLL.lua_tointeger(L, 3);
				obj.SetMaterial(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Texture>(L, 3))
			{
				UnityEngine.CanvasRenderer obj = (UnityEngine.CanvasRenderer)ToLua.CheckObject<UnityEngine.CanvasRenderer>(L, 1);
				UnityEngine.Material arg0 = (UnityEngine.Material)ToLua.CheckObject<UnityEngine.Material>(L, 2);
				UnityEngine.Texture arg1 = (UnityEngine.Texture)ToLua.ToObject(L, 3);
				obj.SetMaterial(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.CanvasRenderer.SetMaterial");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMaterial(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.CanvasRenderer obj = (UnityEngine.CanvasRenderer)ToLua.CheckObject<UnityEngine.CanvasRenderer>(L, 1);
				UnityEngine.Material o = obj.GetMaterial();
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2)
			{
				UnityEngine.CanvasRenderer obj = (UnityEngine.CanvasRenderer)ToLua.CheckObject<UnityEngine.CanvasRenderer>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
				UnityEngine.Material o = obj.GetMaterial(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.CanvasRenderer.GetMaterial");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetPopMaterial(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.CanvasRenderer obj = (UnityEngine.CanvasRenderer)ToLua.CheckObject<UnityEngine.CanvasRenderer>(L, 1);
			UnityEngine.Material arg0 = (UnityEngine.Material)ToLua.CheckObject<UnityEngine.Material>(L, 2);
			int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
			obj.SetPopMaterial(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPopMaterial(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.CanvasRenderer obj = (UnityEngine.CanvasRenderer)ToLua.CheckObject<UnityEngine.CanvasRenderer>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			UnityEngine.Material o = obj.GetPopMaterial(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTexture(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.CanvasRenderer obj = (UnityEngine.CanvasRenderer)ToLua.CheckObject<UnityEngine.CanvasRenderer>(L, 1);
			UnityEngine.Texture arg0 = (UnityEngine.Texture)ToLua.CheckObject<UnityEngine.Texture>(L, 2);
			obj.SetTexture(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAlphaTexture(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.CanvasRenderer obj = (UnityEngine.CanvasRenderer)ToLua.CheckObject<UnityEngine.CanvasRenderer>(L, 1);
			UnityEngine.Texture arg0 = (UnityEngine.Texture)ToLua.CheckObject<UnityEngine.Texture>(L, 2);
			obj.SetAlphaTexture(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetMesh(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.CanvasRenderer obj = (UnityEngine.CanvasRenderer)ToLua.CheckObject<UnityEngine.CanvasRenderer>(L, 1);
			UnityEngine.Mesh arg0 = (UnityEngine.Mesh)ToLua.CheckObject<UnityEngine.Mesh>(L, 2);
			obj.SetMesh(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.CanvasRenderer obj = (UnityEngine.CanvasRenderer)ToLua.CheckObject<UnityEngine.CanvasRenderer>(L, 1);
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAlpha(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.CanvasRenderer obj = (UnityEngine.CanvasRenderer)ToLua.CheckObject<UnityEngine.CanvasRenderer>(L, 1);
			float o = obj.GetAlpha();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAlpha(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.CanvasRenderer obj = (UnityEngine.CanvasRenderer)ToLua.CheckObject<UnityEngine.CanvasRenderer>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.SetAlpha(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetInheritedAlpha(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.CanvasRenderer obj = (UnityEngine.CanvasRenderer)ToLua.CheckObject<UnityEngine.CanvasRenderer>(L, 1);
			float o = obj.GetInheritedAlpha();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SplitUIVertexStreams(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 8)
			{
				System.Collections.Generic.List<UnityEngine.UIVertex> arg0 = (System.Collections.Generic.List<UnityEngine.UIVertex>)ToLua.CheckObject(L, 1, TypeTraits<System.Collections.Generic.List<UnityEngine.UIVertex>>.type);
				System.Collections.Generic.List<UnityEngine.Vector3> arg1 = (System.Collections.Generic.List<UnityEngine.Vector3>)ToLua.CheckObject(L, 2, TypeTraits<System.Collections.Generic.List<UnityEngine.Vector3>>.type);
				System.Collections.Generic.List<UnityEngine.Color32> arg2 = (System.Collections.Generic.List<UnityEngine.Color32>)ToLua.CheckObject(L, 3, TypeTraits<System.Collections.Generic.List<UnityEngine.Color32>>.type);
				System.Collections.Generic.List<UnityEngine.Vector4> arg3 = (System.Collections.Generic.List<UnityEngine.Vector4>)ToLua.CheckObject(L, 4, TypeTraits<System.Collections.Generic.List<UnityEngine.Vector4>>.type);
				System.Collections.Generic.List<UnityEngine.Vector4> arg4 = (System.Collections.Generic.List<UnityEngine.Vector4>)ToLua.CheckObject(L, 5, TypeTraits<System.Collections.Generic.List<UnityEngine.Vector4>>.type);
				System.Collections.Generic.List<UnityEngine.Vector3> arg5 = (System.Collections.Generic.List<UnityEngine.Vector3>)ToLua.CheckObject(L, 6, TypeTraits<System.Collections.Generic.List<UnityEngine.Vector3>>.type);
				System.Collections.Generic.List<UnityEngine.Vector4> arg6 = (System.Collections.Generic.List<UnityEngine.Vector4>)ToLua.CheckObject(L, 7, TypeTraits<System.Collections.Generic.List<UnityEngine.Vector4>>.type);
				System.Collections.Generic.List<int> arg7 = (System.Collections.Generic.List<int>)ToLua.CheckObject(L, 8, TypeTraits<System.Collections.Generic.List<int>>.type);
				UnityEngine.CanvasRenderer.SplitUIVertexStreams(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				return 0;
			}
			else if (count == 10)
			{
				System.Collections.Generic.List<UnityEngine.UIVertex> arg0 = (System.Collections.Generic.List<UnityEngine.UIVertex>)ToLua.CheckObject(L, 1, TypeTraits<System.Collections.Generic.List<UnityEngine.UIVertex>>.type);
				System.Collections.Generic.List<UnityEngine.Vector3> arg1 = (System.Collections.Generic.List<UnityEngine.Vector3>)ToLua.CheckObject(L, 2, TypeTraits<System.Collections.Generic.List<UnityEngine.Vector3>>.type);
				System.Collections.Generic.List<UnityEngine.Color32> arg2 = (System.Collections.Generic.List<UnityEngine.Color32>)ToLua.CheckObject(L, 3, TypeTraits<System.Collections.Generic.List<UnityEngine.Color32>>.type);
				System.Collections.Generic.List<UnityEngine.Vector4> arg3 = (System.Collections.Generic.List<UnityEngine.Vector4>)ToLua.CheckObject(L, 4, TypeTraits<System.Collections.Generic.List<UnityEngine.Vector4>>.type);
				System.Collections.Generic.List<UnityEngine.Vector4> arg4 = (System.Collections.Generic.List<UnityEngine.Vector4>)ToLua.CheckObject(L, 5, TypeTraits<System.Collections.Generic.List<UnityEngine.Vector4>>.type);
				System.Collections.Generic.List<UnityEngine.Vector4> arg5 = (System.Collections.Generic.List<UnityEngine.Vector4>)ToLua.CheckObject(L, 6, TypeTraits<System.Collections.Generic.List<UnityEngine.Vector4>>.type);
				System.Collections.Generic.List<UnityEngine.Vector4> arg6 = (System.Collections.Generic.List<UnityEngine.Vector4>)ToLua.CheckObject(L, 7, TypeTraits<System.Collections.Generic.List<UnityEngine.Vector4>>.type);
				System.Collections.Generic.List<UnityEngine.Vector3> arg7 = (System.Collections.Generic.List<UnityEngine.Vector3>)ToLua.CheckObject(L, 8, TypeTraits<System.Collections.Generic.List<UnityEngine.Vector3>>.type);
				System.Collections.Generic.List<UnityEngine.Vector4> arg8 = (System.Collections.Generic.List<UnityEngine.Vector4>)ToLua.CheckObject(L, 9, TypeTraits<System.Collections.Generic.List<UnityEngine.Vector4>>.type);
				System.Collections.Generic.List<int> arg9 = (System.Collections.Generic.List<int>)ToLua.CheckObject(L, 10, TypeTraits<System.Collections.Generic.List<int>>.type);
				UnityEngine.CanvasRenderer.SplitUIVertexStreams(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.CanvasRenderer.SplitUIVertexStreams");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateUIVertexStream(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 8)
			{
				System.Collections.Generic.List<UnityEngine.UIVertex> arg0 = (System.Collections.Generic.List<UnityEngine.UIVertex>)ToLua.CheckObject(L, 1, TypeTraits<System.Collections.Generic.List<UnityEngine.UIVertex>>.type);
				System.Collections.Generic.List<UnityEngine.Vector3> arg1 = (System.Collections.Generic.List<UnityEngine.Vector3>)ToLua.CheckObject(L, 2, TypeTraits<System.Collections.Generic.List<UnityEngine.Vector3>>.type);
				System.Collections.Generic.List<UnityEngine.Color32> arg2 = (System.Collections.Generic.List<UnityEngine.Color32>)ToLua.CheckObject(L, 3, TypeTraits<System.Collections.Generic.List<UnityEngine.Color32>>.type);
				System.Collections.Generic.List<UnityEngine.Vector4> arg3 = (System.Collections.Generic.List<UnityEngine.Vector4>)ToLua.CheckObject(L, 4, TypeTraits<System.Collections.Generic.List<UnityEngine.Vector4>>.type);
				System.Collections.Generic.List<UnityEngine.Vector4> arg4 = (System.Collections.Generic.List<UnityEngine.Vector4>)ToLua.CheckObject(L, 5, TypeTraits<System.Collections.Generic.List<UnityEngine.Vector4>>.type);
				System.Collections.Generic.List<UnityEngine.Vector3> arg5 = (System.Collections.Generic.List<UnityEngine.Vector3>)ToLua.CheckObject(L, 6, TypeTraits<System.Collections.Generic.List<UnityEngine.Vector3>>.type);
				System.Collections.Generic.List<UnityEngine.Vector4> arg6 = (System.Collections.Generic.List<UnityEngine.Vector4>)ToLua.CheckObject(L, 7, TypeTraits<System.Collections.Generic.List<UnityEngine.Vector4>>.type);
				System.Collections.Generic.List<int> arg7 = (System.Collections.Generic.List<int>)ToLua.CheckObject(L, 8, TypeTraits<System.Collections.Generic.List<int>>.type);
				UnityEngine.CanvasRenderer.CreateUIVertexStream(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				return 0;
			}
			else if (count == 10)
			{
				System.Collections.Generic.List<UnityEngine.UIVertex> arg0 = (System.Collections.Generic.List<UnityEngine.UIVertex>)ToLua.CheckObject(L, 1, TypeTraits<System.Collections.Generic.List<UnityEngine.UIVertex>>.type);
				System.Collections.Generic.List<UnityEngine.Vector3> arg1 = (System.Collections.Generic.List<UnityEngine.Vector3>)ToLua.CheckObject(L, 2, TypeTraits<System.Collections.Generic.List<UnityEngine.Vector3>>.type);
				System.Collections.Generic.List<UnityEngine.Color32> arg2 = (System.Collections.Generic.List<UnityEngine.Color32>)ToLua.CheckObject(L, 3, TypeTraits<System.Collections.Generic.List<UnityEngine.Color32>>.type);
				System.Collections.Generic.List<UnityEngine.Vector4> arg3 = (System.Collections.Generic.List<UnityEngine.Vector4>)ToLua.CheckObject(L, 4, TypeTraits<System.Collections.Generic.List<UnityEngine.Vector4>>.type);
				System.Collections.Generic.List<UnityEngine.Vector4> arg4 = (System.Collections.Generic.List<UnityEngine.Vector4>)ToLua.CheckObject(L, 5, TypeTraits<System.Collections.Generic.List<UnityEngine.Vector4>>.type);
				System.Collections.Generic.List<UnityEngine.Vector4> arg5 = (System.Collections.Generic.List<UnityEngine.Vector4>)ToLua.CheckObject(L, 6, TypeTraits<System.Collections.Generic.List<UnityEngine.Vector4>>.type);
				System.Collections.Generic.List<UnityEngine.Vector4> arg6 = (System.Collections.Generic.List<UnityEngine.Vector4>)ToLua.CheckObject(L, 7, TypeTraits<System.Collections.Generic.List<UnityEngine.Vector4>>.type);
				System.Collections.Generic.List<UnityEngine.Vector3> arg7 = (System.Collections.Generic.List<UnityEngine.Vector3>)ToLua.CheckObject(L, 8, TypeTraits<System.Collections.Generic.List<UnityEngine.Vector3>>.type);
				System.Collections.Generic.List<UnityEngine.Vector4> arg8 = (System.Collections.Generic.List<UnityEngine.Vector4>)ToLua.CheckObject(L, 9, TypeTraits<System.Collections.Generic.List<UnityEngine.Vector4>>.type);
				System.Collections.Generic.List<int> arg9 = (System.Collections.Generic.List<int>)ToLua.CheckObject(L, 10, TypeTraits<System.Collections.Generic.List<int>>.type);
				UnityEngine.CanvasRenderer.CreateUIVertexStream(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.CanvasRenderer.CreateUIVertexStream");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddUIVertexStream(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 7)
			{
				System.Collections.Generic.List<UnityEngine.UIVertex> arg0 = (System.Collections.Generic.List<UnityEngine.UIVertex>)ToLua.CheckObject(L, 1, TypeTraits<System.Collections.Generic.List<UnityEngine.UIVertex>>.type);
				System.Collections.Generic.List<UnityEngine.Vector3> arg1 = (System.Collections.Generic.List<UnityEngine.Vector3>)ToLua.CheckObject(L, 2, TypeTraits<System.Collections.Generic.List<UnityEngine.Vector3>>.type);
				System.Collections.Generic.List<UnityEngine.Color32> arg2 = (System.Collections.Generic.List<UnityEngine.Color32>)ToLua.CheckObject(L, 3, TypeTraits<System.Collections.Generic.List<UnityEngine.Color32>>.type);
				System.Collections.Generic.List<UnityEngine.Vector4> arg3 = (System.Collections.Generic.List<UnityEngine.Vector4>)ToLua.CheckObject(L, 4, TypeTraits<System.Collections.Generic.List<UnityEngine.Vector4>>.type);
				System.Collections.Generic.List<UnityEngine.Vector4> arg4 = (System.Collections.Generic.List<UnityEngine.Vector4>)ToLua.CheckObject(L, 5, TypeTraits<System.Collections.Generic.List<UnityEngine.Vector4>>.type);
				System.Collections.Generic.List<UnityEngine.Vector3> arg5 = (System.Collections.Generic.List<UnityEngine.Vector3>)ToLua.CheckObject(L, 6, TypeTraits<System.Collections.Generic.List<UnityEngine.Vector3>>.type);
				System.Collections.Generic.List<UnityEngine.Vector4> arg6 = (System.Collections.Generic.List<UnityEngine.Vector4>)ToLua.CheckObject(L, 7, TypeTraits<System.Collections.Generic.List<UnityEngine.Vector4>>.type);
				UnityEngine.CanvasRenderer.AddUIVertexStream(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				return 0;
			}
			else if (count == 9)
			{
				System.Collections.Generic.List<UnityEngine.UIVertex> arg0 = (System.Collections.Generic.List<UnityEngine.UIVertex>)ToLua.CheckObject(L, 1, TypeTraits<System.Collections.Generic.List<UnityEngine.UIVertex>>.type);
				System.Collections.Generic.List<UnityEngine.Vector3> arg1 = (System.Collections.Generic.List<UnityEngine.Vector3>)ToLua.CheckObject(L, 2, TypeTraits<System.Collections.Generic.List<UnityEngine.Vector3>>.type);
				System.Collections.Generic.List<UnityEngine.Color32> arg2 = (System.Collections.Generic.List<UnityEngine.Color32>)ToLua.CheckObject(L, 3, TypeTraits<System.Collections.Generic.List<UnityEngine.Color32>>.type);
				System.Collections.Generic.List<UnityEngine.Vector4> arg3 = (System.Collections.Generic.List<UnityEngine.Vector4>)ToLua.CheckObject(L, 4, TypeTraits<System.Collections.Generic.List<UnityEngine.Vector4>>.type);
				System.Collections.Generic.List<UnityEngine.Vector4> arg4 = (System.Collections.Generic.List<UnityEngine.Vector4>)ToLua.CheckObject(L, 5, TypeTraits<System.Collections.Generic.List<UnityEngine.Vector4>>.type);
				System.Collections.Generic.List<UnityEngine.Vector4> arg5 = (System.Collections.Generic.List<UnityEngine.Vector4>)ToLua.CheckObject(L, 6, TypeTraits<System.Collections.Generic.List<UnityEngine.Vector4>>.type);
				System.Collections.Generic.List<UnityEngine.Vector4> arg6 = (System.Collections.Generic.List<UnityEngine.Vector4>)ToLua.CheckObject(L, 7, TypeTraits<System.Collections.Generic.List<UnityEngine.Vector4>>.type);
				System.Collections.Generic.List<UnityEngine.Vector3> arg7 = (System.Collections.Generic.List<UnityEngine.Vector3>)ToLua.CheckObject(L, 8, TypeTraits<System.Collections.Generic.List<UnityEngine.Vector3>>.type);
				System.Collections.Generic.List<UnityEngine.Vector4> arg8 = (System.Collections.Generic.List<UnityEngine.Vector4>)ToLua.CheckObject(L, 9, TypeTraits<System.Collections.Generic.List<UnityEngine.Vector4>>.type);
				UnityEngine.CanvasRenderer.AddUIVertexStream(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.CanvasRenderer.AddUIVertexStream");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_hasPopInstruction(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.CanvasRenderer obj = (UnityEngine.CanvasRenderer)o;
			bool ret = obj.hasPopInstruction;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index hasPopInstruction on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_materialCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.CanvasRenderer obj = (UnityEngine.CanvasRenderer)o;
			int ret = obj.materialCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index materialCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_popMaterialCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.CanvasRenderer obj = (UnityEngine.CanvasRenderer)o;
			int ret = obj.popMaterialCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index popMaterialCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_absoluteDepth(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.CanvasRenderer obj = (UnityEngine.CanvasRenderer)o;
			int ret = obj.absoluteDepth;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index absoluteDepth on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_hasMoved(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.CanvasRenderer obj = (UnityEngine.CanvasRenderer)o;
			bool ret = obj.hasMoved;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index hasMoved on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_cullTransparentMesh(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.CanvasRenderer obj = (UnityEngine.CanvasRenderer)o;
			bool ret = obj.cullTransparentMesh;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index cullTransparentMesh on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_hasRectClipping(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.CanvasRenderer obj = (UnityEngine.CanvasRenderer)o;
			bool ret = obj.hasRectClipping;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index hasRectClipping on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_relativeDepth(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.CanvasRenderer obj = (UnityEngine.CanvasRenderer)o;
			int ret = obj.relativeDepth;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index relativeDepth on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_cull(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.CanvasRenderer obj = (UnityEngine.CanvasRenderer)o;
			bool ret = obj.cull;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index cull on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_clippingSoftness(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.CanvasRenderer obj = (UnityEngine.CanvasRenderer)o;
			UnityEngine.Vector2 ret = obj.clippingSoftness;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index clippingSoftness on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_hasPopInstruction(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.CanvasRenderer obj = (UnityEngine.CanvasRenderer)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.hasPopInstruction = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index hasPopInstruction on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_materialCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.CanvasRenderer obj = (UnityEngine.CanvasRenderer)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.materialCount = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index materialCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_popMaterialCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.CanvasRenderer obj = (UnityEngine.CanvasRenderer)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.popMaterialCount = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index popMaterialCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_cullTransparentMesh(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.CanvasRenderer obj = (UnityEngine.CanvasRenderer)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.cullTransparentMesh = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index cullTransparentMesh on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_cull(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.CanvasRenderer obj = (UnityEngine.CanvasRenderer)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.cull = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index cull on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_clippingSoftness(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.CanvasRenderer obj = (UnityEngine.CanvasRenderer)o;
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			obj.clippingSoftness = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index clippingSoftness on a nil value");
		}
	}
}

