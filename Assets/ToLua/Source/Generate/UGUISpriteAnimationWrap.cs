//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UGUISpriteAnimationWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UGUISpriteAnimation), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("IsPlaying", new LuaCSFunction(IsPlaying));
		L.RegFunction("Play", new LuaCSFunction(Play));
		L.RegFunction("PlayReverse", new LuaCSFunction(PlayReverse));
		L.RegFunction("Pause", new LuaCSFunction(Pause));
		L.RegFunction("Resume", new LuaCSFunction(Resume));
		L.RegFunction("Stop", new LuaCSFunction(Stop));
		L.RegFunction("Rewind", new LuaCSFunction(Rewind));
		L.RegFunction("__eq", new LuaCSFunction(op_Equality));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("m_FPS", new LuaCSFunction(get_m_FPS), new LuaCSFunction(set_m_FPS));
		L.RegVar("m_SpriteFrames", new LuaCSFunction(get_m_SpriteFrames), new LuaCSFunction(set_m_SpriteFrames));
		L.RegVar("m_Foward", new LuaCSFunction(get_m_Foward), new LuaCSFunction(set_m_Foward));
		L.RegVar("m_AutoPlay", new LuaCSFunction(get_m_AutoPlay), new LuaCSFunction(set_m_AutoPlay));
		L.RegVar("m_Loop", new LuaCSFunction(get_m_Loop), new LuaCSFunction(set_m_Loop));
		L.RegVar("m_IsNativeSize", new LuaCSFunction(get_m_IsNativeSize), new LuaCSFunction(set_m_IsNativeSize));
		L.RegVar("FrameCount", new LuaCSFunction(get_FrameCount), null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsPlaying(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UGUISpriteAnimation obj = (UGUISpriteAnimation)ToLua.CheckObject<UGUISpriteAnimation>(L, 1);
			bool o = obj.IsPlaying();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Play(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UGUISpriteAnimation obj = (UGUISpriteAnimation)ToLua.CheckObject<UGUISpriteAnimation>(L, 1);
				obj.Play();
				return 0;
			}
			else if (count == 2)
			{
				UGUISpriteAnimation obj = (UGUISpriteAnimation)ToLua.CheckObject<UGUISpriteAnimation>(L, 1);
				System.Action arg0 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 2);
				obj.Play(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UGUISpriteAnimation.Play");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayReverse(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UGUISpriteAnimation obj = (UGUISpriteAnimation)ToLua.CheckObject<UGUISpriteAnimation>(L, 1);
				obj.PlayReverse();
				return 0;
			}
			else if (count == 2)
			{
				UGUISpriteAnimation obj = (UGUISpriteAnimation)ToLua.CheckObject<UGUISpriteAnimation>(L, 1);
				System.Action arg0 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 2);
				obj.PlayReverse(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UGUISpriteAnimation.PlayReverse");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Pause(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UGUISpriteAnimation obj = (UGUISpriteAnimation)ToLua.CheckObject<UGUISpriteAnimation>(L, 1);
			obj.Pause();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Resume(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UGUISpriteAnimation obj = (UGUISpriteAnimation)ToLua.CheckObject<UGUISpriteAnimation>(L, 1);
			obj.Resume();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Stop(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UGUISpriteAnimation obj = (UGUISpriteAnimation)ToLua.CheckObject<UGUISpriteAnimation>(L, 1);
			obj.Stop();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Rewind(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UGUISpriteAnimation obj = (UGUISpriteAnimation)ToLua.CheckObject<UGUISpriteAnimation>(L, 1);
			obj.Rewind();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_FPS(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UGUISpriteAnimation obj = (UGUISpriteAnimation)o;
			float ret = obj.m_FPS;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_FPS on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_SpriteFrames(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UGUISpriteAnimation obj = (UGUISpriteAnimation)o;
			Deer.AtlasScriptableObject ret = obj.m_SpriteFrames;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_SpriteFrames on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_Foward(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UGUISpriteAnimation obj = (UGUISpriteAnimation)o;
			bool ret = obj.m_Foward;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_Foward on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_AutoPlay(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UGUISpriteAnimation obj = (UGUISpriteAnimation)o;
			bool ret = obj.m_AutoPlay;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_AutoPlay on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_Loop(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UGUISpriteAnimation obj = (UGUISpriteAnimation)o;
			bool ret = obj.m_Loop;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_Loop on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_IsNativeSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UGUISpriteAnimation obj = (UGUISpriteAnimation)o;
			bool ret = obj.m_IsNativeSize;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_IsNativeSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FrameCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UGUISpriteAnimation obj = (UGUISpriteAnimation)o;
			int ret = obj.FrameCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index FrameCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_FPS(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UGUISpriteAnimation obj = (UGUISpriteAnimation)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.m_FPS = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_FPS on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_SpriteFrames(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UGUISpriteAnimation obj = (UGUISpriteAnimation)o;
			Deer.AtlasScriptableObject arg0 = (Deer.AtlasScriptableObject)ToLua.CheckObject<Deer.AtlasScriptableObject>(L, 2);
			obj.m_SpriteFrames = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_SpriteFrames on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_Foward(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UGUISpriteAnimation obj = (UGUISpriteAnimation)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.m_Foward = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_Foward on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_AutoPlay(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UGUISpriteAnimation obj = (UGUISpriteAnimation)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.m_AutoPlay = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_AutoPlay on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_Loop(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UGUISpriteAnimation obj = (UGUISpriteAnimation)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.m_Loop = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_Loop on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_IsNativeSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UGUISpriteAnimation obj = (UGUISpriteAnimation)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.m_IsNativeSize = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_IsNativeSize on a nil value");
		}
	}
}

