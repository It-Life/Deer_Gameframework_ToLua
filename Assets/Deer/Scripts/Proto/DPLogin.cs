// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: DPLogin.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DPLogin {

  /// <summary>Holder for reflection information generated from DPLogin.proto</summary>
  public static partial class DPLoginReflection {

    #region Descriptor
    /// <summary>File descriptor for DPLogin.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DPLoginReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1EUExvZ2luLnByb3RvEgdEUExvZ2luGhJEZWVyR2FtZUJhc2UucHJvdG8i",
            "kwEKEkRQVXNlckxvZ2luSW5mb1JlcRIRCglzekFjY291bnQYASABKAkSEgoK",
            "c3pQYXNzd29yZBgCIAEoCRITCgtzek1hY0FkcmVzcxgDIAEoCRIWCg5uQ2xp",
            "ZW50VmVyc2lvbhgEIAEoBRISCgpzelVzZXJOYW1lGAUgASgJEhUKDWV4dGVu",
            "c2lvbkpzb24YBiABKAki6wEKGURQQWNjb3VudFZlcmlmeVJlc3VsdFJlc3AS",
            "EQoJc3pBY2NvdW50GAEgASgJEjIKB25SZXN1bHQYAiABKA4yIS5EUExvZ2lu",
            "LkFjY291bnRMb2dpblZlcmlmeVJlc3VsdBITCgtzekxvZ2luR3VpZBgDIAEo",
            "CRISCgpzelNlcnZlcklQGAQgASgJEg0KBW5Qb3J0GAUgASgFEhEKCW5TZXJ2",
            "ZXJJRBgGIAEoBRIQCghuV2FpdE51bRgHIAEoBRITCgtuTWF4V2FpdE51bRgI",
            "IAEoBRIVCg1zekdhdGV3YXlOYW1lGAkgASgJImMKEURQR1NMb2dpY0xvZ2lu",
            "UmVxEhMKC3N6TG9naW5HdWlkGAEgASgJEhEKCXN6QWNjb3VudBgCIAEoCRIR",
            "CgluU2VydmVySWQYAyABKAUSEwoLc3pNYWNBZHJlc3MYBCABKAkiVAoVRFBH",
            "U0xvZ2ljTG9naW5SZXRSZXNwEhEKCXN6QWNjb3VudBgBIAEoCRIoCgRlUmV0",
            "GAIgASgOMhouRFBMb2dpbi5CRUdTTG9naWNMb2dpblJldCKHAQoQRFBHU1Jv",
            "bGVJdGVtSW5mbxIwCgpzdEJhc2VJbmZvGAEgASgLMhwuRGVlckdhbWVCYXNl",
            "LkRQUm9sZUJhc2VJbmZvEhMKC25DcmVhdGVUaW1lGAIgASgDEhMKC25QbGF0",
            "Zm9ybUlkGAMgASgFEhcKD25DcmVhdGVTZXJ2ZXJJZBgEIAEoBSJwChVEUFJv",
            "bGVMaXN0UmVzcG9uZVJlc3ASEQoJc3pBY2NvdW50GAEgASgJEhIKCm5Sb2xl",
            "Q291bnQYAiABKAUSMAoNYXJyYXlSb2xlTGlzdBgDIAMoCzIZLkRQTG9naW4u",
            "RFBHU1JvbGVJdGVtSW5mbyJRChVEUEdhbWVMb2dpblJlcXVlc3RSZXESEQoJ",
            "c3pBY2NvdW50GAEgASgJEhEKCW5Sb2xlR3VpZBgCIAEoBBISCgpzelJvbGVO",
            "YW1lGAMgASgJIokBCg9EUENyZWF0ZVJvbGVSZXESEQoJc3pBY2NvdW50GAEg",
            "ASgJEhIKCnN6Um9sZU5hbWUYAiABKAkSFQoNblByb2Zlc3Npb25JZBgDIAEo",
            "BRIRCgluUG9ydHJhaXQYBCABKAUSEAoIbkNsb3RoSWQYBSABKAUSEwoLblBs",
            "YXRmb3JtSWQYBiABKAUingEKFkRQQ3JlYXRlUm9sZVJlc3VsdFJlc3ASEQoJ",
            "c3pBY2NvdW50GAEgASgJEhIKCnN6Um9sZU5hbWUYAiABKAkSEQoJblJvbGVH",
            "dWlkGAMgASgEEhIKCmJTdWNjZXNzZWQYBCABKAgSNgoNbkZhaWxlZFJlYXNv",
            "bhgFIAEoDjIfLkRQTG9naW4uUm9sZUNyZWF0ZUZhaWxlZFJlc3VsdCJFChNE",
            "UEtpY2tPdXRDbGllbnRSZXNwEi4KCGVLaWNrT3V0GAEgASgOMhwuRFBMb2dp",
            "bi5LaWNrT3V0Q2xpZW50UmVzdWx0IhQKEkRQR1NFeGl0QWNjb3VudFJlcSIR",
            "Cg9EUEdTRXhpdFJvbGVSZXEqlgMKGEFjY291bnRMb2dpblZlcmlmeVJlc3Vs",
            "dBIaChZBQ0NfVkVSSUZZX1JFVF9TVUNDRVNTEAASGQoVQUNDX1ZFUklGWV9S",
            "RVRfRkFJTEVEEAESLAooQUNDX1ZFUklGWV9SRVRfQUNDT1VOVF9PUl9QQVNT",
            "V09SRF9FUlJPUhACEh4KGkFDQ19WRVJJRllfUkVUX01BSU5URU5BTkNFEAMS",
            "GgoWQUNDX1ZFUklGWV9SRVRfSVNfRlVMTBAEEhoKFkFDQ19WRVJJRllfUkVU",
            "X1RJTUVPVVQQBRIiCh5BQ0NfVkVSSUZZX1JFVF9QQVlTWVNIVFRQRVJST1IQ",
            "BhIlCiFBQ0NfVkVSSUZZX1JFVF9GVUxMQUNDT1VOVF9JTkxJU1QQBxImCiJB",
            "Q0NfVkVSSUZZX1JFVF9GVUxMQUNDT1VOVF9PVVRMSVNUEAgSIwofQUNDX1ZF",
            "UklGWV9SRVRfRlVMTFZFUklGWUFDT1VOVBAJEiUKIUFDQ19WRVJJRllfUkVU",
            "X0NMSUVOVFZFUlNJT05FUlJPUhAKKtMDChFCRUdTTG9naWNMb2dpblJldBIX",
            "ChNHU19MT0dJTl9SRVRfRkFJTEVEEAASGAoUR1NfTE9HSU5fUkVUX1NVQ0NF",
            "U1MQARIhCh1HU19MT0dJTl9SRVRfRkFJTEVEX05FRURfQVVUSBACEiMKH0dT",
            "X0xPR0lOX1JFVF9GQUlMRURfRElSRUNUTE9HSU4QAxIpCiVHU19MT0dJTl9S",
            "RVRfRkFJTEVEX0FDQ09VTlRMT0dJTlBST1hZEAQSJQohR1NfTE9HSU5fUkVU",
            "X0ZBSUxFRF9HU0RJUkVDVExPR0lOEAUSKQolR1NfTE9HSU5fUkVUX0ZBSUxF",
            "RF9BQ0NPVU5UTE9HSU5CRUdJThAGEiUKIUdTX0xPR0lOX1JFVF9GQUlMRURf",
            "QVNLR0NST0xFSU5GTxAHEiAKHEdTX0xPR0lOX1JFVF9GQUlMRURfUk9MRUxJ",
            "U1QQCBInCiNHU19MT0dJTl9SRVRfRkFJTEVEX0FTS0dTUEVSTUlTU0lPThAJ",
            "EioKJkdTX0xPR0lOX1JFVF9GQUlMRURfQVNLR1NQRVJNSVNTSU9OUkVUEAoS",
            "KAokR1NfTE9HSU5fUkVUX0ZBSUxFRF9TRUxFQ1RST0xFRkFJTEVEEAsq2QIK",
            "FlJvbGVDcmVhdGVGYWlsZWRSZXN1bHQSHwobUk9MRUNSRUFURV9GQUlMX1JF",
            "QVNPTl9OT05FEAASIgoeUk9MRUNSRUFURV9GQUlMX1JFQVNPTl9VTktOT1dO",
            "EAESJgoiUk9MRUNSRUFURV9GQUlMX1JFQVNPTl9OQU1FX0ZJTFRFUhACEiUK",
            "IVJPTEVDUkVBVEVfRkFJTF9SRUFTT05fTkFNRV9FWElTVBADEjQKMFJPTEVD",
            "UkVBVEVfRkFJTF9SRUFTT05fT1ZFUl9NQVhfUk9MRV9QRVJfR0FURVdBWRAE",
            "EjEKLVJPTEVDUkVBVEVfRkFJTF9SRUFTT05fT1ZFUl9NQVhfUk9MRV9QRVJf",
            "Wk9ORRAFEiAKHFJPTEVDUkVBVEVfRkFJTF9NQVhfTkFNRV9MRU4QBhIgChxS",
            "T0xFQ1JFQVRFX0ZBSUxfTUlOX05BTUVfTEVOEAcq1QQKE0tpY2tPdXRDbGll",
            "bnRSZXN1bHQSFwoTS0lDS09VVF9SRUFTT05fTlVMTBAAEiMKH0tJQ0tPVVRf",
            "UkVBU09OX1NBTUVBQ0NPVU5UTE9HSU4QARIdChlLSUNLT1VUX1JFQVNPTl9L",
            "SUNLSEFOR1VQEAISHgoaS0lDS09VVF9SRUFTT05fTE9HSU5GQUlMRUQQAxIj",
            "Ch9LSUNLT1VUX1JFQVNPTl9DTElFTlRESVNDT05ORUNUEAQSJAogS0lDS09V",
            "VF9SRUFTT05fQ0xJRU5UUkVRVUVTVEVYSVQQBRIdChlLSUNLT1VUX1JFQVNP",
            "Tl9TRVJWRVJLSUNLEAYSIAocS0lDS09VVF9SRUFTT05fVU5MRUdBTENMSUVO",
            "VBAHEh4KGktJQ0tPVVRfUkVBU09OX0JBQ0tFTkRLSUNLEAgSHwobS0lDS09V",
            "VF9SRUFTT05fT05MSU5FR01LSUNLEAkSGgoWS0lDS09VVF9SRUFTT05fR1ND",
            "UkFTSBAKEhoKFktJQ0tPVVRfUkVBU09OX0dDQ1JBU0gQCxIeChpLSUNLT1VU",
            "X1JFQVNPTl9TQ0VORUNIQU5HRRAMEhwKGEtJQ0tPVVRfUkVBU09OX0JBTlBM",
            "QVlFUhANEh8KG0tJQ0tPVVRfUkVBU09OX1NXSVRDSFNFUlZFUhAOEhsKF0tJ",
            "Q0tPVVRfUkVBU09OX0VYSVRST0xFEA8SHgoaS0lDS09VVF9SRUFTT05fRElS",
            "RUNUTE9HSU4QEBIgChxLSUNLT1VUX1JFQVNPTl9CSVNIT1BLSUNLT1VUEBFC",
            "JQojY29tLmdhbWUuanVoZS5zZXJ2ZXIucHJvdG9idWYucHJvdG9iBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::DeerGameBase.DeerGameBaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::DPLogin.AccountLoginVerifyResult), typeof(global::DPLogin.BEGSLogicLoginRet), typeof(global::DPLogin.RoleCreateFailedResult), typeof(global::DPLogin.KickOutClientResult), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DPLogin.DPUserLoginInfoReq), global::DPLogin.DPUserLoginInfoReq.Parser, new[]{ "SzAccount", "SzPassword", "SzMacAdress", "NClientVersion", "SzUserName", "ExtensionJson" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DPLogin.DPAccountVerifyResultResp), global::DPLogin.DPAccountVerifyResultResp.Parser, new[]{ "SzAccount", "NResult", "SzLoginGuid", "SzServerIP", "NPort", "NServerID", "NWaitNum", "NMaxWaitNum", "SzGatewayName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DPLogin.DPGSLogicLoginReq), global::DPLogin.DPGSLogicLoginReq.Parser, new[]{ "SzLoginGuid", "SzAccount", "NServerId", "SzMacAdress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DPLogin.DPGSLogicLoginRetResp), global::DPLogin.DPGSLogicLoginRetResp.Parser, new[]{ "SzAccount", "ERet" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DPLogin.DPGSRoleItemInfo), global::DPLogin.DPGSRoleItemInfo.Parser, new[]{ "StBaseInfo", "NCreateTime", "NPlatformId", "NCreateServerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DPLogin.DPRoleListResponeResp), global::DPLogin.DPRoleListResponeResp.Parser, new[]{ "SzAccount", "NRoleCount", "ArrayRoleList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DPLogin.DPGameLoginRequestReq), global::DPLogin.DPGameLoginRequestReq.Parser, new[]{ "SzAccount", "NRoleGuid", "SzRoleName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DPLogin.DPCreateRoleReq), global::DPLogin.DPCreateRoleReq.Parser, new[]{ "SzAccount", "SzRoleName", "NProfessionId", "NPortrait", "NClothId", "NPlatformId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DPLogin.DPCreateRoleResultResp), global::DPLogin.DPCreateRoleResultResp.Parser, new[]{ "SzAccount", "SzRoleName", "NRoleGuid", "BSuccessed", "NFailedReason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DPLogin.DPKickOutClientResp), global::DPLogin.DPKickOutClientResp.Parser, new[]{ "EKickOut" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DPLogin.DPGSExitAccountReq), global::DPLogin.DPGSExitAccountReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DPLogin.DPGSExitRoleReq), global::DPLogin.DPGSExitRoleReq.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// 登陆角色服返回验证结果
  /// </summary>
  public enum AccountLoginVerifyResult {
    /// <summary>
    /// 允许进入角色服务器
    /// </summary>
    [pbr::OriginalName("ACC_VERIFY_RET_SUCCESS")] AccVerifyRetSuccess = 0,
    /// <summary>
    /// 未知错误    
    /// </summary>
    [pbr::OriginalName("ACC_VERIFY_RET_FAILED")] AccVerifyRetFailed = 1,
    /// <summary>
    /// 账号或者密码错误    
    /// </summary>
    [pbr::OriginalName("ACC_VERIFY_RET_ACCOUNT_OR_PASSWORD_ERROR")] AccVerifyRetAccountOrPasswordError = 2,
    /// <summary>
    /// 服务器维护中
    /// </summary>
    [pbr::OriginalName("ACC_VERIFY_RET_MAINTENANCE")] AccVerifyRetMaintenance = 3,
    /// <summary>
    /// 服务器人数已满
    /// </summary>
    [pbr::OriginalName("ACC_VERIFY_RET_IS_FULL")] AccVerifyRetIsFull = 4,
    /// <summary>
    /// 验证超时
    /// </summary>
    [pbr::OriginalName("ACC_VERIFY_RET_TIMEOUT")] AccVerifyRetTimeout = 5,
    /// <summary>
    /// http验证系统异常请联系客服
    /// </summary>
    [pbr::OriginalName("ACC_VERIFY_RET_PAYSYSHTTPERROR")] AccVerifyRetPaysyshttperror = 6,
    /// <summary>
    /// 因为人数过多在排队队列
    /// </summary>
    [pbr::OriginalName("ACC_VERIFY_RET_FULLACCOUNT_INLIST")] AccVerifyRetFullaccountInlist = 7,
    /// <summary>
    /// 因为人数过多连排队队列都排不上
    /// </summary>
    [pbr::OriginalName("ACC_VERIFY_RET_FULLACCOUNT_OUTLIST")] AccVerifyRetFullaccountOutlist = 8,
    /// <summary>
    /// 验证账号人数过多请耐心等待
    /// </summary>
    [pbr::OriginalName("ACC_VERIFY_RET_FULLVERIFYACOUNT")] AccVerifyRetFullverifyacount = 9,
    /// <summary>
    /// 客户端版本不对
    /// </summary>
    [pbr::OriginalName("ACC_VERIFY_RET_CLIENTVERSIONERROR")] AccVerifyRetClientversionerror = 10,
  }

  /// <summary>
  /// 登陆逻辑服失败
  /// </summary>
  public enum BEGSLogicLoginRet {
    /// <summary>
    /// 未知错误
    /// </summary>
    [pbr::OriginalName("GS_LOGIN_RET_FAILED")] GsLoginRetFailed = 0,
    /// <summary>
    /// 成功        
    /// </summary>
    [pbr::OriginalName("GS_LOGIN_RET_SUCCESS")] GsLoginRetSuccess = 1,
    /// <summary>
    /// 需要重新账号密码验证
    /// </summary>
    [pbr::OriginalName("GS_LOGIN_RET_FAILED_NEED_AUTH")] GsLoginRetFailedNeedAuth = 2,
    /// <summary>
    /// 断线重连失败
    /// </summary>
    [pbr::OriginalName("GS_LOGIN_RET_FAILED_DIRECTLOGIN")] GsLoginRetFailedDirectlogin = 3,
    /// <summary>
    /// 登录代理服务器失败
    /// </summary>
    [pbr::OriginalName("GS_LOGIN_RET_FAILED_ACCOUNTLOGINPROXY")] GsLoginRetFailedAccountloginproxy = 4,
    /// <summary>
    /// 登录gs失败
    /// </summary>
    [pbr::OriginalName("GS_LOGIN_RET_FAILED_GSDIRECTLOGIN")] GsLoginRetFailedGsdirectlogin = 5,
    /// <summary>
    /// account登录失败
    /// </summary>
    [pbr::OriginalName("GS_LOGIN_RET_FAILED_ACCOUNTLOGINBEGIN")] GsLoginRetFailedAccountloginbegin = 6,
    /// <summary>
    /// 登陆失败
    /// </summary>
    [pbr::OriginalName("GS_LOGIN_RET_FAILED_ASKGCROLEINFO")] GsLoginRetFailedAskgcroleinfo = 7,
    /// <summary>
    /// 获取角色列表
    /// </summary>
    [pbr::OriginalName("GS_LOGIN_RET_FAILED_ROLELIST")] GsLoginRetFailedRolelist = 8,
    /// <summary>
    /// 询问gs登录失败
    /// </summary>
    [pbr::OriginalName("GS_LOGIN_RET_FAILED_ASKGSPERMISSION")] GsLoginRetFailedAskgspermission = 9,
    /// <summary>
    /// 询问gs登录失败
    /// </summary>
    [pbr::OriginalName("GS_LOGIN_RET_FAILED_ASKGSPERMISSIONRET")] GsLoginRetFailedAskgspermissionret = 10,
    /// <summary>
    /// 选择角色登录失败
    /// </summary>
    [pbr::OriginalName("GS_LOGIN_RET_FAILED_SELECTROLEFAILED")] GsLoginRetFailedSelectrolefailed = 11,
  }

  /// <summary>
  /// 创建角色失败原因
  /// </summary>
  public enum RoleCreateFailedResult {
    /// <summary>
    /// 角色创建成功
    /// </summary>
    [pbr::OriginalName("ROLECREATE_FAIL_REASON_NONE")] RolecreateFailReasonNone = 0,
    /// <summary>
    /// 未知错误
    /// </summary>
    [pbr::OriginalName("ROLECREATE_FAIL_REASON_UNKNOWN")] RolecreateFailReasonUnknown = 1,
    /// <summary>
    /// 角色名非法
    /// </summary>
    [pbr::OriginalName("ROLECREATE_FAIL_REASON_NAME_FILTER")] RolecreateFailReasonNameFilter = 2,
    /// <summary>
    /// 角色名已存在
    /// </summary>
    [pbr::OriginalName("ROLECREATE_FAIL_REASON_NAME_EXIST")] RolecreateFailReasonNameExist = 3,
    /// <summary>
    /// 创建角色超过本服上限
    /// </summary>
    [pbr::OriginalName("ROLECREATE_FAIL_REASON_OVER_MAX_ROLE_PER_GATEWAY")] RolecreateFailReasonOverMaxRolePerGateway = 4,
    /// <summary>
    /// 创建角色超过整个大区上限
    /// </summary>
    [pbr::OriginalName("ROLECREATE_FAIL_REASON_OVER_MAX_ROLE_PER_ZONE")] RolecreateFailReasonOverMaxRolePerZone = 5,
    /// <summary>
    /// 角色名长度超过上限
    /// </summary>
    [pbr::OriginalName("ROLECREATE_FAIL_MAX_NAME_LEN")] RolecreateFailMaxNameLen = 6,
    /// <summary>
    /// 角色名长度低于下限
    /// </summary>
    [pbr::OriginalName("ROLECREATE_FAIL_MIN_NAME_LEN")] RolecreateFailMinNameLen = 7,
  }

  /// <summary>
  /// 踢掉玩家的原因
  /// </summary>
  public enum KickOutClientResult {
    /// <summary>
    ///默认踢掉角色
    /// </summary>
    [pbr::OriginalName("KICKOUT_REASON_NULL")] KickoutReasonNull = 0,
    /// <summary>
    ///账号重复登录
    /// </summary>
    [pbr::OriginalName("KICKOUT_REASON_SAMEACCOUNTLOGIN")] KickoutReasonSameaccountlogin = 1,
    /// <summary>
    ///踢掉挂机的玩家
    /// </summary>
    [pbr::OriginalName("KICKOUT_REASON_KICKHANGUP")] KickoutReasonKickhangup = 2,
    /// <summary>
    ///客户端登录失败
    /// </summary>
    [pbr::OriginalName("KICKOUT_REASON_LOGINFAILED")] KickoutReasonLoginfailed = 3,
    /// <summary>
    ///客户端断开连接
    /// </summary>
    [pbr::OriginalName("KICKOUT_REASON_CLIENTDISCONNECT")] KickoutReasonClientdisconnect = 4,
    /// <summary>
    ///客户端请求退出
    /// </summary>
    [pbr::OriginalName("KICKOUT_REASON_CLIENTREQUESTEXIT")] KickoutReasonClientrequestexit = 5,
    /// <summary>
    ///服务器因错误挫人
    /// </summary>
    [pbr::OriginalName("KICKOUT_REASON_SERVERKICK")] KickoutReasonServerkick = 6,
    /// <summary>
    ///非法的客户端
    /// </summary>
    [pbr::OriginalName("KICKOUT_REASON_UNLEGALCLIENT")] KickoutReasonUnlegalclient = 7,
    /// <summary>
    ///后台踢人
    /// </summary>
    [pbr::OriginalName("KICKOUT_REASON_BACKENDKICK")] KickoutReasonBackendkick = 8,
    /// <summary>
    ///GM在线踢人
    /// </summary>
    [pbr::OriginalName("KICKOUT_REASON_ONLINEGMKICK")] KickoutReasonOnlinegmkick = 9,
    /// <summary>
    ///GS宕机踢人
    /// </summary>
    [pbr::OriginalName("KICKOUT_REASON_GSCRASH")] KickoutReasonGscrash = 10,
    /// <summary>
    ///GC宕机踢人
    /// </summary>
    [pbr::OriginalName("KICKOUT_REASON_GCCRASH")] KickoutReasonGccrash = 11,
    /// <summary>
    ///场景切换失败
    /// </summary>
    [pbr::OriginalName("KICKOUT_REASON_SCENECHANGE")] KickoutReasonScenechange = 12,
    /// <summary>
    ///封号        
    /// </summary>
    [pbr::OriginalName("KICKOUT_REASON_BANPLAYER")] KickoutReasonBanplayer = 13,
    /// <summary>
    ///切换gs的踢人
    /// </summary>
    [pbr::OriginalName("KICKOUT_REASON_SWITCHSERVER")] KickoutReasonSwitchserver = 14,
    /// <summary>
    ///切换角色
    /// </summary>
    [pbr::OriginalName("KICKOUT_REASON_EXITROLE")] KickoutReasonExitrole = 15,
    /// <summary>
    ///断线重连失败
    /// </summary>
    [pbr::OriginalName("KICKOUT_REASON_DIRECTLOGIN")] KickoutReasonDirectlogin = 16,
    /// <summary>
    ///bishop踢人    
    /// </summary>
    [pbr::OriginalName("KICKOUT_REASON_BISHOPKICKOUT")] KickoutReasonBishopkickout = 17,
  }

  #endregion

  #region Messages
  /// <summary>
  /// 客户端向服务端发送登录协议，发送账号和密码
  /// PTC_C2G_LOGININFO
  /// </summary>
  public sealed partial class DPUserLoginInfoReq : pb::IMessage<DPUserLoginInfoReq> {
    private static readonly pb::MessageParser<DPUserLoginInfoReq> _parser = new pb::MessageParser<DPUserLoginInfoReq>(() => new DPUserLoginInfoReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DPUserLoginInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DPLogin.DPLoginReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPUserLoginInfoReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPUserLoginInfoReq(DPUserLoginInfoReq other) : this() {
      szAccount_ = other.szAccount_;
      szPassword_ = other.szPassword_;
      szMacAdress_ = other.szMacAdress_;
      nClientVersion_ = other.nClientVersion_;
      szUserName_ = other.szUserName_;
      extensionJson_ = other.extensionJson_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPUserLoginInfoReq Clone() {
      return new DPUserLoginInfoReq(this);
    }

    /// <summary>Field number for the "szAccount" field.</summary>
    public const int SzAccountFieldNumber = 1;
    private string szAccount_ = "";
    /// <summary>
    /// 账号    
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzAccount {
      get { return szAccount_; }
      set {
        szAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "szPassword" field.</summary>
    public const int SzPasswordFieldNumber = 2;
    private string szPassword_ = "";
    /// <summary>
    /// 密码       
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzPassword {
      get { return szPassword_; }
      set {
        szPassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "szMacAdress" field.</summary>
    public const int SzMacAdressFieldNumber = 3;
    private string szMacAdress_ = "";
    /// <summary>
    /// mac地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzMacAdress {
      get { return szMacAdress_; }
      set {
        szMacAdress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nClientVersion" field.</summary>
    public const int NClientVersionFieldNumber = 4;
    private int nClientVersion_;
    /// <summary>
    /// 客户端版本号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NClientVersion {
      get { return nClientVersion_; }
      set {
        nClientVersion_ = value;
      }
    }

    /// <summary>Field number for the "szUserName" field.</summary>
    public const int SzUserNameFieldNumber = 5;
    private string szUserName_ = "";
    /// <summary>
    /// 用户名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzUserName {
      get { return szUserName_; }
      set {
        szUserName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extensionJson" field.</summary>
    public const int ExtensionJsonFieldNumber = 6;
    private string extensionJson_ = "";
    /// <summary>
    /// 透传字段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExtensionJson {
      get { return extensionJson_; }
      set {
        extensionJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DPUserLoginInfoReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DPUserLoginInfoReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SzAccount != other.SzAccount) return false;
      if (SzPassword != other.SzPassword) return false;
      if (SzMacAdress != other.SzMacAdress) return false;
      if (NClientVersion != other.NClientVersion) return false;
      if (SzUserName != other.SzUserName) return false;
      if (ExtensionJson != other.ExtensionJson) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SzAccount.Length != 0) hash ^= SzAccount.GetHashCode();
      if (SzPassword.Length != 0) hash ^= SzPassword.GetHashCode();
      if (SzMacAdress.Length != 0) hash ^= SzMacAdress.GetHashCode();
      if (NClientVersion != 0) hash ^= NClientVersion.GetHashCode();
      if (SzUserName.Length != 0) hash ^= SzUserName.GetHashCode();
      if (ExtensionJson.Length != 0) hash ^= ExtensionJson.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SzAccount.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SzAccount);
      }
      if (SzPassword.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SzPassword);
      }
      if (SzMacAdress.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SzMacAdress);
      }
      if (NClientVersion != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NClientVersion);
      }
      if (SzUserName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SzUserName);
      }
      if (ExtensionJson.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ExtensionJson);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SzAccount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzAccount);
      }
      if (SzPassword.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzPassword);
      }
      if (SzMacAdress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzMacAdress);
      }
      if (NClientVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NClientVersion);
      }
      if (SzUserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzUserName);
      }
      if (ExtensionJson.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExtensionJson);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DPUserLoginInfoReq other) {
      if (other == null) {
        return;
      }
      if (other.SzAccount.Length != 0) {
        SzAccount = other.SzAccount;
      }
      if (other.SzPassword.Length != 0) {
        SzPassword = other.SzPassword;
      }
      if (other.SzMacAdress.Length != 0) {
        SzMacAdress = other.SzMacAdress;
      }
      if (other.NClientVersion != 0) {
        NClientVersion = other.NClientVersion;
      }
      if (other.SzUserName.Length != 0) {
        SzUserName = other.SzUserName;
      }
      if (other.ExtensionJson.Length != 0) {
        ExtensionJson = other.ExtensionJson;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SzAccount = input.ReadString();
            break;
          }
          case 18: {
            SzPassword = input.ReadString();
            break;
          }
          case 26: {
            SzMacAdress = input.ReadString();
            break;
          }
          case 32: {
            NClientVersion = input.ReadInt32();
            break;
          }
          case 42: {
            SzUserName = input.ReadString();
            break;
          }
          case 50: {
            ExtensionJson = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家登陆，身份验证的结果
  /// PTC_G2C_ACC_VERIFY_RESULT
  /// </summary>
  public sealed partial class DPAccountVerifyResultResp : pb::IMessage<DPAccountVerifyResultResp> {
    private static readonly pb::MessageParser<DPAccountVerifyResultResp> _parser = new pb::MessageParser<DPAccountVerifyResultResp>(() => new DPAccountVerifyResultResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DPAccountVerifyResultResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DPLogin.DPLoginReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPAccountVerifyResultResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPAccountVerifyResultResp(DPAccountVerifyResultResp other) : this() {
      szAccount_ = other.szAccount_;
      nResult_ = other.nResult_;
      szLoginGuid_ = other.szLoginGuid_;
      szServerIP_ = other.szServerIP_;
      nPort_ = other.nPort_;
      nServerID_ = other.nServerID_;
      nWaitNum_ = other.nWaitNum_;
      nMaxWaitNum_ = other.nMaxWaitNum_;
      szGatewayName_ = other.szGatewayName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPAccountVerifyResultResp Clone() {
      return new DPAccountVerifyResultResp(this);
    }

    /// <summary>Field number for the "szAccount" field.</summary>
    public const int SzAccountFieldNumber = 1;
    private string szAccount_ = "";
    /// <summary>
    /// 账号     
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzAccount {
      get { return szAccount_; }
      set {
        szAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nResult" field.</summary>
    public const int NResultFieldNumber = 2;
    private global::DPLogin.AccountLoginVerifyResult nResult_ = 0;
    /// <summary>
    /// 结果                
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DPLogin.AccountLoginVerifyResult NResult {
      get { return nResult_; }
      set {
        nResult_ = value;
      }
    }

    /// <summary>Field number for the "szLoginGuid" field.</summary>
    public const int SzLoginGuidFieldNumber = 3;
    private string szLoginGuid_ = "";
    /// <summary>
    /// 登陆guid    
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzLoginGuid {
      get { return szLoginGuid_; }
      set {
        szLoginGuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "szServerIP" field.</summary>
    public const int SzServerIPFieldNumber = 4;
    private string szServerIP_ = "";
    /// <summary>
    /// 服务器ip
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzServerIP {
      get { return szServerIP_; }
      set {
        szServerIP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nPort" field.</summary>
    public const int NPortFieldNumber = 5;
    private int nPort_;
    /// <summary>
    /// 端口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NPort {
      get { return nPort_; }
      set {
        nPort_ = value;
      }
    }

    /// <summary>Field number for the "nServerID" field.</summary>
    public const int NServerIDFieldNumber = 6;
    private int nServerID_;
    /// <summary>
    /// 服务器ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NServerID {
      get { return nServerID_; }
      set {
        nServerID_ = value;
      }
    }

    /// <summary>Field number for the "nWaitNum" field.</summary>
    public const int NWaitNumFieldNumber = 7;
    private int nWaitNum_;
    /// <summary>
    /// 排队人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NWaitNum {
      get { return nWaitNum_; }
      set {
        nWaitNum_ = value;
      }
    }

    /// <summary>Field number for the "nMaxWaitNum" field.</summary>
    public const int NMaxWaitNumFieldNumber = 8;
    private int nMaxWaitNum_;
    /// <summary>
    /// 最大排队人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NMaxWaitNum {
      get { return nMaxWaitNum_; }
      set {
        nMaxWaitNum_ = value;
      }
    }

    /// <summary>Field number for the "szGatewayName" field.</summary>
    public const int SzGatewayNameFieldNumber = 9;
    private string szGatewayName_ = "";
    /// <summary>
    /// 服务器名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzGatewayName {
      get { return szGatewayName_; }
      set {
        szGatewayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DPAccountVerifyResultResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DPAccountVerifyResultResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SzAccount != other.SzAccount) return false;
      if (NResult != other.NResult) return false;
      if (SzLoginGuid != other.SzLoginGuid) return false;
      if (SzServerIP != other.SzServerIP) return false;
      if (NPort != other.NPort) return false;
      if (NServerID != other.NServerID) return false;
      if (NWaitNum != other.NWaitNum) return false;
      if (NMaxWaitNum != other.NMaxWaitNum) return false;
      if (SzGatewayName != other.SzGatewayName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SzAccount.Length != 0) hash ^= SzAccount.GetHashCode();
      if (NResult != 0) hash ^= NResult.GetHashCode();
      if (SzLoginGuid.Length != 0) hash ^= SzLoginGuid.GetHashCode();
      if (SzServerIP.Length != 0) hash ^= SzServerIP.GetHashCode();
      if (NPort != 0) hash ^= NPort.GetHashCode();
      if (NServerID != 0) hash ^= NServerID.GetHashCode();
      if (NWaitNum != 0) hash ^= NWaitNum.GetHashCode();
      if (NMaxWaitNum != 0) hash ^= NMaxWaitNum.GetHashCode();
      if (SzGatewayName.Length != 0) hash ^= SzGatewayName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SzAccount.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SzAccount);
      }
      if (NResult != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) NResult);
      }
      if (SzLoginGuid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SzLoginGuid);
      }
      if (SzServerIP.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SzServerIP);
      }
      if (NPort != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NPort);
      }
      if (NServerID != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(NServerID);
      }
      if (NWaitNum != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(NWaitNum);
      }
      if (NMaxWaitNum != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(NMaxWaitNum);
      }
      if (SzGatewayName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(SzGatewayName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SzAccount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzAccount);
      }
      if (NResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NResult);
      }
      if (SzLoginGuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzLoginGuid);
      }
      if (SzServerIP.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzServerIP);
      }
      if (NPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NPort);
      }
      if (NServerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NServerID);
      }
      if (NWaitNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NWaitNum);
      }
      if (NMaxWaitNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NMaxWaitNum);
      }
      if (SzGatewayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzGatewayName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DPAccountVerifyResultResp other) {
      if (other == null) {
        return;
      }
      if (other.SzAccount.Length != 0) {
        SzAccount = other.SzAccount;
      }
      if (other.NResult != 0) {
        NResult = other.NResult;
      }
      if (other.SzLoginGuid.Length != 0) {
        SzLoginGuid = other.SzLoginGuid;
      }
      if (other.SzServerIP.Length != 0) {
        SzServerIP = other.SzServerIP;
      }
      if (other.NPort != 0) {
        NPort = other.NPort;
      }
      if (other.NServerID != 0) {
        NServerID = other.NServerID;
      }
      if (other.NWaitNum != 0) {
        NWaitNum = other.NWaitNum;
      }
      if (other.NMaxWaitNum != 0) {
        NMaxWaitNum = other.NMaxWaitNum;
      }
      if (other.SzGatewayName.Length != 0) {
        SzGatewayName = other.SzGatewayName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SzAccount = input.ReadString();
            break;
          }
          case 16: {
            nResult_ = (global::DPLogin.AccountLoginVerifyResult) input.ReadEnum();
            break;
          }
          case 26: {
            SzLoginGuid = input.ReadString();
            break;
          }
          case 34: {
            SzServerIP = input.ReadString();
            break;
          }
          case 40: {
            NPort = input.ReadInt32();
            break;
          }
          case 48: {
            NServerID = input.ReadInt32();
            break;
          }
          case 56: {
            NWaitNum = input.ReadInt32();
            break;
          }
          case 64: {
            NMaxWaitNum = input.ReadInt32();
            break;
          }
          case 74: {
            SzGatewayName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端发起登陆协议
  /// PTC_C2S_LOGICLOGIN
  /// </summary>
  public sealed partial class DPGSLogicLoginReq : pb::IMessage<DPGSLogicLoginReq> {
    private static readonly pb::MessageParser<DPGSLogicLoginReq> _parser = new pb::MessageParser<DPGSLogicLoginReq>(() => new DPGSLogicLoginReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DPGSLogicLoginReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DPLogin.DPLoginReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPGSLogicLoginReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPGSLogicLoginReq(DPGSLogicLoginReq other) : this() {
      szLoginGuid_ = other.szLoginGuid_;
      szAccount_ = other.szAccount_;
      nServerId_ = other.nServerId_;
      szMacAdress_ = other.szMacAdress_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPGSLogicLoginReq Clone() {
      return new DPGSLogicLoginReq(this);
    }

    /// <summary>Field number for the "szLoginGuid" field.</summary>
    public const int SzLoginGuidFieldNumber = 1;
    private string szLoginGuid_ = "";
    /// <summary>
    /// 登陆guid        
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzLoginGuid {
      get { return szLoginGuid_; }
      set {
        szLoginGuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "szAccount" field.</summary>
    public const int SzAccountFieldNumber = 2;
    private string szAccount_ = "";
    /// <summary>
    /// 账号   
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzAccount {
      get { return szAccount_; }
      set {
        szAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nServerId" field.</summary>
    public const int NServerIdFieldNumber = 3;
    private int nServerId_;
    /// <summary>
    /// serverID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NServerId {
      get { return nServerId_; }
      set {
        nServerId_ = value;
      }
    }

    /// <summary>Field number for the "szMacAdress" field.</summary>
    public const int SzMacAdressFieldNumber = 4;
    private string szMacAdress_ = "";
    /// <summary>
    /// mac地址    
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzMacAdress {
      get { return szMacAdress_; }
      set {
        szMacAdress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DPGSLogicLoginReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DPGSLogicLoginReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SzLoginGuid != other.SzLoginGuid) return false;
      if (SzAccount != other.SzAccount) return false;
      if (NServerId != other.NServerId) return false;
      if (SzMacAdress != other.SzMacAdress) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SzLoginGuid.Length != 0) hash ^= SzLoginGuid.GetHashCode();
      if (SzAccount.Length != 0) hash ^= SzAccount.GetHashCode();
      if (NServerId != 0) hash ^= NServerId.GetHashCode();
      if (SzMacAdress.Length != 0) hash ^= SzMacAdress.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SzLoginGuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SzLoginGuid);
      }
      if (SzAccount.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SzAccount);
      }
      if (NServerId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NServerId);
      }
      if (SzMacAdress.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SzMacAdress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SzLoginGuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzLoginGuid);
      }
      if (SzAccount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzAccount);
      }
      if (NServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NServerId);
      }
      if (SzMacAdress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzMacAdress);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DPGSLogicLoginReq other) {
      if (other == null) {
        return;
      }
      if (other.SzLoginGuid.Length != 0) {
        SzLoginGuid = other.SzLoginGuid;
      }
      if (other.SzAccount.Length != 0) {
        SzAccount = other.SzAccount;
      }
      if (other.NServerId != 0) {
        NServerId = other.NServerId;
      }
      if (other.SzMacAdress.Length != 0) {
        SzMacAdress = other.SzMacAdress;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SzLoginGuid = input.ReadString();
            break;
          }
          case 18: {
            SzAccount = input.ReadString();
            break;
          }
          case 24: {
            NServerId = input.ReadInt32();
            break;
          }
          case 34: {
            SzMacAdress = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端登陆逻辑服失败返回错误码
  /// PTC_S2C_LOGICLOIN_RET
  /// </summary>
  public sealed partial class DPGSLogicLoginRetResp : pb::IMessage<DPGSLogicLoginRetResp> {
    private static readonly pb::MessageParser<DPGSLogicLoginRetResp> _parser = new pb::MessageParser<DPGSLogicLoginRetResp>(() => new DPGSLogicLoginRetResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DPGSLogicLoginRetResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DPLogin.DPLoginReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPGSLogicLoginRetResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPGSLogicLoginRetResp(DPGSLogicLoginRetResp other) : this() {
      szAccount_ = other.szAccount_;
      eRet_ = other.eRet_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPGSLogicLoginRetResp Clone() {
      return new DPGSLogicLoginRetResp(this);
    }

    /// <summary>Field number for the "szAccount" field.</summary>
    public const int SzAccountFieldNumber = 1;
    private string szAccount_ = "";
    /// <summary>
    /// 账号   
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzAccount {
      get { return szAccount_; }
      set {
        szAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "eRet" field.</summary>
    public const int ERetFieldNumber = 2;
    private global::DPLogin.BEGSLogicLoginRet eRet_ = 0;
    /// <summary>
    /// 返回登陆结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DPLogin.BEGSLogicLoginRet ERet {
      get { return eRet_; }
      set {
        eRet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DPGSLogicLoginRetResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DPGSLogicLoginRetResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SzAccount != other.SzAccount) return false;
      if (ERet != other.ERet) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SzAccount.Length != 0) hash ^= SzAccount.GetHashCode();
      if (ERet != 0) hash ^= ERet.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SzAccount.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SzAccount);
      }
      if (ERet != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ERet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SzAccount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzAccount);
      }
      if (ERet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ERet);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DPGSLogicLoginRetResp other) {
      if (other == null) {
        return;
      }
      if (other.SzAccount.Length != 0) {
        SzAccount = other.SzAccount;
      }
      if (other.ERet != 0) {
        ERet = other.ERet;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SzAccount = input.ReadString();
            break;
          }
          case 16: {
            eRet_ = (global::DPLogin.BEGSLogicLoginRet) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 角色列表中的角色信息
  /// </summary>
  public sealed partial class DPGSRoleItemInfo : pb::IMessage<DPGSRoleItemInfo> {
    private static readonly pb::MessageParser<DPGSRoleItemInfo> _parser = new pb::MessageParser<DPGSRoleItemInfo>(() => new DPGSRoleItemInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DPGSRoleItemInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DPLogin.DPLoginReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPGSRoleItemInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPGSRoleItemInfo(DPGSRoleItemInfo other) : this() {
      stBaseInfo_ = other.stBaseInfo_ != null ? other.stBaseInfo_.Clone() : null;
      nCreateTime_ = other.nCreateTime_;
      nPlatformId_ = other.nPlatformId_;
      nCreateServerId_ = other.nCreateServerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPGSRoleItemInfo Clone() {
      return new DPGSRoleItemInfo(this);
    }

    /// <summary>Field number for the "stBaseInfo" field.</summary>
    public const int StBaseInfoFieldNumber = 1;
    private global::DeerGameBase.DPRoleBaseInfo stBaseInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DeerGameBase.DPRoleBaseInfo StBaseInfo {
      get { return stBaseInfo_; }
      set {
        stBaseInfo_ = value;
      }
    }

    /// <summary>Field number for the "nCreateTime" field.</summary>
    public const int NCreateTimeFieldNumber = 2;
    private long nCreateTime_;
    /// <summary>
    /// 创建角色时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NCreateTime {
      get { return nCreateTime_; }
      set {
        nCreateTime_ = value;
      }
    }

    /// <summary>Field number for the "nPlatformId" field.</summary>
    public const int NPlatformIdFieldNumber = 3;
    private int nPlatformId_;
    /// <summary>
    /// 平台类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NPlatformId {
      get { return nPlatformId_; }
      set {
        nPlatformId_ = value;
      }
    }

    /// <summary>Field number for the "nCreateServerId" field.</summary>
    public const int NCreateServerIdFieldNumber = 4;
    private int nCreateServerId_;
    /// <summary>
    /// 创建角色的服务器ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NCreateServerId {
      get { return nCreateServerId_; }
      set {
        nCreateServerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DPGSRoleItemInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DPGSRoleItemInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StBaseInfo, other.StBaseInfo)) return false;
      if (NCreateTime != other.NCreateTime) return false;
      if (NPlatformId != other.NPlatformId) return false;
      if (NCreateServerId != other.NCreateServerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (stBaseInfo_ != null) hash ^= StBaseInfo.GetHashCode();
      if (NCreateTime != 0L) hash ^= NCreateTime.GetHashCode();
      if (NPlatformId != 0) hash ^= NPlatformId.GetHashCode();
      if (NCreateServerId != 0) hash ^= NCreateServerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (stBaseInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StBaseInfo);
      }
      if (NCreateTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(NCreateTime);
      }
      if (NPlatformId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NPlatformId);
      }
      if (NCreateServerId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NCreateServerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (stBaseInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StBaseInfo);
      }
      if (NCreateTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NCreateTime);
      }
      if (NPlatformId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NPlatformId);
      }
      if (NCreateServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NCreateServerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DPGSRoleItemInfo other) {
      if (other == null) {
        return;
      }
      if (other.stBaseInfo_ != null) {
        if (stBaseInfo_ == null) {
          stBaseInfo_ = new global::DeerGameBase.DPRoleBaseInfo();
        }
        StBaseInfo.MergeFrom(other.StBaseInfo);
      }
      if (other.NCreateTime != 0L) {
        NCreateTime = other.NCreateTime;
      }
      if (other.NPlatformId != 0) {
        NPlatformId = other.NPlatformId;
      }
      if (other.NCreateServerId != 0) {
        NCreateServerId = other.NCreateServerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (stBaseInfo_ == null) {
              stBaseInfo_ = new global::DeerGameBase.DPRoleBaseInfo();
            }
            input.ReadMessage(stBaseInfo_);
            break;
          }
          case 16: {
            NCreateTime = input.ReadInt64();
            break;
          }
          case 24: {
            NPlatformId = input.ReadInt32();
            break;
          }
          case 32: {
            NCreateServerId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 网关服务端把角色列表发回到客户端，里面有账号，角色数和角色列表
  /// PTC_G2C_ROLELIST_RESPONE
  /// </summary>
  public sealed partial class DPRoleListResponeResp : pb::IMessage<DPRoleListResponeResp> {
    private static readonly pb::MessageParser<DPRoleListResponeResp> _parser = new pb::MessageParser<DPRoleListResponeResp>(() => new DPRoleListResponeResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DPRoleListResponeResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DPLogin.DPLoginReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPRoleListResponeResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPRoleListResponeResp(DPRoleListResponeResp other) : this() {
      szAccount_ = other.szAccount_;
      nRoleCount_ = other.nRoleCount_;
      arrayRoleList_ = other.arrayRoleList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPRoleListResponeResp Clone() {
      return new DPRoleListResponeResp(this);
    }

    /// <summary>Field number for the "szAccount" field.</summary>
    public const int SzAccountFieldNumber = 1;
    private string szAccount_ = "";
    /// <summary>
    /// 账号    
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzAccount {
      get { return szAccount_; }
      set {
        szAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nRoleCount" field.</summary>
    public const int NRoleCountFieldNumber = 2;
    private int nRoleCount_;
    /// <summary>
    /// 角色数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NRoleCount {
      get { return nRoleCount_; }
      set {
        nRoleCount_ = value;
      }
    }

    /// <summary>Field number for the "arrayRoleList" field.</summary>
    public const int ArrayRoleListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::DPLogin.DPGSRoleItemInfo> _repeated_arrayRoleList_codec
        = pb::FieldCodec.ForMessage(26, global::DPLogin.DPGSRoleItemInfo.Parser);
    private readonly pbc::RepeatedField<global::DPLogin.DPGSRoleItemInfo> arrayRoleList_ = new pbc::RepeatedField<global::DPLogin.DPGSRoleItemInfo>();
    /// <summary>
    /// 角色列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DPLogin.DPGSRoleItemInfo> ArrayRoleList {
      get { return arrayRoleList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DPRoleListResponeResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DPRoleListResponeResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SzAccount != other.SzAccount) return false;
      if (NRoleCount != other.NRoleCount) return false;
      if(!arrayRoleList_.Equals(other.arrayRoleList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SzAccount.Length != 0) hash ^= SzAccount.GetHashCode();
      if (NRoleCount != 0) hash ^= NRoleCount.GetHashCode();
      hash ^= arrayRoleList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SzAccount.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SzAccount);
      }
      if (NRoleCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NRoleCount);
      }
      arrayRoleList_.WriteTo(output, _repeated_arrayRoleList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SzAccount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzAccount);
      }
      if (NRoleCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NRoleCount);
      }
      size += arrayRoleList_.CalculateSize(_repeated_arrayRoleList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DPRoleListResponeResp other) {
      if (other == null) {
        return;
      }
      if (other.SzAccount.Length != 0) {
        SzAccount = other.SzAccount;
      }
      if (other.NRoleCount != 0) {
        NRoleCount = other.NRoleCount;
      }
      arrayRoleList_.Add(other.arrayRoleList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SzAccount = input.ReadString();
            break;
          }
          case 16: {
            NRoleCount = input.ReadInt32();
            break;
          }
          case 26: {
            arrayRoleList_.AddEntriesFrom(input, _repeated_arrayRoleList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家确定选取角色登录游戏
  /// PTC_C2G_GAMELOGIN_REQUEST
  /// </summary>
  public sealed partial class DPGameLoginRequestReq : pb::IMessage<DPGameLoginRequestReq> {
    private static readonly pb::MessageParser<DPGameLoginRequestReq> _parser = new pb::MessageParser<DPGameLoginRequestReq>(() => new DPGameLoginRequestReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DPGameLoginRequestReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DPLogin.DPLoginReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPGameLoginRequestReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPGameLoginRequestReq(DPGameLoginRequestReq other) : this() {
      szAccount_ = other.szAccount_;
      nRoleGuid_ = other.nRoleGuid_;
      szRoleName_ = other.szRoleName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPGameLoginRequestReq Clone() {
      return new DPGameLoginRequestReq(this);
    }

    /// <summary>Field number for the "szAccount" field.</summary>
    public const int SzAccountFieldNumber = 1;
    private string szAccount_ = "";
    /// <summary>
    /// 账号        
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzAccount {
      get { return szAccount_; }
      set {
        szAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nRoleGuid" field.</summary>
    public const int NRoleGuidFieldNumber = 2;
    private ulong nRoleGuid_;
    /// <summary>
    /// 玩家唯一标识id guid    
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NRoleGuid {
      get { return nRoleGuid_; }
      set {
        nRoleGuid_ = value;
      }
    }

    /// <summary>Field number for the "szRoleName" field.</summary>
    public const int SzRoleNameFieldNumber = 3;
    private string szRoleName_ = "";
    /// <summary>
    /// 玩家名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzRoleName {
      get { return szRoleName_; }
      set {
        szRoleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DPGameLoginRequestReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DPGameLoginRequestReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SzAccount != other.SzAccount) return false;
      if (NRoleGuid != other.NRoleGuid) return false;
      if (SzRoleName != other.SzRoleName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SzAccount.Length != 0) hash ^= SzAccount.GetHashCode();
      if (NRoleGuid != 0UL) hash ^= NRoleGuid.GetHashCode();
      if (SzRoleName.Length != 0) hash ^= SzRoleName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SzAccount.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SzAccount);
      }
      if (NRoleGuid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(NRoleGuid);
      }
      if (SzRoleName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SzRoleName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SzAccount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzAccount);
      }
      if (NRoleGuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NRoleGuid);
      }
      if (SzRoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzRoleName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DPGameLoginRequestReq other) {
      if (other == null) {
        return;
      }
      if (other.SzAccount.Length != 0) {
        SzAccount = other.SzAccount;
      }
      if (other.NRoleGuid != 0UL) {
        NRoleGuid = other.NRoleGuid;
      }
      if (other.SzRoleName.Length != 0) {
        SzRoleName = other.SzRoleName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SzAccount = input.ReadString();
            break;
          }
          case 16: {
            NRoleGuid = input.ReadUInt64();
            break;
          }
          case 26: {
            SzRoleName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 创建角色发送创建的角色名到网关服务器
  /// PTC_C2G_CREATE_ROLE
  /// </summary>
  public sealed partial class DPCreateRoleReq : pb::IMessage<DPCreateRoleReq> {
    private static readonly pb::MessageParser<DPCreateRoleReq> _parser = new pb::MessageParser<DPCreateRoleReq>(() => new DPCreateRoleReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DPCreateRoleReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DPLogin.DPLoginReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPCreateRoleReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPCreateRoleReq(DPCreateRoleReq other) : this() {
      szAccount_ = other.szAccount_;
      szRoleName_ = other.szRoleName_;
      nProfessionId_ = other.nProfessionId_;
      nPortrait_ = other.nPortrait_;
      nClothId_ = other.nClothId_;
      nPlatformId_ = other.nPlatformId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPCreateRoleReq Clone() {
      return new DPCreateRoleReq(this);
    }

    /// <summary>Field number for the "szAccount" field.</summary>
    public const int SzAccountFieldNumber = 1;
    private string szAccount_ = "";
    /// <summary>
    /// 账号    
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzAccount {
      get { return szAccount_; }
      set {
        szAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "szRoleName" field.</summary>
    public const int SzRoleNameFieldNumber = 2;
    private string szRoleName_ = "";
    /// <summary>
    /// 角色名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzRoleName {
      get { return szRoleName_; }
      set {
        szRoleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nProfessionId" field.</summary>
    public const int NProfessionIdFieldNumber = 3;
    private int nProfessionId_;
    /// <summary>
    /// 角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NProfessionId {
      get { return nProfessionId_; }
      set {
        nProfessionId_ = value;
      }
    }

    /// <summary>Field number for the "nPortrait" field.</summary>
    public const int NPortraitFieldNumber = 4;
    private int nPortrait_;
    /// <summary>
    /// 头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NPortrait {
      get { return nPortrait_; }
      set {
        nPortrait_ = value;
      }
    }

    /// <summary>Field number for the "nClothId" field.</summary>
    public const int NClothIdFieldNumber = 5;
    private int nClothId_;
    /// <summary>
    /// 选择的时装        
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NClothId {
      get { return nClothId_; }
      set {
        nClothId_ = value;
      }
    }

    /// <summary>Field number for the "nPlatformId" field.</summary>
    public const int NPlatformIdFieldNumber = 6;
    private int nPlatformId_;
    /// <summary>
    /// 平台ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NPlatformId {
      get { return nPlatformId_; }
      set {
        nPlatformId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DPCreateRoleReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DPCreateRoleReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SzAccount != other.SzAccount) return false;
      if (SzRoleName != other.SzRoleName) return false;
      if (NProfessionId != other.NProfessionId) return false;
      if (NPortrait != other.NPortrait) return false;
      if (NClothId != other.NClothId) return false;
      if (NPlatformId != other.NPlatformId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SzAccount.Length != 0) hash ^= SzAccount.GetHashCode();
      if (SzRoleName.Length != 0) hash ^= SzRoleName.GetHashCode();
      if (NProfessionId != 0) hash ^= NProfessionId.GetHashCode();
      if (NPortrait != 0) hash ^= NPortrait.GetHashCode();
      if (NClothId != 0) hash ^= NClothId.GetHashCode();
      if (NPlatformId != 0) hash ^= NPlatformId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SzAccount.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SzAccount);
      }
      if (SzRoleName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SzRoleName);
      }
      if (NProfessionId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NProfessionId);
      }
      if (NPortrait != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NPortrait);
      }
      if (NClothId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NClothId);
      }
      if (NPlatformId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(NPlatformId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SzAccount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzAccount);
      }
      if (SzRoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzRoleName);
      }
      if (NProfessionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NProfessionId);
      }
      if (NPortrait != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NPortrait);
      }
      if (NClothId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NClothId);
      }
      if (NPlatformId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NPlatformId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DPCreateRoleReq other) {
      if (other == null) {
        return;
      }
      if (other.SzAccount.Length != 0) {
        SzAccount = other.SzAccount;
      }
      if (other.SzRoleName.Length != 0) {
        SzRoleName = other.SzRoleName;
      }
      if (other.NProfessionId != 0) {
        NProfessionId = other.NProfessionId;
      }
      if (other.NPortrait != 0) {
        NPortrait = other.NPortrait;
      }
      if (other.NClothId != 0) {
        NClothId = other.NClothId;
      }
      if (other.NPlatformId != 0) {
        NPlatformId = other.NPlatformId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SzAccount = input.ReadString();
            break;
          }
          case 18: {
            SzRoleName = input.ReadString();
            break;
          }
          case 24: {
            NProfessionId = input.ReadInt32();
            break;
          }
          case 32: {
            NPortrait = input.ReadInt32();
            break;
          }
          case 40: {
            NClothId = input.ReadInt32();
            break;
          }
          case 48: {
            NPlatformId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 创建角色返回结果给客户端
  /// PTC_G2C_CREATEROLE_RESULT
  /// </summary>
  public sealed partial class DPCreateRoleResultResp : pb::IMessage<DPCreateRoleResultResp> {
    private static readonly pb::MessageParser<DPCreateRoleResultResp> _parser = new pb::MessageParser<DPCreateRoleResultResp>(() => new DPCreateRoleResultResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DPCreateRoleResultResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DPLogin.DPLoginReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPCreateRoleResultResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPCreateRoleResultResp(DPCreateRoleResultResp other) : this() {
      szAccount_ = other.szAccount_;
      szRoleName_ = other.szRoleName_;
      nRoleGuid_ = other.nRoleGuid_;
      bSuccessed_ = other.bSuccessed_;
      nFailedReason_ = other.nFailedReason_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPCreateRoleResultResp Clone() {
      return new DPCreateRoleResultResp(this);
    }

    /// <summary>Field number for the "szAccount" field.</summary>
    public const int SzAccountFieldNumber = 1;
    private string szAccount_ = "";
    /// <summary>
    /// 账号    
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzAccount {
      get { return szAccount_; }
      set {
        szAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "szRoleName" field.</summary>
    public const int SzRoleNameFieldNumber = 2;
    private string szRoleName_ = "";
    /// <summary>
    /// 角色名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzRoleName {
      get { return szRoleName_; }
      set {
        szRoleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nRoleGuid" field.</summary>
    public const int NRoleGuidFieldNumber = 3;
    private ulong nRoleGuid_;
    /// <summary>
    /// 玩家唯一标识id guid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NRoleGuid {
      get { return nRoleGuid_; }
      set {
        nRoleGuid_ = value;
      }
    }

    /// <summary>Field number for the "bSuccessed" field.</summary>
    public const int BSuccessedFieldNumber = 4;
    private bool bSuccessed_;
    /// <summary>
    /// 是否成功
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BSuccessed {
      get { return bSuccessed_; }
      set {
        bSuccessed_ = value;
      }
    }

    /// <summary>Field number for the "nFailedReason" field.</summary>
    public const int NFailedReasonFieldNumber = 5;
    private global::DPLogin.RoleCreateFailedResult nFailedReason_ = 0;
    /// <summary>
    /// 如果失败，返回原因
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DPLogin.RoleCreateFailedResult NFailedReason {
      get { return nFailedReason_; }
      set {
        nFailedReason_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DPCreateRoleResultResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DPCreateRoleResultResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SzAccount != other.SzAccount) return false;
      if (SzRoleName != other.SzRoleName) return false;
      if (NRoleGuid != other.NRoleGuid) return false;
      if (BSuccessed != other.BSuccessed) return false;
      if (NFailedReason != other.NFailedReason) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SzAccount.Length != 0) hash ^= SzAccount.GetHashCode();
      if (SzRoleName.Length != 0) hash ^= SzRoleName.GetHashCode();
      if (NRoleGuid != 0UL) hash ^= NRoleGuid.GetHashCode();
      if (BSuccessed != false) hash ^= BSuccessed.GetHashCode();
      if (NFailedReason != 0) hash ^= NFailedReason.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SzAccount.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SzAccount);
      }
      if (SzRoleName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SzRoleName);
      }
      if (NRoleGuid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(NRoleGuid);
      }
      if (BSuccessed != false) {
        output.WriteRawTag(32);
        output.WriteBool(BSuccessed);
      }
      if (NFailedReason != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) NFailedReason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SzAccount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzAccount);
      }
      if (SzRoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzRoleName);
      }
      if (NRoleGuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NRoleGuid);
      }
      if (BSuccessed != false) {
        size += 1 + 1;
      }
      if (NFailedReason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NFailedReason);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DPCreateRoleResultResp other) {
      if (other == null) {
        return;
      }
      if (other.SzAccount.Length != 0) {
        SzAccount = other.SzAccount;
      }
      if (other.SzRoleName.Length != 0) {
        SzRoleName = other.SzRoleName;
      }
      if (other.NRoleGuid != 0UL) {
        NRoleGuid = other.NRoleGuid;
      }
      if (other.BSuccessed != false) {
        BSuccessed = other.BSuccessed;
      }
      if (other.NFailedReason != 0) {
        NFailedReason = other.NFailedReason;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SzAccount = input.ReadString();
            break;
          }
          case 18: {
            SzRoleName = input.ReadString();
            break;
          }
          case 24: {
            NRoleGuid = input.ReadUInt64();
            break;
          }
          case 32: {
            BSuccessed = input.ReadBool();
            break;
          }
          case 40: {
            nFailedReason_ = (global::DPLogin.RoleCreateFailedResult) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 踢掉客户端
  /// PTC_G2C_KICKOUTCLIENT
  /// </summary>
  public sealed partial class DPKickOutClientResp : pb::IMessage<DPKickOutClientResp> {
    private static readonly pb::MessageParser<DPKickOutClientResp> _parser = new pb::MessageParser<DPKickOutClientResp>(() => new DPKickOutClientResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DPKickOutClientResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DPLogin.DPLoginReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPKickOutClientResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPKickOutClientResp(DPKickOutClientResp other) : this() {
      eKickOut_ = other.eKickOut_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPKickOutClientResp Clone() {
      return new DPKickOutClientResp(this);
    }

    /// <summary>Field number for the "eKickOut" field.</summary>
    public const int EKickOutFieldNumber = 1;
    private global::DPLogin.KickOutClientResult eKickOut_ = 0;
    /// <summary>
    /// 踢掉原因
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DPLogin.KickOutClientResult EKickOut {
      get { return eKickOut_; }
      set {
        eKickOut_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DPKickOutClientResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DPKickOutClientResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EKickOut != other.EKickOut) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EKickOut != 0) hash ^= EKickOut.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EKickOut != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EKickOut);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EKickOut != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EKickOut);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DPKickOutClientResp other) {
      if (other == null) {
        return;
      }
      if (other.EKickOut != 0) {
        EKickOut = other.EKickOut;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            eKickOut_ = (global::DPLogin.KickOutClientResult) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 退出账号，到账号登录界面
  /// PTC_C2S_EXITACCOUNT
  /// </summary>
  public sealed partial class DPGSExitAccountReq : pb::IMessage<DPGSExitAccountReq> {
    private static readonly pb::MessageParser<DPGSExitAccountReq> _parser = new pb::MessageParser<DPGSExitAccountReq>(() => new DPGSExitAccountReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DPGSExitAccountReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DPLogin.DPLoginReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPGSExitAccountReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPGSExitAccountReq(DPGSExitAccountReq other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPGSExitAccountReq Clone() {
      return new DPGSExitAccountReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DPGSExitAccountReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DPGSExitAccountReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DPGSExitAccountReq other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// 退出角色，到选择角色界面
  /// PTC_C2S_EXITROLE
  /// </summary>
  public sealed partial class DPGSExitRoleReq : pb::IMessage<DPGSExitRoleReq> {
    private static readonly pb::MessageParser<DPGSExitRoleReq> _parser = new pb::MessageParser<DPGSExitRoleReq>(() => new DPGSExitRoleReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DPGSExitRoleReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DPLogin.DPLoginReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPGSExitRoleReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPGSExitRoleReq(DPGSExitRoleReq other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPGSExitRoleReq Clone() {
      return new DPGSExitRoleReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DPGSExitRoleReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DPGSExitRoleReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DPGSExitRoleReq other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
