// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: DeerGameBase.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DeerGameBase {

  /// <summary>Holder for reflection information generated from DeerGameBase.proto</summary>
  public static partial class DeerGameBaseReflection {

    #region Descriptor
    /// <summary>File descriptor for DeerGameBase.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DeerGameBaseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJEZWVyR2FtZUJhc2UucHJvdG8SDERlZXJHYW1lQmFzZSJvCgxQYWNrZXRI",
            "ZWFkZXISLAoKcGFja2V0VHlwZRgBIAEoDjIYLkRlZXJHYW1lQmFzZS5QYWNr",
            "ZXRUeXBlEgoKAmlkGAIgASgDEhQKDHBhY2tldExlbmd0aBgDIAEoAxIPCgdp",
            "c1ZhbGlkGAQgASgIIh0KC0NTSGVhcnRCZWF0Eg4KBmR3VGltZRgBIAEoAyId",
            "CgtTQ0hlYXJ0QmVhdBIOCgZkd1RpbWUYASABKAMinAEKDkRQUm9sZUJhc2VJ",
            "bmZvEhMKC3VsbFJvbGVHdWlkGAEgASgEEhIKCnN6Um9sZU5hbWUYAiABKAkS",
            "DgoGbkxldmVsGAMgASgFEhUKDW5Qcm9mZXNzaW9uSWQYBCABKAUSEwoLblBv",
            "cnRyYWl0SWQYBSABKAUSEwoLbkZpZ2h0UG93ZXIYBiABKAUSEAoIbkNsb3Ro",
            "SWQYByABKAUqQwoKUGFja2V0VHlwZRINCglVbmRlZmluZWQQABISCg5DbGll",
            "bnRUb1NlcnZlchABEhIKDlNlcnZlclRvQ2xpZW50EAJCJQojY29tLmdhbWUu",
            "anVoZS5zZXJ2ZXIucHJvdG9idWYucHJvdG9iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::DeerGameBase.PacketType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DeerGameBase.PacketHeader), global::DeerGameBase.PacketHeader.Parser, new[]{ "PacketType", "Id", "PacketLength", "IsValid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DeerGameBase.CSHeartBeat), global::DeerGameBase.CSHeartBeat.Parser, new[]{ "DwTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DeerGameBase.SCHeartBeat), global::DeerGameBase.SCHeartBeat.Parser, new[]{ "DwTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DeerGameBase.DPRoleBaseInfo), global::DeerGameBase.DPRoleBaseInfo.Parser, new[]{ "UllRoleGuid", "SzRoleName", "NLevel", "NProfessionId", "NPortraitId", "NFightPower", "NClothId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum PacketType {
    [pbr::OriginalName("Undefined")] Undefined = 0,
    [pbr::OriginalName("ClientToServer")] ClientToServer = 1,
    [pbr::OriginalName("ServerToClient")] ServerToClient = 2,
  }

  #endregion

  #region Messages
  public sealed partial class PacketHeader : pb::IMessage<PacketHeader> {
    private static readonly pb::MessageParser<PacketHeader> _parser = new pb::MessageParser<PacketHeader>(() => new PacketHeader());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PacketHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DeerGameBase.DeerGameBaseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PacketHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PacketHeader(PacketHeader other) : this() {
      packetType_ = other.packetType_;
      id_ = other.id_;
      packetLength_ = other.packetLength_;
      isValid_ = other.isValid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PacketHeader Clone() {
      return new PacketHeader(this);
    }

    /// <summary>Field number for the "packetType" field.</summary>
    public const int PacketTypeFieldNumber = 1;
    private global::DeerGameBase.PacketType packetType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DeerGameBase.PacketType PacketType {
      get { return packetType_; }
      set {
        packetType_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "packetLength" field.</summary>
    public const int PacketLengthFieldNumber = 3;
    private long packetLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PacketLength {
      get { return packetLength_; }
      set {
        packetLength_ = value;
      }
    }

    /// <summary>Field number for the "isValid" field.</summary>
    public const int IsValidFieldNumber = 4;
    private bool isValid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsValid {
      get { return isValid_; }
      set {
        isValid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PacketHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PacketHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PacketType != other.PacketType) return false;
      if (Id != other.Id) return false;
      if (PacketLength != other.PacketLength) return false;
      if (IsValid != other.IsValid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PacketType != 0) hash ^= PacketType.GetHashCode();
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (PacketLength != 0L) hash ^= PacketLength.GetHashCode();
      if (IsValid != false) hash ^= IsValid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PacketType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PacketType);
      }
      if (Id != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Id);
      }
      if (PacketLength != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(PacketLength);
      }
      if (IsValid != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsValid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PacketType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PacketType);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (PacketLength != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PacketLength);
      }
      if (IsValid != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PacketHeader other) {
      if (other == null) {
        return;
      }
      if (other.PacketType != 0) {
        PacketType = other.PacketType;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.PacketLength != 0L) {
        PacketLength = other.PacketLength;
      }
      if (other.IsValid != false) {
        IsValid = other.IsValid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            packetType_ = (global::DeerGameBase.PacketType) input.ReadEnum();
            break;
          }
          case 16: {
            Id = input.ReadInt64();
            break;
          }
          case 24: {
            PacketLength = input.ReadInt64();
            break;
          }
          case 32: {
            IsValid = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// PTC_C2S_HeartBeat
  /// </summary>
  public sealed partial class CSHeartBeat : pb::IMessage<CSHeartBeat> {
    private static readonly pb::MessageParser<CSHeartBeat> _parser = new pb::MessageParser<CSHeartBeat>(() => new CSHeartBeat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSHeartBeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DeerGameBase.DeerGameBaseReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSHeartBeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSHeartBeat(CSHeartBeat other) : this() {
      dwTime_ = other.dwTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSHeartBeat Clone() {
      return new CSHeartBeat(this);
    }

    /// <summary>Field number for the "dwTime" field.</summary>
    public const int DwTimeFieldNumber = 1;
    private long dwTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DwTime {
      get { return dwTime_; }
      set {
        dwTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSHeartBeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSHeartBeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DwTime != other.DwTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DwTime != 0L) hash ^= DwTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DwTime != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(DwTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DwTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DwTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSHeartBeat other) {
      if (other == null) {
        return;
      }
      if (other.DwTime != 0L) {
        DwTime = other.DwTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DwTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// PTC_S2C_HeartBeat
  /// </summary>
  public sealed partial class SCHeartBeat : pb::IMessage<SCHeartBeat> {
    private static readonly pb::MessageParser<SCHeartBeat> _parser = new pb::MessageParser<SCHeartBeat>(() => new SCHeartBeat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCHeartBeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DeerGameBase.DeerGameBaseReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCHeartBeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCHeartBeat(SCHeartBeat other) : this() {
      dwTime_ = other.dwTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCHeartBeat Clone() {
      return new SCHeartBeat(this);
    }

    /// <summary>Field number for the "dwTime" field.</summary>
    public const int DwTimeFieldNumber = 1;
    private long dwTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DwTime {
      get { return dwTime_; }
      set {
        dwTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCHeartBeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCHeartBeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DwTime != other.DwTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DwTime != 0L) hash ^= DwTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DwTime != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(DwTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DwTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DwTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCHeartBeat other) {
      if (other == null) {
        return;
      }
      if (other.DwTime != 0L) {
        DwTime = other.DwTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DwTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家角色基础数据数据
  /// </summary>
  public sealed partial class DPRoleBaseInfo : pb::IMessage<DPRoleBaseInfo> {
    private static readonly pb::MessageParser<DPRoleBaseInfo> _parser = new pb::MessageParser<DPRoleBaseInfo>(() => new DPRoleBaseInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DPRoleBaseInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DeerGameBase.DeerGameBaseReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPRoleBaseInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPRoleBaseInfo(DPRoleBaseInfo other) : this() {
      ullRoleGuid_ = other.ullRoleGuid_;
      szRoleName_ = other.szRoleName_;
      nLevel_ = other.nLevel_;
      nProfessionId_ = other.nProfessionId_;
      nPortraitId_ = other.nPortraitId_;
      nFightPower_ = other.nFightPower_;
      nClothId_ = other.nClothId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPRoleBaseInfo Clone() {
      return new DPRoleBaseInfo(this);
    }

    /// <summary>Field number for the "ullRoleGuid" field.</summary>
    public const int UllRoleGuidFieldNumber = 1;
    private ulong ullRoleGuid_;
    /// <summary>
    /// guid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UllRoleGuid {
      get { return ullRoleGuid_; }
      set {
        ullRoleGuid_ = value;
      }
    }

    /// <summary>Field number for the "szRoleName" field.</summary>
    public const int SzRoleNameFieldNumber = 2;
    private string szRoleName_ = "";
    /// <summary>
    /// 角色名    
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SzRoleName {
      get { return szRoleName_; }
      set {
        szRoleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nLevel" field.</summary>
    public const int NLevelFieldNumber = 3;
    private int nLevel_;
    /// <summary>
    /// 角色等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NLevel {
      get { return nLevel_; }
      set {
        nLevel_ = value;
      }
    }

    /// <summary>Field number for the "nProfessionId" field.</summary>
    public const int NProfessionIdFieldNumber = 4;
    private int nProfessionId_;
    /// <summary>
    /// 角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NProfessionId {
      get { return nProfessionId_; }
      set {
        nProfessionId_ = value;
      }
    }

    /// <summary>Field number for the "nPortraitId" field.</summary>
    public const int NPortraitIdFieldNumber = 5;
    private int nPortraitId_;
    /// <summary>
    /// 头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NPortraitId {
      get { return nPortraitId_; }
      set {
        nPortraitId_ = value;
      }
    }

    /// <summary>Field number for the "nFightPower" field.</summary>
    public const int NFightPowerFieldNumber = 6;
    private int nFightPower_;
    /// <summary>
    /// 战斗力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NFightPower {
      get { return nFightPower_; }
      set {
        nFightPower_ = value;
      }
    }

    /// <summary>Field number for the "nClothId" field.</summary>
    public const int NClothIdFieldNumber = 7;
    private int nClothId_;
    /// <summary>
    /// 时装ID       
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NClothId {
      get { return nClothId_; }
      set {
        nClothId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DPRoleBaseInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DPRoleBaseInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UllRoleGuid != other.UllRoleGuid) return false;
      if (SzRoleName != other.SzRoleName) return false;
      if (NLevel != other.NLevel) return false;
      if (NProfessionId != other.NProfessionId) return false;
      if (NPortraitId != other.NPortraitId) return false;
      if (NFightPower != other.NFightPower) return false;
      if (NClothId != other.NClothId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UllRoleGuid != 0UL) hash ^= UllRoleGuid.GetHashCode();
      if (SzRoleName.Length != 0) hash ^= SzRoleName.GetHashCode();
      if (NLevel != 0) hash ^= NLevel.GetHashCode();
      if (NProfessionId != 0) hash ^= NProfessionId.GetHashCode();
      if (NPortraitId != 0) hash ^= NPortraitId.GetHashCode();
      if (NFightPower != 0) hash ^= NFightPower.GetHashCode();
      if (NClothId != 0) hash ^= NClothId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UllRoleGuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UllRoleGuid);
      }
      if (SzRoleName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SzRoleName);
      }
      if (NLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NLevel);
      }
      if (NProfessionId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NProfessionId);
      }
      if (NPortraitId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NPortraitId);
      }
      if (NFightPower != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(NFightPower);
      }
      if (NClothId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(NClothId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UllRoleGuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UllRoleGuid);
      }
      if (SzRoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SzRoleName);
      }
      if (NLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NLevel);
      }
      if (NProfessionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NProfessionId);
      }
      if (NPortraitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NPortraitId);
      }
      if (NFightPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NFightPower);
      }
      if (NClothId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NClothId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DPRoleBaseInfo other) {
      if (other == null) {
        return;
      }
      if (other.UllRoleGuid != 0UL) {
        UllRoleGuid = other.UllRoleGuid;
      }
      if (other.SzRoleName.Length != 0) {
        SzRoleName = other.SzRoleName;
      }
      if (other.NLevel != 0) {
        NLevel = other.NLevel;
      }
      if (other.NProfessionId != 0) {
        NProfessionId = other.NProfessionId;
      }
      if (other.NPortraitId != 0) {
        NPortraitId = other.NPortraitId;
      }
      if (other.NFightPower != 0) {
        NFightPower = other.NFightPower;
      }
      if (other.NClothId != 0) {
        NClothId = other.NClothId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UllRoleGuid = input.ReadUInt64();
            break;
          }
          case 18: {
            SzRoleName = input.ReadString();
            break;
          }
          case 24: {
            NLevel = input.ReadInt32();
            break;
          }
          case 32: {
            NProfessionId = input.ReadInt32();
            break;
          }
          case 40: {
            NPortraitId = input.ReadInt32();
            break;
          }
          case 48: {
            NFightPower = input.ReadInt32();
            break;
          }
          case 56: {
            NClothId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
