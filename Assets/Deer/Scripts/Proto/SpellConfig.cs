// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Spell_Config.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ConfigData {

  /// <summary>Holder for reflection information generated from Spell_Config.proto</summary>
  public static partial class SpellConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for Spell_Config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpellConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJTcGVsbF9Db25maWcucHJvdG8SCkNvbmZpZ0RhdGEinAgKEkFjdGl2ZVNw",
            "ZWxsX0NvbmZpZxIKCgJpZBgBIAEoDRIKCgJjZBgCIAEoBRIMCgRjb3N0GAMg",
            "ASgFEhoKEnByZV9jb25kaXRpb25fdHlwZRgEIAEoCRIaChJwcmVfY29uZGl0",
            "aW9uX2RhdGEYBSABKAkSGwoTdHJpZ2dlcl9hbmltX2VmZmVjdBgGIAEoCRIX",
            "Cg90cmlnZ2VyX2Z1bmNfaWQYByADKAkSHQoVdHJpZ2dlcl9vbl9tZV9mdW5j",
            "X2lkGAggAygJEhEKCXJhbmdlX2VmZhgJIAEoCRIWCg5yYW5nZV9lZmZfdGlt",
            "ZRgKIAEoAhIYChB0ZWFtX2J1ZmZfZWZmZWN0GAsgAygJEhEKCWluZmVjdGlv",
            "bhgMIAMoAhIRCglidWxsZXRfaWQYDSABKAkSGwoTYnVsbGV0X2xhdW5jaF9k",
            "ZWxheRgOIAEoCRIVCg1idWxsZXRfZWZmZWN0GA8gASgJEhIKCmJ1bGxldF9o",
            "aXQYECABKAkSFQoNdHJpZ2dlcl9kZWxheRgRIAEoCRIYChBkYW1hZ2VfbnVt",
            "X2RlbGF5GBIgASgCEhQKDGNoYWluX2VmZmVjdBgTIAEoCRIYChBjaGFpbl9l",
            "ZmZlY3RfaGl0GBQgASgJEhMKC2NoYWluX3NwZWVkGBUgASgCEgsKA3NmeBgW",
            "IAEoCRIQCghzZnhfdGltZRgXIAEoAhISCgpjYW1fYnVsbGV0GBggASgNEhYK",
            "DmNhbV9idWxsZXRfaGl0GBkgASgNEhUKDWJ1bGxldF90YXJnZXQYGiABKAkS",
            "EwoLZGF0YV90YXJnZXQYGyABKAkSEwoLY2FtX2ZlYXR1cmUYHCABKA0SEwoL",
            "Y2FtX3RyaWdnZXIYHSABKA0SGAoQZGF0YV9wYXJhbV9zcGVlZBgeIAEoCRIZ",
            "ChF0cmlnZ2VyX2xpZmVfdGltZRgfIAEoAhIaChJ0cmlnZ2VyX2RlbHRhX3Rp",
            "bWUYICABKAISGwoTc3BlbGxfYW5pbV9jYW5fbW92ZRghIAMoCRIWCg5yYW5n",
            "ZV9lZmZfcG9zdBgiIAEoCRITCgtzcGVsbF9zb3VuZBgjIAEoCRIbChNzcGVs",
            "bF90cmlnZ2VyX3NvdW5kGCQgASgJEhEKCXNmeF9zb3VuZBglIAEoCRIcChRw",
            "cmVfY29uZGl0aW9uX2RhdGFleBgmIAEoCRIQCghwcmVfYW5pbRgnIAEoCRIX",
            "Cg9wcmVfYW5pbV9lZmZlY3QYKCABKAkSEQoJcG9zdF9hbmltGCkgASgJEhgK",
            "EHBvc3RfYW5pbV9lZmZlY3QYKiABKAkSEQoJcHVibGljX2NkGCsgASgCEhsK",
            "E3JhbmdlX2VmZl9wb3N0X3RpbWUYLCABKAISGAoQdGFyZ2V0bWF4X2dyb3d0",
            "aBgtIAEoCSJIChdBY3RpdmVTcGVsbF9Db25maWdfRGF0YRItCgVpdGVtcxgB",
            "IAMoCzIeLkNvbmZpZ0RhdGEuQWN0aXZlU3BlbGxfQ29uZmlnIogCChBTa2ls",
            "bERhdGFfQ29uZmlnEgoKAmlkGAEgASgNEhYKDm5hbWVfZ2xvYmFsX2lkGAIg",
            "ASgJEhUKDWRlc19nbG9iYWxfaWQYAyABKAkSDAoEaWNvbhgEIAEoCRIRCglh",
            "Y3RpdmVfaWQYBSABKA0SEgoKcGFzc2l2ZV9pZBgGIAEoDRIRCglsZXZlbF9t",
            "YXgYByABKAUSFgoOc3RyZW5ndGhfcmF0ZTEYCCABKAISFgoOc3RyZW5ndGhf",
            "cmF0ZTIYCSABKAISFgoOc3RyZW5ndGhfcmF0ZTMYCiABKAISEwoLZGVidWdf",
            "bGV2ZWwYCyABKAUSFAoMYWN0aXZlX2xldmVsGAwgASgFIkQKFVNraWxsRGF0",
            "YV9Db25maWdfRGF0YRIrCgVpdGVtcxgBIAMoCzIcLkNvbmZpZ0RhdGEuU2tp",
            "bGxEYXRhX0NvbmZpZyKZAwoVRGF0YUNoYW5nZUZ1bmNfQ29uZmlnEgoKAmlk",
            "GAEgASgNEgwKBHR5cGUYAiABKAkSCgoCazEYAyABKAISCgoCazIYBCABKAIS",
            "CgoCazMYBSABKAISEQoJZGF0YV90eXBlGAYgASgNEg4KBmRhdGFleBgHIAEo",
            "CRIPCgdkYXRhZXgyGAggASgJEhYKDmRhdGFfc3RhcnRfZWZmGAkgASgJEhAK",
            "CGRhdGFfZWZmGAogASgJEhQKDGRhdGFfZW5kX2VmZhgLIAEoCRIVCg1kYXRh",
            "X2VmZl9wcm9iGAwgASgCEhEKCWRhdGFfdGltZRgNIAEoAhIUCgxkYXRhX2hp",
            "dF9mbHkYDiABKAkSEwoLYnVmZl9uYXR1cmUYDyABKAUSDAoEaWNvbhgQIAEo",
            "CRIVCg1zdXBlcnBvc2l0aW9uGBEgASgFEhUKDWljb25fcG9zaXRpb24YEiAB",
            "KAkSDAoEbWFyaxgTIAEoCRIaChJtYXJrX2FmZmVjdGVkX3JhdGUYFCABKAUS",
            "EwoLZ3Jvd3RoX3Byb3AYFSABKAkiTgoaRGF0YUNoYW5nZUZ1bmNfQ29uZmln",
            "X0RhdGESMAoFaXRlbXMYASADKAsyIS5Db25maWdEYXRhLkRhdGFDaGFuZ2VG",
            "dW5jX0NvbmZpZyL9AgoTUGFzc2l2ZVNwZWxsX0NvbmZpZxIKCgJpZBgBIAEo",
            "DRIYChBhY3RpdmVfY29uZGl0aW9uGAIgASgJEhMKC2FjdGl2ZV90aW1lGAMg",
            "ASgCEhkKEXRyaWdnZXJfY29uZGl0aW9uGAQgASgJEh8KF3RyaWdnZXJfY29u",
            "ZGl0aW9uX3BhcmFtGAUgASgJEhsKE3RyaWdnZXJfcHJvYmFiaWxpdHkYBiAB",
            "KAISEgoKdHJpZ2dlcl9jZBgHIAEoBRIWCg5jb21tYW5kX3RhcmdldBgIIAEo",
            "CRIPCgdjb21tYW5kGAkgASgJEgwKBGRhdGEYCiABKA0SGAoQb3ZlcnJpZGVf",
            "ZGF0YV9rMRgLIAEoBRIYChBvdmVycmlkZV9kYXRhX2syGAwgASgFEhgKEG92",
            "ZXJyaWRlX2RhdGFfazMYDSABKAUSGgoSb3ZlcnJpZGVfZGF0YV90aW1lGA4g",
            "ASgFEg4KBmVmZmVjdBgPIAEoCRINCgVzY29yZRgQIAEoBSJKChhQYXNzaXZl",
            "U3BlbGxfQ29uZmlnX0RhdGESLgoFaXRlbXMYASADKAsyHy5Db25maWdEYXRh",
            "LlBhc3NpdmVTcGVsbF9Db25maWci3AIKE0NyZWF0ZUJ1bGxldF9Db25maWcS",
            "CgoCaWQYASABKA0SDQoFcG9pbnQYAiABKAkSFQoNaG9yaXpvbl9zcGVlZBgD",
            "IAEoAhIYChBob3Jpem9udGFsX3JhbmdlGAQgASgCEhUKDXRyYWNlX21pc3Np",
            "bGUYBSABKAISFwoPcGFyYWJvbGFfaGVpZ2h0GAYgASgCEhQKDHBhcmFib2xh",
            "X3NyYxgHIAMoAhIXCg9wYXJhYm9sYV9jdHJsXzEYCCADKAISFwoPcGFyYWJv",
            "bGFfY3RybF8yGAkgAygCEhQKDHBhcmFib2xhX2RlcxgKIAMoAhIZChFoZWln",
            "aHRfb2Zmc2V0X21pbhgLIAEoAhIZChFoZWlnaHRfb2Zmc2V0X21heBgMIAEo",
            "AhIYChBkZXNfcmFuZ2Vfb2Zmc2V0GA0gASgCEhsKE2JhbGxpc3RpY19jYWxj",
            "X3JhdGUYDiABKAIiSgoYQ3JlYXRlQnVsbGV0X0NvbmZpZ19EYXRhEi4KBWl0",
            "ZW1zGAEgAygLMh8uQ29uZmlnRGF0YS5DcmVhdGVCdWxsZXRfQ29uZmlnIpYB",
            "ChJTa2lsbF9MZXZlbF9Db25maWcSCgoCaWQYASABKA0SEAoIc2tpbGxfaWQY",
            "AiABKA0SEwoLbGV2ZWxfc3RhcnQYAyABKAUSEQoJbGV2ZWxfZW5kGAQgASgF",
            "EhEKCW1hdGVyaWFscxgFIAMoDRITCgtsZXZlbF9saW1pdBgGIAEoBRISCgpy",
            "YW5rX2xpbWl0GAcgASgFIkgKF1NraWxsX0xldmVsX0NvbmZpZ19EYXRhEi0K",
            "BWl0ZW1zGAEgAygLMh4uQ29uZmlnRGF0YS5Ta2lsbF9MZXZlbF9Db25maWdC",
            "JQojY29tLmdhbWUuanVoZS5zZXJ2ZXIucHJvdG9idWYucHJvdG9iBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.ActiveSpell_Config), global::ConfigData.ActiveSpell_Config.Parser, new[]{ "Id", "Cd", "Cost", "PreConditionType", "PreConditionData", "TriggerAnimEffect", "TriggerFuncId", "TriggerOnMeFuncId", "RangeEff", "RangeEffTime", "TeamBuffEffect", "Infection", "BulletId", "BulletLaunchDelay", "BulletEffect", "BulletHit", "TriggerDelay", "DamageNumDelay", "ChainEffect", "ChainEffectHit", "ChainSpeed", "Sfx", "SfxTime", "CamBullet", "CamBulletHit", "BulletTarget", "DataTarget", "CamFeature", "CamTrigger", "DataParamSpeed", "TriggerLifeTime", "TriggerDeltaTime", "SpellAnimCanMove", "RangeEffPost", "SpellSound", "SpellTriggerSound", "SfxSound", "PreConditionDataex", "PreAnim", "PreAnimEffect", "PostAnim", "PostAnimEffect", "PublicCd", "RangeEffPostTime", "TargetmaxGrowth" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.ActiveSpell_Config_Data), global::ConfigData.ActiveSpell_Config_Data.Parser, new[]{ "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.SkillData_Config), global::ConfigData.SkillData_Config.Parser, new[]{ "Id", "NameGlobalId", "DesGlobalId", "Icon", "ActiveId", "PassiveId", "LevelMax", "StrengthRate1", "StrengthRate2", "StrengthRate3", "DebugLevel", "ActiveLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.SkillData_Config_Data), global::ConfigData.SkillData_Config_Data.Parser, new[]{ "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.DataChangeFunc_Config), global::ConfigData.DataChangeFunc_Config.Parser, new[]{ "Id", "Type", "K1", "K2", "K3", "DataType", "Dataex", "Dataex2", "DataStartEff", "DataEff", "DataEndEff", "DataEffProb", "DataTime", "DataHitFly", "BuffNature", "Icon", "Superposition", "IconPosition", "Mark", "MarkAffectedRate", "GrowthProp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.DataChangeFunc_Config_Data), global::ConfigData.DataChangeFunc_Config_Data.Parser, new[]{ "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.PassiveSpell_Config), global::ConfigData.PassiveSpell_Config.Parser, new[]{ "Id", "ActiveCondition", "ActiveTime", "TriggerCondition", "TriggerConditionParam", "TriggerProbability", "TriggerCd", "CommandTarget", "Command", "Data", "OverrideDataK1", "OverrideDataK2", "OverrideDataK3", "OverrideDataTime", "Effect", "Score" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.PassiveSpell_Config_Data), global::ConfigData.PassiveSpell_Config_Data.Parser, new[]{ "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.CreateBullet_Config), global::ConfigData.CreateBullet_Config.Parser, new[]{ "Id", "Point", "HorizonSpeed", "HorizontalRange", "TraceMissile", "ParabolaHeight", "ParabolaSrc", "ParabolaCtrl1", "ParabolaCtrl2", "ParabolaDes", "HeightOffsetMin", "HeightOffsetMax", "DesRangeOffset", "BallisticCalcRate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.CreateBullet_Config_Data), global::ConfigData.CreateBullet_Config_Data.Parser, new[]{ "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.Skill_Level_Config), global::ConfigData.Skill_Level_Config.Parser, new[]{ "Id", "SkillId", "LevelStart", "LevelEnd", "Materials", "LevelLimit", "RankLimit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.Skill_Level_Config_Data), global::ConfigData.Skill_Level_Config_Data.Parser, new[]{ "Items" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ActiveSpell_Config : pb::IMessage<ActiveSpell_Config> {
    private static readonly pb::MessageParser<ActiveSpell_Config> _parser = new pb::MessageParser<ActiveSpell_Config>(() => new ActiveSpell_Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActiveSpell_Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.SpellConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActiveSpell_Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActiveSpell_Config(ActiveSpell_Config other) : this() {
      id_ = other.id_;
      cd_ = other.cd_;
      cost_ = other.cost_;
      preConditionType_ = other.preConditionType_;
      preConditionData_ = other.preConditionData_;
      triggerAnimEffect_ = other.triggerAnimEffect_;
      triggerFuncId_ = other.triggerFuncId_.Clone();
      triggerOnMeFuncId_ = other.triggerOnMeFuncId_.Clone();
      rangeEff_ = other.rangeEff_;
      rangeEffTime_ = other.rangeEffTime_;
      teamBuffEffect_ = other.teamBuffEffect_.Clone();
      infection_ = other.infection_.Clone();
      bulletId_ = other.bulletId_;
      bulletLaunchDelay_ = other.bulletLaunchDelay_;
      bulletEffect_ = other.bulletEffect_;
      bulletHit_ = other.bulletHit_;
      triggerDelay_ = other.triggerDelay_;
      damageNumDelay_ = other.damageNumDelay_;
      chainEffect_ = other.chainEffect_;
      chainEffectHit_ = other.chainEffectHit_;
      chainSpeed_ = other.chainSpeed_;
      sfx_ = other.sfx_;
      sfxTime_ = other.sfxTime_;
      camBullet_ = other.camBullet_;
      camBulletHit_ = other.camBulletHit_;
      bulletTarget_ = other.bulletTarget_;
      dataTarget_ = other.dataTarget_;
      camFeature_ = other.camFeature_;
      camTrigger_ = other.camTrigger_;
      dataParamSpeed_ = other.dataParamSpeed_;
      triggerLifeTime_ = other.triggerLifeTime_;
      triggerDeltaTime_ = other.triggerDeltaTime_;
      spellAnimCanMove_ = other.spellAnimCanMove_.Clone();
      rangeEffPost_ = other.rangeEffPost_;
      spellSound_ = other.spellSound_;
      spellTriggerSound_ = other.spellTriggerSound_;
      sfxSound_ = other.sfxSound_;
      preConditionDataex_ = other.preConditionDataex_;
      preAnim_ = other.preAnim_;
      preAnimEffect_ = other.preAnimEffect_;
      postAnim_ = other.postAnim_;
      postAnimEffect_ = other.postAnimEffect_;
      publicCd_ = other.publicCd_;
      rangeEffPostTime_ = other.rangeEffPostTime_;
      targetmaxGrowth_ = other.targetmaxGrowth_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActiveSpell_Config Clone() {
      return new ActiveSpell_Config(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///* 唯一标识 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "cd" field.</summary>
    public const int CdFieldNumber = 2;
    private int cd_;
    /// <summary>
    ///* 冷却 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cd {
      get { return cd_; }
      set {
        cd_ = value;
      }
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 3;
    private int cost_;
    /// <summary>
    ///* 能量消耗 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    /// <summary>Field number for the "pre_condition_type" field.</summary>
    public const int PreConditionTypeFieldNumber = 4;
    private string preConditionType_ = "";
    /// <summary>
    ///* 技能释放条件 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PreConditionType {
      get { return preConditionType_; }
      set {
        preConditionType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pre_condition_data" field.</summary>
    public const int PreConditionDataFieldNumber = 5;
    private string preConditionData_ = "";
    /// <summary>
    ///* 技能释放条件参数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PreConditionData {
      get { return preConditionData_; }
      set {
        preConditionData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trigger_anim_effect" field.</summary>
    public const int TriggerAnimEffectFieldNumber = 6;
    private string triggerAnimEffect_ = "";
    /// <summary>
    ///* 【特效名-延迟到动画的第几帧触发特效】触发阶段动画特效(-X表示第几帧触发该特效) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TriggerAnimEffect {
      get { return triggerAnimEffect_; }
      set {
        triggerAnimEffect_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trigger_func_id" field.</summary>
    public const int TriggerFuncIdFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_triggerFuncId_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> triggerFuncId_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///* 【id1-id2..|id3..】触发的功能索引（id1,id2|id3,id4) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> TriggerFuncId {
      get { return triggerFuncId_; }
    }

    /// <summary>Field number for the "trigger_on_me_func_id" field.</summary>
    public const int TriggerOnMeFuncIdFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_triggerOnMeFuncId_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> triggerOnMeFuncId_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///* 触发技能对目标产生效果同时对自身再触发X个效果，每个效果使用|分割 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> TriggerOnMeFuncId {
      get { return triggerOnMeFuncId_; }
    }

    /// <summary>Field number for the "range_eff" field.</summary>
    public const int RangeEffFieldNumber = 9;
    private string rangeEff_ = "";
    /// <summary>
    ///* 技能范围特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RangeEff {
      get { return rangeEff_; }
      set {
        rangeEff_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "range_eff_time" field.</summary>
    public const int RangeEffTimeFieldNumber = 10;
    private float rangeEffTime_;
    /// <summary>
    ///* 技能范围持续时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RangeEffTime {
      get { return rangeEffTime_; }
      set {
        rangeEffTime_ = value;
      }
    }

    /// <summary>Field number for the "team_buff_effect" field.</summary>
    public const int TeamBuffEffectFieldNumber = 11;
    private static readonly pb::FieldCodec<string> _repeated_teamBuffEffect_codec
        = pb::FieldCodec.ForString(90);
    private readonly pbc::RepeatedField<string> teamBuffEffect_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///* 队伍的buff特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> TeamBuffEffect {
      get { return teamBuffEffect_; }
    }

    /// <summary>Field number for the "infection" field.</summary>
    public const int InfectionFieldNumber = 12;
    private static readonly pb::FieldCodec<float> _repeated_infection_codec
        = pb::FieldCodec.ForFloat(98);
    private readonly pbc::RepeatedField<float> infection_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///* 传染时间间隔|传染持续时间|传染半径|每次传染最大人数|最大传播代数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Infection {
      get { return infection_; }
    }

    /// <summary>Field number for the "bullet_id" field.</summary>
    public const int BulletIdFieldNumber = 13;
    private string bulletId_ = "";
    /// <summary>
    ///* 子弹id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BulletId {
      get { return bulletId_; }
      set {
        bulletId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bullet_launch_delay" field.</summary>
    public const int BulletLaunchDelayFieldNumber = 14;
    private string bulletLaunchDelay_ = "";
    /// <summary>
    ///* 子弹延迟释放时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BulletLaunchDelay {
      get { return bulletLaunchDelay_; }
      set {
        bulletLaunchDelay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bullet_effect" field.</summary>
    public const int BulletEffectFieldNumber = 15;
    private string bulletEffect_ = "";
    /// <summary>
    ///* 子弹飞行特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BulletEffect {
      get { return bulletEffect_; }
      set {
        bulletEffect_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bullet_hit" field.</summary>
    public const int BulletHitFieldNumber = 16;
    private string bulletHit_ = "";
    /// <summary>
    ///* 子弹命中特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BulletHit {
      get { return bulletHit_; }
      set {
        bulletHit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trigger_delay" field.</summary>
    public const int TriggerDelayFieldNumber = 17;
    private string triggerDelay_ = "";
    /// <summary>
    ///* 延迟触发效果时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TriggerDelay {
      get { return triggerDelay_; }
      set {
        triggerDelay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "damage_num_delay" field.</summary>
    public const int DamageNumDelayFieldNumber = 18;
    private float damageNumDelay_;
    /// <summary>
    ///* 伤害数字在hit后延迟x秒触发 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DamageNumDelay {
      get { return damageNumDelay_; }
      set {
        damageNumDelay_ = value;
      }
    }

    /// <summary>Field number for the "chain_effect" field.</summary>
    public const int ChainEffectFieldNumber = 19;
    private string chainEffect_ = "";
    /// <summary>
    ///* 连锁特效名（用于士兵上的表现） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChainEffect {
      get { return chainEffect_; }
      set {
        chainEffect_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "chain_effect_hit" field.</summary>
    public const int ChainEffectHitFieldNumber = 20;
    private string chainEffectHit_ = "";
    /// <summary>
    ///* 连锁命中特效（用于士兵上的表现） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChainEffectHit {
      get { return chainEffectHit_; }
      set {
        chainEffectHit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "chain_speed" field.</summary>
    public const int ChainSpeedFieldNumber = 21;
    private float chainSpeed_;
    /// <summary>
    ///* 连锁特效的速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ChainSpeed {
      get { return chainSpeed_; }
      set {
        chainSpeed_ = value;
      }
    }

    /// <summary>Field number for the "sfx" field.</summary>
    public const int SfxFieldNumber = 22;
    private string sfx_ = "";
    /// <summary>
    ///* 特写场景名 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sfx {
      get { return sfx_; }
      set {
        sfx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sfx_time" field.</summary>
    public const int SfxTimeFieldNumber = 23;
    private float sfxTime_;
    /// <summary>
    ///* 持续时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SfxTime {
      get { return sfxTime_; }
      set {
        sfxTime_ = value;
      }
    }

    /// <summary>Field number for the "cam_bullet" field.</summary>
    public const int CamBulletFieldNumber = 24;
    private uint camBullet_;
    /// <summary>
    ///* 子弹跟随镜头 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CamBullet {
      get { return camBullet_; }
      set {
        camBullet_ = value;
      }
    }

    /// <summary>Field number for the "cam_bullet_hit" field.</summary>
    public const int CamBulletHitFieldNumber = 25;
    private uint camBulletHit_;
    /// <summary>
    ///* 子弹爆炸镜头 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CamBulletHit {
      get { return camBulletHit_; }
      set {
        camBulletHit_ = value;
      }
    }

    /// <summary>Field number for the "bullet_target" field.</summary>
    public const int BulletTargetFieldNumber = 26;
    private string bulletTarget_ = "";
    /// <summary>
    ///* 子弹目标 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BulletTarget {
      get { return bulletTarget_; }
      set {
        bulletTarget_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data_target" field.</summary>
    public const int DataTargetFieldNumber = 27;
    private string dataTarget_ = "";
    /// <summary>
    ///* 子弹目标选中后影响的范围 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataTarget {
      get { return dataTarget_; }
      set {
        dataTarget_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cam_feature" field.</summary>
    public const int CamFeatureFieldNumber = 28;
    private uint camFeature_;
    /// <summary>
    ///* 特写镜头 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CamFeature {
      get { return camFeature_; }
      set {
        camFeature_ = value;
      }
    }

    /// <summary>Field number for the "cam_trigger" field.</summary>
    public const int CamTriggerFieldNumber = 29;
    private uint camTrigger_;
    /// <summary>
    ///* 触发镜头 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CamTrigger {
      get { return camTrigger_; }
      set {
        camTrigger_ = value;
      }
    }

    /// <summary>Field number for the "data_param_speed" field.</summary>
    public const int DataParamSpeedFieldNumber = 30;
    private string dataParamSpeed_ = "";
    /// <summary>
    ///*  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataParamSpeed {
      get { return dataParamSpeed_; }
      set {
        dataParamSpeed_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trigger_life_time" field.</summary>
    public const int TriggerLifeTimeFieldNumber = 31;
    private float triggerLifeTime_;
    /// <summary>
    ///* 触发效果的生命周期 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TriggerLifeTime {
      get { return triggerLifeTime_; }
      set {
        triggerLifeTime_ = value;
      }
    }

    /// <summary>Field number for the "trigger_delta_time" field.</summary>
    public const int TriggerDeltaTimeFieldNumber = 32;
    private float triggerDeltaTime_;
    /// <summary>
    ///* 触发效果的时间间隔 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TriggerDeltaTime {
      get { return triggerDeltaTime_; }
      set {
        triggerDeltaTime_ = value;
      }
    }

    /// <summary>Field number for the "spell_anim_can_move" field.</summary>
    public const int SpellAnimCanMoveFieldNumber = 33;
    private static readonly pb::FieldCodec<string> _repeated_spellAnimCanMove_codec
        = pb::FieldCodec.ForString(266);
    private readonly pbc::RepeatedField<string> spellAnimCanMove_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///* 技能动画中是否可动 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> SpellAnimCanMove {
      get { return spellAnimCanMove_; }
    }

    /// <summary>Field number for the "range_eff_post" field.</summary>
    public const int RangeEffPostFieldNumber = 34;
    private string rangeEffPost_ = "";
    /// <summary>
    ///* 技能范围特效后段 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RangeEffPost {
      get { return rangeEffPost_; }
      set {
        rangeEffPost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spell_sound" field.</summary>
    public const int SpellSoundFieldNumber = 35;
    private string spellSound_ = "";
    /// <summary>
    ///* 技能释放音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpellSound {
      get { return spellSound_; }
      set {
        spellSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spell_trigger_sound" field.</summary>
    public const int SpellTriggerSoundFieldNumber = 36;
    private string spellTriggerSound_ = "";
    /// <summary>
    ///* 技能击中音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpellTriggerSound {
      get { return spellTriggerSound_; }
      set {
        spellTriggerSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sfx_sound" field.</summary>
    public const int SfxSoundFieldNumber = 37;
    private string sfxSound_ = "";
    /// <summary>
    ///* 特写音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SfxSound {
      get { return sfxSound_; }
      set {
        sfxSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pre_condition_dataex" field.</summary>
    public const int PreConditionDataexFieldNumber = 38;
    private string preConditionDataex_ = "";
    /// <summary>
    ///* 技能释放条件额外数据 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PreConditionDataex {
      get { return preConditionDataex_; }
      set {
        preConditionDataex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pre_anim" field.</summary>
    public const int PreAnimFieldNumber = 39;
    private string preAnim_ = "";
    /// <summary>
    ///* 预备阶段动画名 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PreAnim {
      get { return preAnim_; }
      set {
        preAnim_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pre_anim_effect" field.</summary>
    public const int PreAnimEffectFieldNumber = 40;
    private string preAnimEffect_ = "";
    /// <summary>
    ///* 预备阶段动画特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PreAnimEffect {
      get { return preAnimEffect_; }
      set {
        preAnimEffect_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "post_anim" field.</summary>
    public const int PostAnimFieldNumber = 41;
    private string postAnim_ = "";
    /// <summary>
    ///* 收尾阶段动画名 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PostAnim {
      get { return postAnim_; }
      set {
        postAnim_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "post_anim_effect" field.</summary>
    public const int PostAnimEffectFieldNumber = 42;
    private string postAnimEffect_ = "";
    /// <summary>
    ///* 收尾阶段动画特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PostAnimEffect {
      get { return postAnimEffect_; }
      set {
        postAnimEffect_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "public_cd" field.</summary>
    public const int PublicCdFieldNumber = 43;
    private float publicCd_;
    /// <summary>
    ///* 公共冷却 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PublicCd {
      get { return publicCd_; }
      set {
        publicCd_ = value;
      }
    }

    /// <summary>Field number for the "range_eff_post_time" field.</summary>
    public const int RangeEffPostTimeFieldNumber = 44;
    private float rangeEffPostTime_;
    /// <summary>
    ///* 技能范围特效后段时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RangeEffPostTime {
      get { return rangeEffPostTime_; }
      set {
        rangeEffPostTime_ = value;
      }
    }

    /// <summary>Field number for the "targetmax_growth" field.</summary>
    public const int TargetmaxGrowthFieldNumber = 45;
    private string targetmaxGrowth_ = "";
    /// <summary>
    ///* 技能影响目标数量成长
    ///A2(A1的基础值在前面配置了，B1B2在这里不用，默认为0，只和等级成长） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetmaxGrowth {
      get { return targetmaxGrowth_; }
      set {
        targetmaxGrowth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActiveSpell_Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActiveSpell_Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Cd != other.Cd) return false;
      if (Cost != other.Cost) return false;
      if (PreConditionType != other.PreConditionType) return false;
      if (PreConditionData != other.PreConditionData) return false;
      if (TriggerAnimEffect != other.TriggerAnimEffect) return false;
      if(!triggerFuncId_.Equals(other.triggerFuncId_)) return false;
      if(!triggerOnMeFuncId_.Equals(other.triggerOnMeFuncId_)) return false;
      if (RangeEff != other.RangeEff) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RangeEffTime, other.RangeEffTime)) return false;
      if(!teamBuffEffect_.Equals(other.teamBuffEffect_)) return false;
      if(!infection_.Equals(other.infection_)) return false;
      if (BulletId != other.BulletId) return false;
      if (BulletLaunchDelay != other.BulletLaunchDelay) return false;
      if (BulletEffect != other.BulletEffect) return false;
      if (BulletHit != other.BulletHit) return false;
      if (TriggerDelay != other.TriggerDelay) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DamageNumDelay, other.DamageNumDelay)) return false;
      if (ChainEffect != other.ChainEffect) return false;
      if (ChainEffectHit != other.ChainEffectHit) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChainSpeed, other.ChainSpeed)) return false;
      if (Sfx != other.Sfx) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SfxTime, other.SfxTime)) return false;
      if (CamBullet != other.CamBullet) return false;
      if (CamBulletHit != other.CamBulletHit) return false;
      if (BulletTarget != other.BulletTarget) return false;
      if (DataTarget != other.DataTarget) return false;
      if (CamFeature != other.CamFeature) return false;
      if (CamTrigger != other.CamTrigger) return false;
      if (DataParamSpeed != other.DataParamSpeed) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TriggerLifeTime, other.TriggerLifeTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TriggerDeltaTime, other.TriggerDeltaTime)) return false;
      if(!spellAnimCanMove_.Equals(other.spellAnimCanMove_)) return false;
      if (RangeEffPost != other.RangeEffPost) return false;
      if (SpellSound != other.SpellSound) return false;
      if (SpellTriggerSound != other.SpellTriggerSound) return false;
      if (SfxSound != other.SfxSound) return false;
      if (PreConditionDataex != other.PreConditionDataex) return false;
      if (PreAnim != other.PreAnim) return false;
      if (PreAnimEffect != other.PreAnimEffect) return false;
      if (PostAnim != other.PostAnim) return false;
      if (PostAnimEffect != other.PostAnimEffect) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PublicCd, other.PublicCd)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RangeEffPostTime, other.RangeEffPostTime)) return false;
      if (TargetmaxGrowth != other.TargetmaxGrowth) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Cd != 0) hash ^= Cd.GetHashCode();
      if (Cost != 0) hash ^= Cost.GetHashCode();
      if (PreConditionType.Length != 0) hash ^= PreConditionType.GetHashCode();
      if (PreConditionData.Length != 0) hash ^= PreConditionData.GetHashCode();
      if (TriggerAnimEffect.Length != 0) hash ^= TriggerAnimEffect.GetHashCode();
      hash ^= triggerFuncId_.GetHashCode();
      hash ^= triggerOnMeFuncId_.GetHashCode();
      if (RangeEff.Length != 0) hash ^= RangeEff.GetHashCode();
      if (RangeEffTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RangeEffTime);
      hash ^= teamBuffEffect_.GetHashCode();
      hash ^= infection_.GetHashCode();
      if (BulletId.Length != 0) hash ^= BulletId.GetHashCode();
      if (BulletLaunchDelay.Length != 0) hash ^= BulletLaunchDelay.GetHashCode();
      if (BulletEffect.Length != 0) hash ^= BulletEffect.GetHashCode();
      if (BulletHit.Length != 0) hash ^= BulletHit.GetHashCode();
      if (TriggerDelay.Length != 0) hash ^= TriggerDelay.GetHashCode();
      if (DamageNumDelay != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DamageNumDelay);
      if (ChainEffect.Length != 0) hash ^= ChainEffect.GetHashCode();
      if (ChainEffectHit.Length != 0) hash ^= ChainEffectHit.GetHashCode();
      if (ChainSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChainSpeed);
      if (Sfx.Length != 0) hash ^= Sfx.GetHashCode();
      if (SfxTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SfxTime);
      if (CamBullet != 0) hash ^= CamBullet.GetHashCode();
      if (CamBulletHit != 0) hash ^= CamBulletHit.GetHashCode();
      if (BulletTarget.Length != 0) hash ^= BulletTarget.GetHashCode();
      if (DataTarget.Length != 0) hash ^= DataTarget.GetHashCode();
      if (CamFeature != 0) hash ^= CamFeature.GetHashCode();
      if (CamTrigger != 0) hash ^= CamTrigger.GetHashCode();
      if (DataParamSpeed.Length != 0) hash ^= DataParamSpeed.GetHashCode();
      if (TriggerLifeTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TriggerLifeTime);
      if (TriggerDeltaTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TriggerDeltaTime);
      hash ^= spellAnimCanMove_.GetHashCode();
      if (RangeEffPost.Length != 0) hash ^= RangeEffPost.GetHashCode();
      if (SpellSound.Length != 0) hash ^= SpellSound.GetHashCode();
      if (SpellTriggerSound.Length != 0) hash ^= SpellTriggerSound.GetHashCode();
      if (SfxSound.Length != 0) hash ^= SfxSound.GetHashCode();
      if (PreConditionDataex.Length != 0) hash ^= PreConditionDataex.GetHashCode();
      if (PreAnim.Length != 0) hash ^= PreAnim.GetHashCode();
      if (PreAnimEffect.Length != 0) hash ^= PreAnimEffect.GetHashCode();
      if (PostAnim.Length != 0) hash ^= PostAnim.GetHashCode();
      if (PostAnimEffect.Length != 0) hash ^= PostAnimEffect.GetHashCode();
      if (PublicCd != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PublicCd);
      if (RangeEffPostTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RangeEffPostTime);
      if (TargetmaxGrowth.Length != 0) hash ^= TargetmaxGrowth.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Cd != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Cd);
      }
      if (Cost != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Cost);
      }
      if (PreConditionType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PreConditionType);
      }
      if (PreConditionData.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PreConditionData);
      }
      if (TriggerAnimEffect.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(TriggerAnimEffect);
      }
      triggerFuncId_.WriteTo(output, _repeated_triggerFuncId_codec);
      triggerOnMeFuncId_.WriteTo(output, _repeated_triggerOnMeFuncId_codec);
      if (RangeEff.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(RangeEff);
      }
      if (RangeEffTime != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(RangeEffTime);
      }
      teamBuffEffect_.WriteTo(output, _repeated_teamBuffEffect_codec);
      infection_.WriteTo(output, _repeated_infection_codec);
      if (BulletId.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(BulletId);
      }
      if (BulletLaunchDelay.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(BulletLaunchDelay);
      }
      if (BulletEffect.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(BulletEffect);
      }
      if (BulletHit.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(BulletHit);
      }
      if (TriggerDelay.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(TriggerDelay);
      }
      if (DamageNumDelay != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(DamageNumDelay);
      }
      if (ChainEffect.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(ChainEffect);
      }
      if (ChainEffectHit.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(ChainEffectHit);
      }
      if (ChainSpeed != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(ChainSpeed);
      }
      if (Sfx.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(Sfx);
      }
      if (SfxTime != 0F) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(SfxTime);
      }
      if (CamBullet != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(CamBullet);
      }
      if (CamBulletHit != 0) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(CamBulletHit);
      }
      if (BulletTarget.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(BulletTarget);
      }
      if (DataTarget.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(DataTarget);
      }
      if (CamFeature != 0) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(CamFeature);
      }
      if (CamTrigger != 0) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(CamTrigger);
      }
      if (DataParamSpeed.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(DataParamSpeed);
      }
      if (TriggerLifeTime != 0F) {
        output.WriteRawTag(253, 1);
        output.WriteFloat(TriggerLifeTime);
      }
      if (TriggerDeltaTime != 0F) {
        output.WriteRawTag(133, 2);
        output.WriteFloat(TriggerDeltaTime);
      }
      spellAnimCanMove_.WriteTo(output, _repeated_spellAnimCanMove_codec);
      if (RangeEffPost.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(RangeEffPost);
      }
      if (SpellSound.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(SpellSound);
      }
      if (SpellTriggerSound.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(SpellTriggerSound);
      }
      if (SfxSound.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(SfxSound);
      }
      if (PreConditionDataex.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteString(PreConditionDataex);
      }
      if (PreAnim.Length != 0) {
        output.WriteRawTag(186, 2);
        output.WriteString(PreAnim);
      }
      if (PreAnimEffect.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(PreAnimEffect);
      }
      if (PostAnim.Length != 0) {
        output.WriteRawTag(202, 2);
        output.WriteString(PostAnim);
      }
      if (PostAnimEffect.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(PostAnimEffect);
      }
      if (PublicCd != 0F) {
        output.WriteRawTag(221, 2);
        output.WriteFloat(PublicCd);
      }
      if (RangeEffPostTime != 0F) {
        output.WriteRawTag(229, 2);
        output.WriteFloat(RangeEffPostTime);
      }
      if (TargetmaxGrowth.Length != 0) {
        output.WriteRawTag(234, 2);
        output.WriteString(TargetmaxGrowth);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Cd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cd);
      }
      if (Cost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
      }
      if (PreConditionType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PreConditionType);
      }
      if (PreConditionData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PreConditionData);
      }
      if (TriggerAnimEffect.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TriggerAnimEffect);
      }
      size += triggerFuncId_.CalculateSize(_repeated_triggerFuncId_codec);
      size += triggerOnMeFuncId_.CalculateSize(_repeated_triggerOnMeFuncId_codec);
      if (RangeEff.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RangeEff);
      }
      if (RangeEffTime != 0F) {
        size += 1 + 4;
      }
      size += teamBuffEffect_.CalculateSize(_repeated_teamBuffEffect_codec);
      size += infection_.CalculateSize(_repeated_infection_codec);
      if (BulletId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BulletId);
      }
      if (BulletLaunchDelay.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BulletLaunchDelay);
      }
      if (BulletEffect.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BulletEffect);
      }
      if (BulletHit.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BulletHit);
      }
      if (TriggerDelay.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TriggerDelay);
      }
      if (DamageNumDelay != 0F) {
        size += 2 + 4;
      }
      if (ChainEffect.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ChainEffect);
      }
      if (ChainEffectHit.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ChainEffectHit);
      }
      if (ChainSpeed != 0F) {
        size += 2 + 4;
      }
      if (Sfx.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Sfx);
      }
      if (SfxTime != 0F) {
        size += 2 + 4;
      }
      if (CamBullet != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CamBullet);
      }
      if (CamBulletHit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CamBulletHit);
      }
      if (BulletTarget.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BulletTarget);
      }
      if (DataTarget.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DataTarget);
      }
      if (CamFeature != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CamFeature);
      }
      if (CamTrigger != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CamTrigger);
      }
      if (DataParamSpeed.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DataParamSpeed);
      }
      if (TriggerLifeTime != 0F) {
        size += 2 + 4;
      }
      if (TriggerDeltaTime != 0F) {
        size += 2 + 4;
      }
      size += spellAnimCanMove_.CalculateSize(_repeated_spellAnimCanMove_codec);
      if (RangeEffPost.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RangeEffPost);
      }
      if (SpellSound.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SpellSound);
      }
      if (SpellTriggerSound.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SpellTriggerSound);
      }
      if (SfxSound.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SfxSound);
      }
      if (PreConditionDataex.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PreConditionDataex);
      }
      if (PreAnim.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PreAnim);
      }
      if (PreAnimEffect.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PreAnimEffect);
      }
      if (PostAnim.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PostAnim);
      }
      if (PostAnimEffect.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PostAnimEffect);
      }
      if (PublicCd != 0F) {
        size += 2 + 4;
      }
      if (RangeEffPostTime != 0F) {
        size += 2 + 4;
      }
      if (TargetmaxGrowth.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TargetmaxGrowth);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActiveSpell_Config other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Cd != 0) {
        Cd = other.Cd;
      }
      if (other.Cost != 0) {
        Cost = other.Cost;
      }
      if (other.PreConditionType.Length != 0) {
        PreConditionType = other.PreConditionType;
      }
      if (other.PreConditionData.Length != 0) {
        PreConditionData = other.PreConditionData;
      }
      if (other.TriggerAnimEffect.Length != 0) {
        TriggerAnimEffect = other.TriggerAnimEffect;
      }
      triggerFuncId_.Add(other.triggerFuncId_);
      triggerOnMeFuncId_.Add(other.triggerOnMeFuncId_);
      if (other.RangeEff.Length != 0) {
        RangeEff = other.RangeEff;
      }
      if (other.RangeEffTime != 0F) {
        RangeEffTime = other.RangeEffTime;
      }
      teamBuffEffect_.Add(other.teamBuffEffect_);
      infection_.Add(other.infection_);
      if (other.BulletId.Length != 0) {
        BulletId = other.BulletId;
      }
      if (other.BulletLaunchDelay.Length != 0) {
        BulletLaunchDelay = other.BulletLaunchDelay;
      }
      if (other.BulletEffect.Length != 0) {
        BulletEffect = other.BulletEffect;
      }
      if (other.BulletHit.Length != 0) {
        BulletHit = other.BulletHit;
      }
      if (other.TriggerDelay.Length != 0) {
        TriggerDelay = other.TriggerDelay;
      }
      if (other.DamageNumDelay != 0F) {
        DamageNumDelay = other.DamageNumDelay;
      }
      if (other.ChainEffect.Length != 0) {
        ChainEffect = other.ChainEffect;
      }
      if (other.ChainEffectHit.Length != 0) {
        ChainEffectHit = other.ChainEffectHit;
      }
      if (other.ChainSpeed != 0F) {
        ChainSpeed = other.ChainSpeed;
      }
      if (other.Sfx.Length != 0) {
        Sfx = other.Sfx;
      }
      if (other.SfxTime != 0F) {
        SfxTime = other.SfxTime;
      }
      if (other.CamBullet != 0) {
        CamBullet = other.CamBullet;
      }
      if (other.CamBulletHit != 0) {
        CamBulletHit = other.CamBulletHit;
      }
      if (other.BulletTarget.Length != 0) {
        BulletTarget = other.BulletTarget;
      }
      if (other.DataTarget.Length != 0) {
        DataTarget = other.DataTarget;
      }
      if (other.CamFeature != 0) {
        CamFeature = other.CamFeature;
      }
      if (other.CamTrigger != 0) {
        CamTrigger = other.CamTrigger;
      }
      if (other.DataParamSpeed.Length != 0) {
        DataParamSpeed = other.DataParamSpeed;
      }
      if (other.TriggerLifeTime != 0F) {
        TriggerLifeTime = other.TriggerLifeTime;
      }
      if (other.TriggerDeltaTime != 0F) {
        TriggerDeltaTime = other.TriggerDeltaTime;
      }
      spellAnimCanMove_.Add(other.spellAnimCanMove_);
      if (other.RangeEffPost.Length != 0) {
        RangeEffPost = other.RangeEffPost;
      }
      if (other.SpellSound.Length != 0) {
        SpellSound = other.SpellSound;
      }
      if (other.SpellTriggerSound.Length != 0) {
        SpellTriggerSound = other.SpellTriggerSound;
      }
      if (other.SfxSound.Length != 0) {
        SfxSound = other.SfxSound;
      }
      if (other.PreConditionDataex.Length != 0) {
        PreConditionDataex = other.PreConditionDataex;
      }
      if (other.PreAnim.Length != 0) {
        PreAnim = other.PreAnim;
      }
      if (other.PreAnimEffect.Length != 0) {
        PreAnimEffect = other.PreAnimEffect;
      }
      if (other.PostAnim.Length != 0) {
        PostAnim = other.PostAnim;
      }
      if (other.PostAnimEffect.Length != 0) {
        PostAnimEffect = other.PostAnimEffect;
      }
      if (other.PublicCd != 0F) {
        PublicCd = other.PublicCd;
      }
      if (other.RangeEffPostTime != 0F) {
        RangeEffPostTime = other.RangeEffPostTime;
      }
      if (other.TargetmaxGrowth.Length != 0) {
        TargetmaxGrowth = other.TargetmaxGrowth;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Cd = input.ReadInt32();
            break;
          }
          case 24: {
            Cost = input.ReadInt32();
            break;
          }
          case 34: {
            PreConditionType = input.ReadString();
            break;
          }
          case 42: {
            PreConditionData = input.ReadString();
            break;
          }
          case 50: {
            TriggerAnimEffect = input.ReadString();
            break;
          }
          case 58: {
            triggerFuncId_.AddEntriesFrom(input, _repeated_triggerFuncId_codec);
            break;
          }
          case 66: {
            triggerOnMeFuncId_.AddEntriesFrom(input, _repeated_triggerOnMeFuncId_codec);
            break;
          }
          case 74: {
            RangeEff = input.ReadString();
            break;
          }
          case 85: {
            RangeEffTime = input.ReadFloat();
            break;
          }
          case 90: {
            teamBuffEffect_.AddEntriesFrom(input, _repeated_teamBuffEffect_codec);
            break;
          }
          case 98:
          case 101: {
            infection_.AddEntriesFrom(input, _repeated_infection_codec);
            break;
          }
          case 106: {
            BulletId = input.ReadString();
            break;
          }
          case 114: {
            BulletLaunchDelay = input.ReadString();
            break;
          }
          case 122: {
            BulletEffect = input.ReadString();
            break;
          }
          case 130: {
            BulletHit = input.ReadString();
            break;
          }
          case 138: {
            TriggerDelay = input.ReadString();
            break;
          }
          case 149: {
            DamageNumDelay = input.ReadFloat();
            break;
          }
          case 154: {
            ChainEffect = input.ReadString();
            break;
          }
          case 162: {
            ChainEffectHit = input.ReadString();
            break;
          }
          case 173: {
            ChainSpeed = input.ReadFloat();
            break;
          }
          case 178: {
            Sfx = input.ReadString();
            break;
          }
          case 189: {
            SfxTime = input.ReadFloat();
            break;
          }
          case 192: {
            CamBullet = input.ReadUInt32();
            break;
          }
          case 200: {
            CamBulletHit = input.ReadUInt32();
            break;
          }
          case 210: {
            BulletTarget = input.ReadString();
            break;
          }
          case 218: {
            DataTarget = input.ReadString();
            break;
          }
          case 224: {
            CamFeature = input.ReadUInt32();
            break;
          }
          case 232: {
            CamTrigger = input.ReadUInt32();
            break;
          }
          case 242: {
            DataParamSpeed = input.ReadString();
            break;
          }
          case 253: {
            TriggerLifeTime = input.ReadFloat();
            break;
          }
          case 261: {
            TriggerDeltaTime = input.ReadFloat();
            break;
          }
          case 266: {
            spellAnimCanMove_.AddEntriesFrom(input, _repeated_spellAnimCanMove_codec);
            break;
          }
          case 274: {
            RangeEffPost = input.ReadString();
            break;
          }
          case 282: {
            SpellSound = input.ReadString();
            break;
          }
          case 290: {
            SpellTriggerSound = input.ReadString();
            break;
          }
          case 298: {
            SfxSound = input.ReadString();
            break;
          }
          case 306: {
            PreConditionDataex = input.ReadString();
            break;
          }
          case 314: {
            PreAnim = input.ReadString();
            break;
          }
          case 322: {
            PreAnimEffect = input.ReadString();
            break;
          }
          case 330: {
            PostAnim = input.ReadString();
            break;
          }
          case 338: {
            PostAnimEffect = input.ReadString();
            break;
          }
          case 349: {
            PublicCd = input.ReadFloat();
            break;
          }
          case 357: {
            RangeEffPostTime = input.ReadFloat();
            break;
          }
          case 362: {
            TargetmaxGrowth = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ActiveSpell_Config_Data : pb::IMessage<ActiveSpell_Config_Data> {
    private static readonly pb::MessageParser<ActiveSpell_Config_Data> _parser = new pb::MessageParser<ActiveSpell_Config_Data>(() => new ActiveSpell_Config_Data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActiveSpell_Config_Data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.SpellConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActiveSpell_Config_Data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActiveSpell_Config_Data(ActiveSpell_Config_Data other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActiveSpell_Config_Data Clone() {
      return new ActiveSpell_Config_Data(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ConfigData.ActiveSpell_Config> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::ConfigData.ActiveSpell_Config.Parser);
    private readonly pbc::RepeatedField<global::ConfigData.ActiveSpell_Config> items_ = new pbc::RepeatedField<global::ConfigData.ActiveSpell_Config>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ConfigData.ActiveSpell_Config> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActiveSpell_Config_Data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActiveSpell_Config_Data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActiveSpell_Config_Data other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SkillData_Config : pb::IMessage<SkillData_Config> {
    private static readonly pb::MessageParser<SkillData_Config> _parser = new pb::MessageParser<SkillData_Config>(() => new SkillData_Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillData_Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.SpellConfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillData_Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillData_Config(SkillData_Config other) : this() {
      id_ = other.id_;
      nameGlobalId_ = other.nameGlobalId_;
      desGlobalId_ = other.desGlobalId_;
      icon_ = other.icon_;
      activeId_ = other.activeId_;
      passiveId_ = other.passiveId_;
      levelMax_ = other.levelMax_;
      strengthRate1_ = other.strengthRate1_;
      strengthRate2_ = other.strengthRate2_;
      strengthRate3_ = other.strengthRate3_;
      debugLevel_ = other.debugLevel_;
      activeLevel_ = other.activeLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillData_Config Clone() {
      return new SkillData_Config(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///* 唯一标识 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name_global_id" field.</summary>
    public const int NameGlobalIdFieldNumber = 2;
    private string nameGlobalId_ = "";
    /// <summary>
    ///* 天赋名称索引 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NameGlobalId {
      get { return nameGlobalId_; }
      set {
        nameGlobalId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "des_global_id" field.</summary>
    public const int DesGlobalIdFieldNumber = 3;
    private string desGlobalId_ = "";
    /// <summary>
    ///* 天赋说明索引 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DesGlobalId {
      get { return desGlobalId_; }
      set {
        desGlobalId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 4;
    private string icon_ = "";
    /// <summary>
    ///* 技能图标 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "active_id" field.</summary>
    public const int ActiveIdFieldNumber = 5;
    private uint activeId_;
    /// <summary>
    ///* 主动技能ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActiveId {
      get { return activeId_; }
      set {
        activeId_ = value;
      }
    }

    /// <summary>Field number for the "passive_id" field.</summary>
    public const int PassiveIdFieldNumber = 6;
    private uint passiveId_;
    /// <summary>
    ///* 被动技能ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PassiveId {
      get { return passiveId_; }
      set {
        passiveId_ = value;
      }
    }

    /// <summary>Field number for the "level_max" field.</summary>
    public const int LevelMaxFieldNumber = 7;
    private int levelMax_;
    /// <summary>
    ///* 技能最高等级 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelMax {
      get { return levelMax_; }
      set {
        levelMax_ = value;
      }
    }

    /// <summary>Field number for the "strength_rate1" field.</summary>
    public const int StrengthRate1FieldNumber = 8;
    private float strengthRate1_;
    /// <summary>
    ///* 技能战力系数1 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StrengthRate1 {
      get { return strengthRate1_; }
      set {
        strengthRate1_ = value;
      }
    }

    /// <summary>Field number for the "strength_rate2" field.</summary>
    public const int StrengthRate2FieldNumber = 9;
    private float strengthRate2_;
    /// <summary>
    ///* 技能战力系数2 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StrengthRate2 {
      get { return strengthRate2_; }
      set {
        strengthRate2_ = value;
      }
    }

    /// <summary>Field number for the "strength_rate3" field.</summary>
    public const int StrengthRate3FieldNumber = 10;
    private float strengthRate3_;
    /// <summary>
    ///* 技能战力系数3 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StrengthRate3 {
      get { return strengthRate3_; }
      set {
        strengthRate3_ = value;
      }
    }

    /// <summary>Field number for the "debug_level" field.</summary>
    public const int DebugLevelFieldNumber = 11;
    private int debugLevel_;
    /// <summary>
    ///*  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DebugLevel {
      get { return debugLevel_; }
      set {
        debugLevel_ = value;
      }
    }

    /// <summary>Field number for the "active_level" field.</summary>
    public const int ActiveLevelFieldNumber = 12;
    private int activeLevel_;
    /// <summary>
    ///* 激活英雄等级 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActiveLevel {
      get { return activeLevel_; }
      set {
        activeLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillData_Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillData_Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (NameGlobalId != other.NameGlobalId) return false;
      if (DesGlobalId != other.DesGlobalId) return false;
      if (Icon != other.Icon) return false;
      if (ActiveId != other.ActiveId) return false;
      if (PassiveId != other.PassiveId) return false;
      if (LevelMax != other.LevelMax) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StrengthRate1, other.StrengthRate1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StrengthRate2, other.StrengthRate2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StrengthRate3, other.StrengthRate3)) return false;
      if (DebugLevel != other.DebugLevel) return false;
      if (ActiveLevel != other.ActiveLevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (NameGlobalId.Length != 0) hash ^= NameGlobalId.GetHashCode();
      if (DesGlobalId.Length != 0) hash ^= DesGlobalId.GetHashCode();
      if (Icon.Length != 0) hash ^= Icon.GetHashCode();
      if (ActiveId != 0) hash ^= ActiveId.GetHashCode();
      if (PassiveId != 0) hash ^= PassiveId.GetHashCode();
      if (LevelMax != 0) hash ^= LevelMax.GetHashCode();
      if (StrengthRate1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StrengthRate1);
      if (StrengthRate2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StrengthRate2);
      if (StrengthRate3 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StrengthRate3);
      if (DebugLevel != 0) hash ^= DebugLevel.GetHashCode();
      if (ActiveLevel != 0) hash ^= ActiveLevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (NameGlobalId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NameGlobalId);
      }
      if (DesGlobalId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DesGlobalId);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Icon);
      }
      if (ActiveId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ActiveId);
      }
      if (PassiveId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(PassiveId);
      }
      if (LevelMax != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(LevelMax);
      }
      if (StrengthRate1 != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(StrengthRate1);
      }
      if (StrengthRate2 != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(StrengthRate2);
      }
      if (StrengthRate3 != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(StrengthRate3);
      }
      if (DebugLevel != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(DebugLevel);
      }
      if (ActiveLevel != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ActiveLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (NameGlobalId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NameGlobalId);
      }
      if (DesGlobalId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DesGlobalId);
      }
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (ActiveId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActiveId);
      }
      if (PassiveId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PassiveId);
      }
      if (LevelMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LevelMax);
      }
      if (StrengthRate1 != 0F) {
        size += 1 + 4;
      }
      if (StrengthRate2 != 0F) {
        size += 1 + 4;
      }
      if (StrengthRate3 != 0F) {
        size += 1 + 4;
      }
      if (DebugLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DebugLevel);
      }
      if (ActiveLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillData_Config other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.NameGlobalId.Length != 0) {
        NameGlobalId = other.NameGlobalId;
      }
      if (other.DesGlobalId.Length != 0) {
        DesGlobalId = other.DesGlobalId;
      }
      if (other.Icon.Length != 0) {
        Icon = other.Icon;
      }
      if (other.ActiveId != 0) {
        ActiveId = other.ActiveId;
      }
      if (other.PassiveId != 0) {
        PassiveId = other.PassiveId;
      }
      if (other.LevelMax != 0) {
        LevelMax = other.LevelMax;
      }
      if (other.StrengthRate1 != 0F) {
        StrengthRate1 = other.StrengthRate1;
      }
      if (other.StrengthRate2 != 0F) {
        StrengthRate2 = other.StrengthRate2;
      }
      if (other.StrengthRate3 != 0F) {
        StrengthRate3 = other.StrengthRate3;
      }
      if (other.DebugLevel != 0) {
        DebugLevel = other.DebugLevel;
      }
      if (other.ActiveLevel != 0) {
        ActiveLevel = other.ActiveLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            NameGlobalId = input.ReadString();
            break;
          }
          case 26: {
            DesGlobalId = input.ReadString();
            break;
          }
          case 34: {
            Icon = input.ReadString();
            break;
          }
          case 40: {
            ActiveId = input.ReadUInt32();
            break;
          }
          case 48: {
            PassiveId = input.ReadUInt32();
            break;
          }
          case 56: {
            LevelMax = input.ReadInt32();
            break;
          }
          case 69: {
            StrengthRate1 = input.ReadFloat();
            break;
          }
          case 77: {
            StrengthRate2 = input.ReadFloat();
            break;
          }
          case 85: {
            StrengthRate3 = input.ReadFloat();
            break;
          }
          case 88: {
            DebugLevel = input.ReadInt32();
            break;
          }
          case 96: {
            ActiveLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SkillData_Config_Data : pb::IMessage<SkillData_Config_Data> {
    private static readonly pb::MessageParser<SkillData_Config_Data> _parser = new pb::MessageParser<SkillData_Config_Data>(() => new SkillData_Config_Data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillData_Config_Data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.SpellConfigReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillData_Config_Data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillData_Config_Data(SkillData_Config_Data other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillData_Config_Data Clone() {
      return new SkillData_Config_Data(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ConfigData.SkillData_Config> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::ConfigData.SkillData_Config.Parser);
    private readonly pbc::RepeatedField<global::ConfigData.SkillData_Config> items_ = new pbc::RepeatedField<global::ConfigData.SkillData_Config>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ConfigData.SkillData_Config> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillData_Config_Data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillData_Config_Data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillData_Config_Data other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataChangeFunc_Config : pb::IMessage<DataChangeFunc_Config> {
    private static readonly pb::MessageParser<DataChangeFunc_Config> _parser = new pb::MessageParser<DataChangeFunc_Config>(() => new DataChangeFunc_Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataChangeFunc_Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.SpellConfigReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataChangeFunc_Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataChangeFunc_Config(DataChangeFunc_Config other) : this() {
      id_ = other.id_;
      type_ = other.type_;
      k1_ = other.k1_;
      k2_ = other.k2_;
      k3_ = other.k3_;
      dataType_ = other.dataType_;
      dataex_ = other.dataex_;
      dataex2_ = other.dataex2_;
      dataStartEff_ = other.dataStartEff_;
      dataEff_ = other.dataEff_;
      dataEndEff_ = other.dataEndEff_;
      dataEffProb_ = other.dataEffProb_;
      dataTime_ = other.dataTime_;
      dataHitFly_ = other.dataHitFly_;
      buffNature_ = other.buffNature_;
      icon_ = other.icon_;
      superposition_ = other.superposition_;
      iconPosition_ = other.iconPosition_;
      mark_ = other.mark_;
      markAffectedRate_ = other.markAffectedRate_;
      growthProp_ = other.growthProp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataChangeFunc_Config Clone() {
      return new DataChangeFunc_Config(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///* 变值索引 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    /// <summary>
    ///* 值种类 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "k1" field.</summary>
    public const int K1FieldNumber = 3;
    private float k1_;
    /// <summary>
    ///* 二次增长 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float K1 {
      get { return k1_; }
      set {
        k1_ = value;
      }
    }

    /// <summary>Field number for the "k2" field.</summary>
    public const int K2FieldNumber = 4;
    private float k2_;
    /// <summary>
    ///* 一次增长 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float K2 {
      get { return k2_; }
      set {
        k2_ = value;
      }
    }

    /// <summary>Field number for the "k3" field.</summary>
    public const int K3FieldNumber = 5;
    private float k3_;
    /// <summary>
    ///* 初始值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float K3 {
      get { return k3_; }
      set {
        k3_ = value;
      }
    }

    /// <summary>Field number for the "data_type" field.</summary>
    public const int DataTypeFieldNumber = 6;
    private uint dataType_;
    /// <summary>
    ///* 值的格式(0表示数值1表示百分比) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DataType {
      get { return dataType_; }
      set {
        dataType_ = value;
      }
    }

    /// <summary>Field number for the "dataex" field.</summary>
    public const int DataexFieldNumber = 7;
    private string dataex_ = "";
    /// <summary>
    ///* 额外值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Dataex {
      get { return dataex_; }
      set {
        dataex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dataex2" field.</summary>
    public const int Dataex2FieldNumber = 8;
    private string dataex2_ = "";
    /// <summary>
    ///* 技能附带字幕 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Dataex2 {
      get { return dataex2_; }
      set {
        dataex2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data_start_eff" field.</summary>
    public const int DataStartEffFieldNumber = 9;
    private string dataStartEff_ = "";
    /// <summary>
    ///* 开始特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataStartEff {
      get { return dataStartEff_; }
      set {
        dataStartEff_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data_eff" field.</summary>
    public const int DataEffFieldNumber = 10;
    private string dataEff_ = "";
    /// <summary>
    ///* 变值带的特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataEff {
      get { return dataEff_; }
      set {
        dataEff_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data_end_eff" field.</summary>
    public const int DataEndEffFieldNumber = 11;
    private string dataEndEff_ = "";
    /// <summary>
    ///*  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataEndEff {
      get { return dataEndEff_; }
      set {
        dataEndEff_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data_eff_prob" field.</summary>
    public const int DataEffProbFieldNumber = 12;
    private float dataEffProb_;
    /// <summary>
    ///* 特效出现概率 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DataEffProb {
      get { return dataEffProb_; }
      set {
        dataEffProb_ = value;
      }
    }

    /// <summary>Field number for the "data_time" field.</summary>
    public const int DataTimeFieldNumber = 13;
    private float dataTime_;
    /// <summary>
    ///* 变值持续时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DataTime {
      get { return dataTime_; }
      set {
        dataTime_ = value;
      }
    }

    /// <summary>Field number for the "data_hit_fly" field.</summary>
    public const int DataHitFlyFieldNumber = 14;
    private string dataHitFly_ = "";
    /// <summary>
    ///* 击飞 概率|横向速度|纵向速度(正常击飞)+击飞 概率|横向速度|纵向速度(死亡击飞) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataHitFly {
      get { return dataHitFly_; }
      set {
        dataHitFly_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "buff_nature" field.</summary>
    public const int BuffNatureFieldNumber = 15;
    private int buffNature_;
    /// <summary>
    ///* -1 负面效果 0 中性 1 正面效果（标记buff，用以驱散技能） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuffNature {
      get { return buffNature_; }
      set {
        buffNature_ = value;
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 16;
    private string icon_ = "";
    /// <summary>
    ///* 效果在UI上的icon 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "superposition" field.</summary>
    public const int SuperpositionFieldNumber = 17;
    private int superposition_;
    /// <summary>
    ///* buff效果（默认是0，新效果覆盖旧效果、1新效果叠加旧效果） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Superposition {
      get { return superposition_; }
      set {
        superposition_ = value;
      }
    }

    /// <summary>Field number for the "icon_position" field.</summary>
    public const int IconPositionFieldNumber = 18;
    private string iconPosition_ = "";
    /// <summary>
    ///* icon显示位置（0是负面，1是正面） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IconPosition {
      get { return iconPosition_; }
      set {
        iconPosition_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mark" field.</summary>
    public const int MarkFieldNumber = 19;
    private string mark_ = "";
    /// <summary>
    ///* 附带标签 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mark {
      get { return mark_; }
      set {
        mark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mark_affected_rate" field.</summary>
    public const int MarkAffectedRateFieldNumber = 20;
    private int markAffectedRate_;
    /// <summary>
    ///* 0 影响时间 1 影响效果 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MarkAffectedRate {
      get { return markAffectedRate_; }
      set {
        markAffectedRate_ = value;
      }
    }

    /// <summary>Field number for the "growth_prop" field.</summary>
    public const int GrowthPropFieldNumber = 21;
    private string growthProp_ = "";
    /// <summary>
    ///* 成长主属性 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GrowthProp {
      get { return growthProp_; }
      set {
        growthProp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataChangeFunc_Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataChangeFunc_Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(K1, other.K1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(K2, other.K2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(K3, other.K3)) return false;
      if (DataType != other.DataType) return false;
      if (Dataex != other.Dataex) return false;
      if (Dataex2 != other.Dataex2) return false;
      if (DataStartEff != other.DataStartEff) return false;
      if (DataEff != other.DataEff) return false;
      if (DataEndEff != other.DataEndEff) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DataEffProb, other.DataEffProb)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DataTime, other.DataTime)) return false;
      if (DataHitFly != other.DataHitFly) return false;
      if (BuffNature != other.BuffNature) return false;
      if (Icon != other.Icon) return false;
      if (Superposition != other.Superposition) return false;
      if (IconPosition != other.IconPosition) return false;
      if (Mark != other.Mark) return false;
      if (MarkAffectedRate != other.MarkAffectedRate) return false;
      if (GrowthProp != other.GrowthProp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (K1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(K1);
      if (K2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(K2);
      if (K3 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(K3);
      if (DataType != 0) hash ^= DataType.GetHashCode();
      if (Dataex.Length != 0) hash ^= Dataex.GetHashCode();
      if (Dataex2.Length != 0) hash ^= Dataex2.GetHashCode();
      if (DataStartEff.Length != 0) hash ^= DataStartEff.GetHashCode();
      if (DataEff.Length != 0) hash ^= DataEff.GetHashCode();
      if (DataEndEff.Length != 0) hash ^= DataEndEff.GetHashCode();
      if (DataEffProb != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DataEffProb);
      if (DataTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DataTime);
      if (DataHitFly.Length != 0) hash ^= DataHitFly.GetHashCode();
      if (BuffNature != 0) hash ^= BuffNature.GetHashCode();
      if (Icon.Length != 0) hash ^= Icon.GetHashCode();
      if (Superposition != 0) hash ^= Superposition.GetHashCode();
      if (IconPosition.Length != 0) hash ^= IconPosition.GetHashCode();
      if (Mark.Length != 0) hash ^= Mark.GetHashCode();
      if (MarkAffectedRate != 0) hash ^= MarkAffectedRate.GetHashCode();
      if (GrowthProp.Length != 0) hash ^= GrowthProp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (K1 != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(K1);
      }
      if (K2 != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(K2);
      }
      if (K3 != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(K3);
      }
      if (DataType != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(DataType);
      }
      if (Dataex.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Dataex);
      }
      if (Dataex2.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Dataex2);
      }
      if (DataStartEff.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(DataStartEff);
      }
      if (DataEff.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(DataEff);
      }
      if (DataEndEff.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(DataEndEff);
      }
      if (DataEffProb != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(DataEffProb);
      }
      if (DataTime != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(DataTime);
      }
      if (DataHitFly.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(DataHitFly);
      }
      if (BuffNature != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(BuffNature);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Icon);
      }
      if (Superposition != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Superposition);
      }
      if (IconPosition.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(IconPosition);
      }
      if (Mark.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(Mark);
      }
      if (MarkAffectedRate != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(MarkAffectedRate);
      }
      if (GrowthProp.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(GrowthProp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (K1 != 0F) {
        size += 1 + 4;
      }
      if (K2 != 0F) {
        size += 1 + 4;
      }
      if (K3 != 0F) {
        size += 1 + 4;
      }
      if (DataType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DataType);
      }
      if (Dataex.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Dataex);
      }
      if (Dataex2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Dataex2);
      }
      if (DataStartEff.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataStartEff);
      }
      if (DataEff.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataEff);
      }
      if (DataEndEff.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataEndEff);
      }
      if (DataEffProb != 0F) {
        size += 1 + 4;
      }
      if (DataTime != 0F) {
        size += 1 + 4;
      }
      if (DataHitFly.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataHitFly);
      }
      if (BuffNature != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffNature);
      }
      if (Icon.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (Superposition != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Superposition);
      }
      if (IconPosition.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IconPosition);
      }
      if (Mark.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Mark);
      }
      if (MarkAffectedRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MarkAffectedRate);
      }
      if (GrowthProp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(GrowthProp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataChangeFunc_Config other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.K1 != 0F) {
        K1 = other.K1;
      }
      if (other.K2 != 0F) {
        K2 = other.K2;
      }
      if (other.K3 != 0F) {
        K3 = other.K3;
      }
      if (other.DataType != 0) {
        DataType = other.DataType;
      }
      if (other.Dataex.Length != 0) {
        Dataex = other.Dataex;
      }
      if (other.Dataex2.Length != 0) {
        Dataex2 = other.Dataex2;
      }
      if (other.DataStartEff.Length != 0) {
        DataStartEff = other.DataStartEff;
      }
      if (other.DataEff.Length != 0) {
        DataEff = other.DataEff;
      }
      if (other.DataEndEff.Length != 0) {
        DataEndEff = other.DataEndEff;
      }
      if (other.DataEffProb != 0F) {
        DataEffProb = other.DataEffProb;
      }
      if (other.DataTime != 0F) {
        DataTime = other.DataTime;
      }
      if (other.DataHitFly.Length != 0) {
        DataHitFly = other.DataHitFly;
      }
      if (other.BuffNature != 0) {
        BuffNature = other.BuffNature;
      }
      if (other.Icon.Length != 0) {
        Icon = other.Icon;
      }
      if (other.Superposition != 0) {
        Superposition = other.Superposition;
      }
      if (other.IconPosition.Length != 0) {
        IconPosition = other.IconPosition;
      }
      if (other.Mark.Length != 0) {
        Mark = other.Mark;
      }
      if (other.MarkAffectedRate != 0) {
        MarkAffectedRate = other.MarkAffectedRate;
      }
      if (other.GrowthProp.Length != 0) {
        GrowthProp = other.GrowthProp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 29: {
            K1 = input.ReadFloat();
            break;
          }
          case 37: {
            K2 = input.ReadFloat();
            break;
          }
          case 45: {
            K3 = input.ReadFloat();
            break;
          }
          case 48: {
            DataType = input.ReadUInt32();
            break;
          }
          case 58: {
            Dataex = input.ReadString();
            break;
          }
          case 66: {
            Dataex2 = input.ReadString();
            break;
          }
          case 74: {
            DataStartEff = input.ReadString();
            break;
          }
          case 82: {
            DataEff = input.ReadString();
            break;
          }
          case 90: {
            DataEndEff = input.ReadString();
            break;
          }
          case 101: {
            DataEffProb = input.ReadFloat();
            break;
          }
          case 109: {
            DataTime = input.ReadFloat();
            break;
          }
          case 114: {
            DataHitFly = input.ReadString();
            break;
          }
          case 120: {
            BuffNature = input.ReadInt32();
            break;
          }
          case 130: {
            Icon = input.ReadString();
            break;
          }
          case 136: {
            Superposition = input.ReadInt32();
            break;
          }
          case 146: {
            IconPosition = input.ReadString();
            break;
          }
          case 154: {
            Mark = input.ReadString();
            break;
          }
          case 160: {
            MarkAffectedRate = input.ReadInt32();
            break;
          }
          case 170: {
            GrowthProp = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataChangeFunc_Config_Data : pb::IMessage<DataChangeFunc_Config_Data> {
    private static readonly pb::MessageParser<DataChangeFunc_Config_Data> _parser = new pb::MessageParser<DataChangeFunc_Config_Data>(() => new DataChangeFunc_Config_Data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataChangeFunc_Config_Data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.SpellConfigReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataChangeFunc_Config_Data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataChangeFunc_Config_Data(DataChangeFunc_Config_Data other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataChangeFunc_Config_Data Clone() {
      return new DataChangeFunc_Config_Data(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ConfigData.DataChangeFunc_Config> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::ConfigData.DataChangeFunc_Config.Parser);
    private readonly pbc::RepeatedField<global::ConfigData.DataChangeFunc_Config> items_ = new pbc::RepeatedField<global::ConfigData.DataChangeFunc_Config>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ConfigData.DataChangeFunc_Config> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataChangeFunc_Config_Data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataChangeFunc_Config_Data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataChangeFunc_Config_Data other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PassiveSpell_Config : pb::IMessage<PassiveSpell_Config> {
    private static readonly pb::MessageParser<PassiveSpell_Config> _parser = new pb::MessageParser<PassiveSpell_Config>(() => new PassiveSpell_Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PassiveSpell_Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.SpellConfigReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PassiveSpell_Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PassiveSpell_Config(PassiveSpell_Config other) : this() {
      id_ = other.id_;
      activeCondition_ = other.activeCondition_;
      activeTime_ = other.activeTime_;
      triggerCondition_ = other.triggerCondition_;
      triggerConditionParam_ = other.triggerConditionParam_;
      triggerProbability_ = other.triggerProbability_;
      triggerCd_ = other.triggerCd_;
      commandTarget_ = other.commandTarget_;
      command_ = other.command_;
      data_ = other.data_;
      overrideDataK1_ = other.overrideDataK1_;
      overrideDataK2_ = other.overrideDataK2_;
      overrideDataK3_ = other.overrideDataK3_;
      overrideDataTime_ = other.overrideDataTime_;
      effect_ = other.effect_;
      score_ = other.score_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PassiveSpell_Config Clone() {
      return new PassiveSpell_Config(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///* 被动技能id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "active_condition" field.</summary>
    public const int ActiveConditionFieldNumber = 2;
    private string activeCondition_ = "";
    /// <summary>
    ///* 激活条件 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActiveCondition {
      get { return activeCondition_; }
      set {
        activeCondition_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "active_time" field.</summary>
    public const int ActiveTimeFieldNumber = 3;
    private float activeTime_;
    /// <summary>
    ///* 满足激活条件后的有效时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ActiveTime {
      get { return activeTime_; }
      set {
        activeTime_ = value;
      }
    }

    /// <summary>Field number for the "trigger_condition" field.</summary>
    public const int TriggerConditionFieldNumber = 4;
    private string triggerCondition_ = "";
    /// <summary>
    ///* 被动技能效果发生的条件 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TriggerCondition {
      get { return triggerCondition_; }
      set {
        triggerCondition_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trigger_condition_param" field.</summary>
    public const int TriggerConditionParamFieldNumber = 5;
    private string triggerConditionParam_ = "";
    /// <summary>
    ///* 触发参数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TriggerConditionParam {
      get { return triggerConditionParam_; }
      set {
        triggerConditionParam_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trigger_probability" field.</summary>
    public const int TriggerProbabilityFieldNumber = 6;
    private float triggerProbability_;
    /// <summary>
    ///* 触发概率 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TriggerProbability {
      get { return triggerProbability_; }
      set {
        triggerProbability_ = value;
      }
    }

    /// <summary>Field number for the "trigger_cd" field.</summary>
    public const int TriggerCdFieldNumber = 7;
    private int triggerCd_;
    /// <summary>
    ///* 触发CD时间（属性放在team上） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TriggerCd {
      get { return triggerCd_; }
      set {
        triggerCd_ = value;
      }
    }

    /// <summary>Field number for the "command_target" field.</summary>
    public const int CommandTargetFieldNumber = 8;
    private string commandTarget_ = "";
    /// <summary>
    ///* 被动技能影响的目标team|hero|members 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CommandTarget {
      get { return commandTarget_; }
      set {
        commandTarget_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "command" field.</summary>
    public const int CommandFieldNumber = 9;
    private string command_ = "";
    /// <summary>
    ///* 技能命令 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Command {
      get { return command_; }
      set {
        command_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 10;
    private uint data_;
    /// <summary>
    ///* 触发调用的DataId或参数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    /// <summary>Field number for the "override_data_k1" field.</summary>
    public const int OverrideDataK1FieldNumber = 11;
    private int overrideDataK1_;
    /// <summary>
    ///*  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OverrideDataK1 {
      get { return overrideDataK1_; }
      set {
        overrideDataK1_ = value;
      }
    }

    /// <summary>Field number for the "override_data_k2" field.</summary>
    public const int OverrideDataK2FieldNumber = 12;
    private int overrideDataK2_;
    /// <summary>
    ///*  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OverrideDataK2 {
      get { return overrideDataK2_; }
      set {
        overrideDataK2_ = value;
      }
    }

    /// <summary>Field number for the "override_data_k3" field.</summary>
    public const int OverrideDataK3FieldNumber = 13;
    private int overrideDataK3_;
    /// <summary>
    ///*  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OverrideDataK3 {
      get { return overrideDataK3_; }
      set {
        overrideDataK3_ = value;
      }
    }

    /// <summary>Field number for the "override_data_time" field.</summary>
    public const int OverrideDataTimeFieldNumber = 14;
    private int overrideDataTime_;
    /// <summary>
    ///*  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OverrideDataTime {
      get { return overrideDataTime_; }
      set {
        overrideDataTime_ = value;
      }
    }

    /// <summary>Field number for the "effect" field.</summary>
    public const int EffectFieldNumber = 15;
    private string effect_ = "";
    /// <summary>
    ///* 触发特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Effect {
      get { return effect_; }
      set {
        effect_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 16;
    private int score_;
    /// <summary>
    ///* 被动技能评分 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PassiveSpell_Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PassiveSpell_Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ActiveCondition != other.ActiveCondition) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ActiveTime, other.ActiveTime)) return false;
      if (TriggerCondition != other.TriggerCondition) return false;
      if (TriggerConditionParam != other.TriggerConditionParam) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TriggerProbability, other.TriggerProbability)) return false;
      if (TriggerCd != other.TriggerCd) return false;
      if (CommandTarget != other.CommandTarget) return false;
      if (Command != other.Command) return false;
      if (Data != other.Data) return false;
      if (OverrideDataK1 != other.OverrideDataK1) return false;
      if (OverrideDataK2 != other.OverrideDataK2) return false;
      if (OverrideDataK3 != other.OverrideDataK3) return false;
      if (OverrideDataTime != other.OverrideDataTime) return false;
      if (Effect != other.Effect) return false;
      if (Score != other.Score) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (ActiveCondition.Length != 0) hash ^= ActiveCondition.GetHashCode();
      if (ActiveTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ActiveTime);
      if (TriggerCondition.Length != 0) hash ^= TriggerCondition.GetHashCode();
      if (TriggerConditionParam.Length != 0) hash ^= TriggerConditionParam.GetHashCode();
      if (TriggerProbability != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TriggerProbability);
      if (TriggerCd != 0) hash ^= TriggerCd.GetHashCode();
      if (CommandTarget.Length != 0) hash ^= CommandTarget.GetHashCode();
      if (Command.Length != 0) hash ^= Command.GetHashCode();
      if (Data != 0) hash ^= Data.GetHashCode();
      if (OverrideDataK1 != 0) hash ^= OverrideDataK1.GetHashCode();
      if (OverrideDataK2 != 0) hash ^= OverrideDataK2.GetHashCode();
      if (OverrideDataK3 != 0) hash ^= OverrideDataK3.GetHashCode();
      if (OverrideDataTime != 0) hash ^= OverrideDataTime.GetHashCode();
      if (Effect.Length != 0) hash ^= Effect.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (ActiveCondition.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ActiveCondition);
      }
      if (ActiveTime != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(ActiveTime);
      }
      if (TriggerCondition.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TriggerCondition);
      }
      if (TriggerConditionParam.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(TriggerConditionParam);
      }
      if (TriggerProbability != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(TriggerProbability);
      }
      if (TriggerCd != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(TriggerCd);
      }
      if (CommandTarget.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(CommandTarget);
      }
      if (Command.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Command);
      }
      if (Data != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Data);
      }
      if (OverrideDataK1 != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(OverrideDataK1);
      }
      if (OverrideDataK2 != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(OverrideDataK2);
      }
      if (OverrideDataK3 != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(OverrideDataK3);
      }
      if (OverrideDataTime != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(OverrideDataTime);
      }
      if (Effect.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Effect);
      }
      if (Score != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Score);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (ActiveCondition.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActiveCondition);
      }
      if (ActiveTime != 0F) {
        size += 1 + 4;
      }
      if (TriggerCondition.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TriggerCondition);
      }
      if (TriggerConditionParam.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TriggerConditionParam);
      }
      if (TriggerProbability != 0F) {
        size += 1 + 4;
      }
      if (TriggerCd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TriggerCd);
      }
      if (CommandTarget.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CommandTarget);
      }
      if (Command.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Command);
      }
      if (Data != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Data);
      }
      if (OverrideDataK1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OverrideDataK1);
      }
      if (OverrideDataK2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OverrideDataK2);
      }
      if (OverrideDataK3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OverrideDataK3);
      }
      if (OverrideDataTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OverrideDataTime);
      }
      if (Effect.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Effect);
      }
      if (Score != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PassiveSpell_Config other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.ActiveCondition.Length != 0) {
        ActiveCondition = other.ActiveCondition;
      }
      if (other.ActiveTime != 0F) {
        ActiveTime = other.ActiveTime;
      }
      if (other.TriggerCondition.Length != 0) {
        TriggerCondition = other.TriggerCondition;
      }
      if (other.TriggerConditionParam.Length != 0) {
        TriggerConditionParam = other.TriggerConditionParam;
      }
      if (other.TriggerProbability != 0F) {
        TriggerProbability = other.TriggerProbability;
      }
      if (other.TriggerCd != 0) {
        TriggerCd = other.TriggerCd;
      }
      if (other.CommandTarget.Length != 0) {
        CommandTarget = other.CommandTarget;
      }
      if (other.Command.Length != 0) {
        Command = other.Command;
      }
      if (other.Data != 0) {
        Data = other.Data;
      }
      if (other.OverrideDataK1 != 0) {
        OverrideDataK1 = other.OverrideDataK1;
      }
      if (other.OverrideDataK2 != 0) {
        OverrideDataK2 = other.OverrideDataK2;
      }
      if (other.OverrideDataK3 != 0) {
        OverrideDataK3 = other.OverrideDataK3;
      }
      if (other.OverrideDataTime != 0) {
        OverrideDataTime = other.OverrideDataTime;
      }
      if (other.Effect.Length != 0) {
        Effect = other.Effect;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            ActiveCondition = input.ReadString();
            break;
          }
          case 29: {
            ActiveTime = input.ReadFloat();
            break;
          }
          case 34: {
            TriggerCondition = input.ReadString();
            break;
          }
          case 42: {
            TriggerConditionParam = input.ReadString();
            break;
          }
          case 53: {
            TriggerProbability = input.ReadFloat();
            break;
          }
          case 56: {
            TriggerCd = input.ReadInt32();
            break;
          }
          case 66: {
            CommandTarget = input.ReadString();
            break;
          }
          case 74: {
            Command = input.ReadString();
            break;
          }
          case 80: {
            Data = input.ReadUInt32();
            break;
          }
          case 88: {
            OverrideDataK1 = input.ReadInt32();
            break;
          }
          case 96: {
            OverrideDataK2 = input.ReadInt32();
            break;
          }
          case 104: {
            OverrideDataK3 = input.ReadInt32();
            break;
          }
          case 112: {
            OverrideDataTime = input.ReadInt32();
            break;
          }
          case 122: {
            Effect = input.ReadString();
            break;
          }
          case 128: {
            Score = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PassiveSpell_Config_Data : pb::IMessage<PassiveSpell_Config_Data> {
    private static readonly pb::MessageParser<PassiveSpell_Config_Data> _parser = new pb::MessageParser<PassiveSpell_Config_Data>(() => new PassiveSpell_Config_Data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PassiveSpell_Config_Data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.SpellConfigReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PassiveSpell_Config_Data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PassiveSpell_Config_Data(PassiveSpell_Config_Data other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PassiveSpell_Config_Data Clone() {
      return new PassiveSpell_Config_Data(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ConfigData.PassiveSpell_Config> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::ConfigData.PassiveSpell_Config.Parser);
    private readonly pbc::RepeatedField<global::ConfigData.PassiveSpell_Config> items_ = new pbc::RepeatedField<global::ConfigData.PassiveSpell_Config>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ConfigData.PassiveSpell_Config> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PassiveSpell_Config_Data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PassiveSpell_Config_Data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PassiveSpell_Config_Data other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateBullet_Config : pb::IMessage<CreateBullet_Config> {
    private static readonly pb::MessageParser<CreateBullet_Config> _parser = new pb::MessageParser<CreateBullet_Config>(() => new CreateBullet_Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateBullet_Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.SpellConfigReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateBullet_Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateBullet_Config(CreateBullet_Config other) : this() {
      id_ = other.id_;
      point_ = other.point_;
      horizonSpeed_ = other.horizonSpeed_;
      horizontalRange_ = other.horizontalRange_;
      traceMissile_ = other.traceMissile_;
      parabolaHeight_ = other.parabolaHeight_;
      parabolaSrc_ = other.parabolaSrc_.Clone();
      parabolaCtrl1_ = other.parabolaCtrl1_.Clone();
      parabolaCtrl2_ = other.parabolaCtrl2_.Clone();
      parabolaDes_ = other.parabolaDes_.Clone();
      heightOffsetMin_ = other.heightOffsetMin_;
      heightOffsetMax_ = other.heightOffsetMax_;
      desRangeOffset_ = other.desRangeOffset_;
      ballisticCalcRate_ = other.ballisticCalcRate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateBullet_Config Clone() {
      return new CreateBullet_Config(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///* 子弹索引 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 2;
    private string point_ = "";
    /// <summary>
    ///* 子弹发出点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Point {
      get { return point_; }
      set {
        point_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "horizon_speed" field.</summary>
    public const int HorizonSpeedFieldNumber = 3;
    private float horizonSpeed_;
    /// <summary>
    ///* 横向速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HorizonSpeed {
      get { return horizonSpeed_; }
      set {
        horizonSpeed_ = value;
      }
    }

    /// <summary>Field number for the "horizontal_range" field.</summary>
    public const int HorizontalRangeFieldNumber = 4;
    private float horizontalRange_;
    /// <summary>
    ///* 水平飞行无目标的最大距离 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HorizontalRange {
      get { return horizontalRange_; }
      set {
        horizontalRange_ = value;
      }
    }

    /// <summary>Field number for the "trace_missile" field.</summary>
    public const int TraceMissileFieldNumber = 5;
    private float traceMissile_;
    /// <summary>
    ///*  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TraceMissile {
      get { return traceMissile_; }
      set {
        traceMissile_ = value;
      }
    }

    /// <summary>Field number for the "parabola_height" field.</summary>
    public const int ParabolaHeightFieldNumber = 6;
    private float parabolaHeight_;
    /// <summary>
    ///* 抛物线高度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ParabolaHeight {
      get { return parabolaHeight_; }
      set {
        parabolaHeight_ = value;
      }
    }

    /// <summary>Field number for the "parabola_src" field.</summary>
    public const int ParabolaSrcFieldNumber = 7;
    private static readonly pb::FieldCodec<float> _repeated_parabolaSrc_codec
        = pb::FieldCodec.ForFloat(58);
    private readonly pbc::RepeatedField<float> parabolaSrc_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///*  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> ParabolaSrc {
      get { return parabolaSrc_; }
    }

    /// <summary>Field number for the "parabola_ctrl_1" field.</summary>
    public const int ParabolaCtrl1FieldNumber = 8;
    private static readonly pb::FieldCodec<float> _repeated_parabolaCtrl1_codec
        = pb::FieldCodec.ForFloat(66);
    private readonly pbc::RepeatedField<float> parabolaCtrl1_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///*  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> ParabolaCtrl1 {
      get { return parabolaCtrl1_; }
    }

    /// <summary>Field number for the "parabola_ctrl_2" field.</summary>
    public const int ParabolaCtrl2FieldNumber = 9;
    private static readonly pb::FieldCodec<float> _repeated_parabolaCtrl2_codec
        = pb::FieldCodec.ForFloat(74);
    private readonly pbc::RepeatedField<float> parabolaCtrl2_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///*  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> ParabolaCtrl2 {
      get { return parabolaCtrl2_; }
    }

    /// <summary>Field number for the "parabola_des" field.</summary>
    public const int ParabolaDesFieldNumber = 10;
    private static readonly pb::FieldCodec<float> _repeated_parabolaDes_codec
        = pb::FieldCodec.ForFloat(82);
    private readonly pbc::RepeatedField<float> parabolaDes_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///*  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> ParabolaDes {
      get { return parabolaDes_; }
    }

    /// <summary>Field number for the "height_offset_min" field.</summary>
    public const int HeightOffsetMinFieldNumber = 11;
    private float heightOffsetMin_;
    /// <summary>
    ///*  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeightOffsetMin {
      get { return heightOffsetMin_; }
      set {
        heightOffsetMin_ = value;
      }
    }

    /// <summary>Field number for the "height_offset_max" field.</summary>
    public const int HeightOffsetMaxFieldNumber = 12;
    private float heightOffsetMax_;
    /// <summary>
    ///*  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeightOffsetMax {
      get { return heightOffsetMax_; }
      set {
        heightOffsetMax_ = value;
      }
    }

    /// <summary>Field number for the "des_range_offset" field.</summary>
    public const int DesRangeOffsetFieldNumber = 13;
    private float desRangeOffset_;
    /// <summary>
    ///*  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DesRangeOffset {
      get { return desRangeOffset_; }
      set {
        desRangeOffset_ = value;
      }
    }

    /// <summary>Field number for the "ballistic_calc_rate" field.</summary>
    public const int BallisticCalcRateFieldNumber = 14;
    private float ballisticCalcRate_;
    /// <summary>
    ///* 导弹追踪计算精准度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BallisticCalcRate {
      get { return ballisticCalcRate_; }
      set {
        ballisticCalcRate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateBullet_Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateBullet_Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Point != other.Point) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HorizonSpeed, other.HorizonSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HorizontalRange, other.HorizontalRange)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TraceMissile, other.TraceMissile)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ParabolaHeight, other.ParabolaHeight)) return false;
      if(!parabolaSrc_.Equals(other.parabolaSrc_)) return false;
      if(!parabolaCtrl1_.Equals(other.parabolaCtrl1_)) return false;
      if(!parabolaCtrl2_.Equals(other.parabolaCtrl2_)) return false;
      if(!parabolaDes_.Equals(other.parabolaDes_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HeightOffsetMin, other.HeightOffsetMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HeightOffsetMax, other.HeightOffsetMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DesRangeOffset, other.DesRangeOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BallisticCalcRate, other.BallisticCalcRate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Point.Length != 0) hash ^= Point.GetHashCode();
      if (HorizonSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HorizonSpeed);
      if (HorizontalRange != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HorizontalRange);
      if (TraceMissile != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TraceMissile);
      if (ParabolaHeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ParabolaHeight);
      hash ^= parabolaSrc_.GetHashCode();
      hash ^= parabolaCtrl1_.GetHashCode();
      hash ^= parabolaCtrl2_.GetHashCode();
      hash ^= parabolaDes_.GetHashCode();
      if (HeightOffsetMin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HeightOffsetMin);
      if (HeightOffsetMax != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HeightOffsetMax);
      if (DesRangeOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DesRangeOffset);
      if (BallisticCalcRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BallisticCalcRate);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Point.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Point);
      }
      if (HorizonSpeed != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(HorizonSpeed);
      }
      if (HorizontalRange != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(HorizontalRange);
      }
      if (TraceMissile != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(TraceMissile);
      }
      if (ParabolaHeight != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(ParabolaHeight);
      }
      parabolaSrc_.WriteTo(output, _repeated_parabolaSrc_codec);
      parabolaCtrl1_.WriteTo(output, _repeated_parabolaCtrl1_codec);
      parabolaCtrl2_.WriteTo(output, _repeated_parabolaCtrl2_codec);
      parabolaDes_.WriteTo(output, _repeated_parabolaDes_codec);
      if (HeightOffsetMin != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(HeightOffsetMin);
      }
      if (HeightOffsetMax != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(HeightOffsetMax);
      }
      if (DesRangeOffset != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(DesRangeOffset);
      }
      if (BallisticCalcRate != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(BallisticCalcRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Point.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Point);
      }
      if (HorizonSpeed != 0F) {
        size += 1 + 4;
      }
      if (HorizontalRange != 0F) {
        size += 1 + 4;
      }
      if (TraceMissile != 0F) {
        size += 1 + 4;
      }
      if (ParabolaHeight != 0F) {
        size += 1 + 4;
      }
      size += parabolaSrc_.CalculateSize(_repeated_parabolaSrc_codec);
      size += parabolaCtrl1_.CalculateSize(_repeated_parabolaCtrl1_codec);
      size += parabolaCtrl2_.CalculateSize(_repeated_parabolaCtrl2_codec);
      size += parabolaDes_.CalculateSize(_repeated_parabolaDes_codec);
      if (HeightOffsetMin != 0F) {
        size += 1 + 4;
      }
      if (HeightOffsetMax != 0F) {
        size += 1 + 4;
      }
      if (DesRangeOffset != 0F) {
        size += 1 + 4;
      }
      if (BallisticCalcRate != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateBullet_Config other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Point.Length != 0) {
        Point = other.Point;
      }
      if (other.HorizonSpeed != 0F) {
        HorizonSpeed = other.HorizonSpeed;
      }
      if (other.HorizontalRange != 0F) {
        HorizontalRange = other.HorizontalRange;
      }
      if (other.TraceMissile != 0F) {
        TraceMissile = other.TraceMissile;
      }
      if (other.ParabolaHeight != 0F) {
        ParabolaHeight = other.ParabolaHeight;
      }
      parabolaSrc_.Add(other.parabolaSrc_);
      parabolaCtrl1_.Add(other.parabolaCtrl1_);
      parabolaCtrl2_.Add(other.parabolaCtrl2_);
      parabolaDes_.Add(other.parabolaDes_);
      if (other.HeightOffsetMin != 0F) {
        HeightOffsetMin = other.HeightOffsetMin;
      }
      if (other.HeightOffsetMax != 0F) {
        HeightOffsetMax = other.HeightOffsetMax;
      }
      if (other.DesRangeOffset != 0F) {
        DesRangeOffset = other.DesRangeOffset;
      }
      if (other.BallisticCalcRate != 0F) {
        BallisticCalcRate = other.BallisticCalcRate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            Point = input.ReadString();
            break;
          }
          case 29: {
            HorizonSpeed = input.ReadFloat();
            break;
          }
          case 37: {
            HorizontalRange = input.ReadFloat();
            break;
          }
          case 45: {
            TraceMissile = input.ReadFloat();
            break;
          }
          case 53: {
            ParabolaHeight = input.ReadFloat();
            break;
          }
          case 58:
          case 61: {
            parabolaSrc_.AddEntriesFrom(input, _repeated_parabolaSrc_codec);
            break;
          }
          case 66:
          case 69: {
            parabolaCtrl1_.AddEntriesFrom(input, _repeated_parabolaCtrl1_codec);
            break;
          }
          case 74:
          case 77: {
            parabolaCtrl2_.AddEntriesFrom(input, _repeated_parabolaCtrl2_codec);
            break;
          }
          case 82:
          case 85: {
            parabolaDes_.AddEntriesFrom(input, _repeated_parabolaDes_codec);
            break;
          }
          case 93: {
            HeightOffsetMin = input.ReadFloat();
            break;
          }
          case 101: {
            HeightOffsetMax = input.ReadFloat();
            break;
          }
          case 109: {
            DesRangeOffset = input.ReadFloat();
            break;
          }
          case 117: {
            BallisticCalcRate = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateBullet_Config_Data : pb::IMessage<CreateBullet_Config_Data> {
    private static readonly pb::MessageParser<CreateBullet_Config_Data> _parser = new pb::MessageParser<CreateBullet_Config_Data>(() => new CreateBullet_Config_Data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateBullet_Config_Data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.SpellConfigReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateBullet_Config_Data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateBullet_Config_Data(CreateBullet_Config_Data other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateBullet_Config_Data Clone() {
      return new CreateBullet_Config_Data(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ConfigData.CreateBullet_Config> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::ConfigData.CreateBullet_Config.Parser);
    private readonly pbc::RepeatedField<global::ConfigData.CreateBullet_Config> items_ = new pbc::RepeatedField<global::ConfigData.CreateBullet_Config>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ConfigData.CreateBullet_Config> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateBullet_Config_Data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateBullet_Config_Data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateBullet_Config_Data other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Skill_Level_Config : pb::IMessage<Skill_Level_Config> {
    private static readonly pb::MessageParser<Skill_Level_Config> _parser = new pb::MessageParser<Skill_Level_Config>(() => new Skill_Level_Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Skill_Level_Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.SpellConfigReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Skill_Level_Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Skill_Level_Config(Skill_Level_Config other) : this() {
      id_ = other.id_;
      skillId_ = other.skillId_;
      levelStart_ = other.levelStart_;
      levelEnd_ = other.levelEnd_;
      materials_ = other.materials_.Clone();
      levelLimit_ = other.levelLimit_;
      rankLimit_ = other.rankLimit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Skill_Level_Config Clone() {
      return new Skill_Level_Config(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///* 唯一标识 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "skill_id" field.</summary>
    public const int SkillIdFieldNumber = 2;
    private uint skillId_;
    /// <summary>
    ///* 技能ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "level_start" field.</summary>
    public const int LevelStartFieldNumber = 3;
    private int levelStart_;
    /// <summary>
    ///* 等级 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelStart {
      get { return levelStart_; }
      set {
        levelStart_ = value;
      }
    }

    /// <summary>Field number for the "level_end" field.</summary>
    public const int LevelEndFieldNumber = 4;
    private int levelEnd_;
    /// <summary>
    ///* 本阶等级（仅供显示，无逻辑） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelEnd {
      get { return levelEnd_; }
      set {
        levelEnd_ = value;
      }
    }

    /// <summary>Field number for the "materials" field.</summary>
    public const int MaterialsFieldNumber = 5;
    private static readonly pb::FieldCodec<uint> _repeated_materials_codec
        = pb::FieldCodec.ForUInt32(42);
    private readonly pbc::RepeatedField<uint> materials_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///* 消耗材料 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Materials {
      get { return materials_; }
    }

    /// <summary>Field number for the "level_limit" field.</summary>
    public const int LevelLimitFieldNumber = 6;
    private int levelLimit_;
    /// <summary>
    ///* 技能升阶段，英雄等级需要大于等于限制等级 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelLimit {
      get { return levelLimit_; }
      set {
        levelLimit_ = value;
      }
    }

    /// <summary>Field number for the "rank_limit" field.</summary>
    public const int RankLimitFieldNumber = 7;
    private int rankLimit_;
    /// <summary>
    ///* 技能升级时星级限制 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankLimit {
      get { return rankLimit_; }
      set {
        rankLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Skill_Level_Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Skill_Level_Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (SkillId != other.SkillId) return false;
      if (LevelStart != other.LevelStart) return false;
      if (LevelEnd != other.LevelEnd) return false;
      if(!materials_.Equals(other.materials_)) return false;
      if (LevelLimit != other.LevelLimit) return false;
      if (RankLimit != other.RankLimit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (SkillId != 0) hash ^= SkillId.GetHashCode();
      if (LevelStart != 0) hash ^= LevelStart.GetHashCode();
      if (LevelEnd != 0) hash ^= LevelEnd.GetHashCode();
      hash ^= materials_.GetHashCode();
      if (LevelLimit != 0) hash ^= LevelLimit.GetHashCode();
      if (RankLimit != 0) hash ^= RankLimit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (SkillId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SkillId);
      }
      if (LevelStart != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LevelStart);
      }
      if (LevelEnd != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LevelEnd);
      }
      materials_.WriteTo(output, _repeated_materials_codec);
      if (LevelLimit != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(LevelLimit);
      }
      if (RankLimit != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(RankLimit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      if (LevelStart != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LevelStart);
      }
      if (LevelEnd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LevelEnd);
      }
      size += materials_.CalculateSize(_repeated_materials_codec);
      if (LevelLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LevelLimit);
      }
      if (RankLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RankLimit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Skill_Level_Config other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.SkillId != 0) {
        SkillId = other.SkillId;
      }
      if (other.LevelStart != 0) {
        LevelStart = other.LevelStart;
      }
      if (other.LevelEnd != 0) {
        LevelEnd = other.LevelEnd;
      }
      materials_.Add(other.materials_);
      if (other.LevelLimit != 0) {
        LevelLimit = other.LevelLimit;
      }
      if (other.RankLimit != 0) {
        RankLimit = other.RankLimit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            SkillId = input.ReadUInt32();
            break;
          }
          case 24: {
            LevelStart = input.ReadInt32();
            break;
          }
          case 32: {
            LevelEnd = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            materials_.AddEntriesFrom(input, _repeated_materials_codec);
            break;
          }
          case 48: {
            LevelLimit = input.ReadInt32();
            break;
          }
          case 56: {
            RankLimit = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Skill_Level_Config_Data : pb::IMessage<Skill_Level_Config_Data> {
    private static readonly pb::MessageParser<Skill_Level_Config_Data> _parser = new pb::MessageParser<Skill_Level_Config_Data>(() => new Skill_Level_Config_Data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Skill_Level_Config_Data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.SpellConfigReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Skill_Level_Config_Data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Skill_Level_Config_Data(Skill_Level_Config_Data other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Skill_Level_Config_Data Clone() {
      return new Skill_Level_Config_Data(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ConfigData.Skill_Level_Config> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::ConfigData.Skill_Level_Config.Parser);
    private readonly pbc::RepeatedField<global::ConfigData.Skill_Level_Config> items_ = new pbc::RepeatedField<global::ConfigData.Skill_Level_Config>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ConfigData.Skill_Level_Config> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Skill_Level_Config_Data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Skill_Level_Config_Data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Skill_Level_Config_Data other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
